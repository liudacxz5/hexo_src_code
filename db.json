{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source\\.nojekyll","path":".nojekyll","modified":1,"renderable":0},{"_id":"themes\\butterfly\\source\\css\\index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\css\\var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\img\\404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\img\\butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\img\\error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\img\\favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\img\\friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\js\\main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\js\\tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\js\\utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\js\\search\\algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes\\butterfly\\source\\js\\search\\local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source\\.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719475486560},{"_id":"source\\categories\\index.md","hash":"6aa7ead9325d2145c375ce95c3b153beaf2f123e","modified":1719579457242},{"_id":"source\\.git\\COMMIT_EDITMSG","hash":"ba8549b556a02ad80429f21137fce773d50e437b","modified":1751938472303},{"_id":"source\\.git\\HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1751938602371},{"_id":"source\\.git\\config","hash":"f5df457503d59bc681f81c4a77c5e88153286400","modified":1751938602372},{"_id":"source\\.git\\description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1751938459058},{"_id":"source\\.git\\index","hash":"ef73c107a70703d57b6512b4a7de6223d89faf09","modified":1751938472302},{"_id":"source\\tags\\index.md","hash":"8f93235bc88b95adbcdb56b4f638881f5135839f","modified":1719579455264},{"_id":"source\\.git\\info\\exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1751938459238},{"_id":"source\\.git\\hooks\\applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1751938459068},{"_id":"source\\.git\\hooks\\commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1751938459077},{"_id":"source\\.git\\hooks\\pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1751938459117},{"_id":"source\\.git\\hooks\\fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1751938459090},{"_id":"source\\.git\\hooks\\pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1751938459138},{"_id":"source\\.git\\hooks\\pre-commit.sample","hash":"8093d68e142db52dcab2215e770ba0bbe4cfbf24","modified":1751938459125},{"_id":"source\\.git\\hooks\\pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1751938459194},{"_id":"source\\.git\\hooks\\pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1751938459179},{"_id":"source\\.git\\hooks\\post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1751938459106},{"_id":"source\\.git\\hooks\\pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1751938459154},{"_id":"source\\.git\\hooks\\push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1751938459218},{"_id":"source\\.git\\hooks\\prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1751938459207},{"_id":"source\\.git\\hooks\\update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1751938459235},{"_id":"source\\_posts\\FastApi基础架构\\FastApi基础架构.md","hash":"d37b817e985c15402b73c21454a5b531a3c81912","modified":1747384467000},{"_id":"source\\.git\\hooks\\sendemail-validate.sample","hash":"74cf1d5415a5c03c110240f749491297d65c4c98","modified":1751938459226},{"_id":"source\\_posts\\Http状态码与字段\\Http状态码与字段.md","hash":"49f3329fd465d58398fe559c1cde405d9656c2f3","modified":1747876471000},{"_id":"source\\_posts\\Spring Bean\\Spring Bean.md","hash":"837b616ff0370e1dbeb7d886f9e3634894471f2b","modified":1744692262056},{"_id":"source\\_posts\\Spring\\Spring.md","hash":"c9e446cb6bc0e906f974e9f5624cae4d471aba85","modified":1744692261291},{"_id":"source\\_posts\\MapTask工作机制\\MapTask工作机制.md","hash":"fbd866c5990fd91582c032a32bd2e3452587b3c4","modified":1744692266408},{"_id":"source\\_posts\\docker四种重启方式\\docker四种重启方式.md","hash":"4ab49dd104473125aa08b0101df537e449d8d48c","modified":1744692269503},{"_id":"source\\_posts\\flask-layui基础项目架构\\flask-layui基础项目架构.md","hash":"cd00fbd5ef0ff8c2d4e027a2caa37f7c9d29c49b","modified":1744692268840},{"_id":"source\\_posts\\flask中config-py文件编写指南\\flask中config-py文件编写指南.md","hash":"74ec696af2b14c112eaed2ea6c926fecbb28482c","modified":1744692268131},{"_id":"source\\_posts\\excel数据转insert语句\\excel数据转insert语句.md","hash":"4f23e42712522b81e223d44433af388d9d78fedf","modified":1751941551668},{"_id":"source\\_posts\\hexo+github部署博客\\hexo+github部署博客.md","hash":"a0e952edfa6fda2e7edd5a871d39a0d94782651f","modified":1744692267118},{"_id":"source\\_posts\\oracle学习笔记-索引组织表和堆组织表\\oracle学习笔记-索引组织表和堆组织表.md","hash":"60882e8e6c2859ae04a8e11af69bb7146703c0d1","modified":1744692265059},{"_id":"source\\_posts\\oracle学习笔记-表空间、模式、表三者的关系\\oracle学习笔记-表空间、模式、表三者的关系.md","hash":"198c59ca74cd5a0915c5326a8eef7d9ba11ee88f","modified":1744692263496},{"_id":"source\\_posts\\oracle学习笔记-12c后的新特性cdb和pdb\\oracle学习笔记-12c后的新特性cdb和pdb.md","hash":"16febc8b797312da69815400dce99e5779ec71a0","modified":1744692265746},{"_id":"source\\_posts\\oracle学习笔记-表空间、区、段、数据块\\oracle学习笔记-表空间、区、段、数据块.md","hash":"3391105749a792d411da29ac7928e46f4af6145c","modified":1744692264250},{"_id":"source\\_posts\\oracle学习笔记-队列（Sequence）\\oracle学习笔记-队列（Sequence）.md","hash":"77009af123f0c37dd89b2ce6d51b8e469dfa6daf","modified":1744692262742},{"_id":"source\\_posts\\sql数学运算转为json\\sql数学运算转为json.md","hash":"3f9f4675ecfc04a0f5647c06bbfeab5639440086","modified":1748944181000},{"_id":"source\\_posts\\离线环境获取docker包\\离线环境获取docker包.md","hash":"5e64b573a63baf232813adb3f0a172423b440c1a","modified":1751941831276},{"_id":"source\\_posts\\大数据量返回前端方法\\大数据量返回前端方法.md","hash":"659ff0be2b40637665a0c46b051796af50856417","modified":1747707989000},{"_id":"source\\_posts\\sql查询语句转为json\\sql查询语句转为json.md","hash":"e440731d4dda255ac38c3588f46dbcbb5fe9c8ae","modified":1748940813000},{"_id":"source\\_posts\\开发基础知识-连接池\\开发基础知识-连接池.md","hash":"f18b27c5090f75718eb60ecda3543cbfdefb4d3d","modified":1744692260471},{"_id":"source\\_posts\\算法习题-判断是不是子字符串\\算法习题-判断是不是子字符串.md","hash":"d00d5970b608881bfa0c9bb9427c5a67498dae50","modified":1744692257589},{"_id":"source\\_posts\\算法习题-字符串切割\\算法习题-字符串切割.md","hash":"abf7c067172e73e4fc7d312b4e74a4dda5b9fe29","modified":1744692256779},{"_id":"source\\_posts\\算法习题-数据分类\\算法习题-数据分类.md","hash":"dbe436ac1b05224316f400b1deb307d7e7926fef","modified":1744692255958},{"_id":"source\\_posts\\算法基础知识\\算法基础知识.md","hash":"cd1d07ca7e2a87450e5c6a740c640e342d32a82e","modified":1744692252887},{"_id":"source\\_posts\\数据结构-递归\\数据结构-递归.md","hash":"b8a3f7c103b4ba9177abd6bc6f3969dd95d06b1c","modified":1744692259703},{"_id":"source\\_posts\\算法习题-求最大数\\算法习题-求最大数.md","hash":"f7a985bb94c710784fc771723266189fad223b46","modified":1744692255270},{"_id":"source\\_posts\\算法习题-统计射击比赛成绩\\算法习题-统计射击比赛成绩.md","hash":"40e51d67f5772863926b79a6d72913095d122bac","modified":1744692253897},{"_id":"source\\_posts\\FastAPI数据库连接方式推荐\\FastAPI数据库连接方式推荐.md","hash":"79dea5352499bd43bdf400828cf38e88609ca61b","modified":1747707981000},{"_id":"source\\.git\\objects\\4b\\825dc642cb6eb9a060e54bf8d69288fbee4904","hash":"f9acaead3e977c3d0fb7ad604631d5d838950772","modified":1751938472297},{"_id":"source\\_posts\\MapTask工作机制\\MapTask工作机制.jpg","hash":"3f88d1c6306451407320875c5d08ef33fbc1b3a0","modified":1741178721128},{"_id":"themes\\butterfly\\.gitignore","hash":"1e843a7254515d97ddb1d1d32ae83ebfae937f54","modified":1747703737680},{"_id":"themes\\butterfly\\LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1747703737680},{"_id":"themes\\butterfly\\_config.yml","hash":"3e4c6127158e4907d288b379aa4c8deadbaad142","modified":1747703737692},{"_id":"themes\\butterfly\\README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1747703737681},{"_id":"themes\\butterfly\\README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1747703737680},{"_id":"themes\\butterfly\\plugins.yml","hash":"4d640212611c062562a50c12e83038e46f4fe5fb","modified":1747703737723},{"_id":"themes\\butterfly\\languages\\ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1747703737693},{"_id":"themes\\butterfly\\languages\\ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1747703737693},{"_id":"themes\\butterfly\\package.json","hash":"8b428c39e2d03d3bda68511909a3bd6a11f11849","modified":1747703737723},{"_id":"themes\\butterfly\\languages\\en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1747703737692},{"_id":"themes\\butterfly\\languages\\default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1747703737692},{"_id":"themes\\butterfly\\.github\\FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1747703737678},{"_id":"themes\\butterfly\\languages\\zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1747703737693},{"_id":"themes\\butterfly\\languages\\zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1747703737693},{"_id":"themes\\butterfly\\languages\\zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1747703737694},{"_id":"themes\\butterfly\\layout\\archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1747703737694},{"_id":"themes\\butterfly\\layout\\index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1747703737722},{"_id":"themes\\butterfly\\layout\\page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1747703737722},{"_id":"themes\\butterfly\\layout\\category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1747703737694},{"_id":"themes\\butterfly\\layout\\post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1747703737723},{"_id":"themes\\butterfly\\layout\\tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1747703737723},{"_id":"themes\\butterfly\\.github\\ISSUE_TEMPLATE\\bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1747703737678},{"_id":"themes\\butterfly\\.github\\ISSUE_TEMPLATE\\feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1747703737679},{"_id":"themes\\butterfly\\.github\\workflows\\publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1747703737679},{"_id":"themes\\butterfly\\.github\\workflows\\stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1747703737680},{"_id":"themes\\butterfly\\layout\\includes\\additional-js.pug","hash":"caa7d1f2846610155962e14ef8f209cc08723c4f","modified":1747703737695},{"_id":"themes\\butterfly\\.github\\ISSUE_TEMPLATE\\config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1747703737679},{"_id":"themes\\butterfly\\layout\\includes\\footer.pug","hash":"d30413aa2a17bf31e4084f1096523ead7f2a6bf1","modified":1747703737695},{"_id":"themes\\butterfly\\layout\\includes\\head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1747703737695},{"_id":"themes\\butterfly\\layout\\includes\\pagination.pug","hash":"bba7e5aa92858f66af4b7a82326171f49460a1a6","modified":1747703737702},{"_id":"themes\\butterfly\\layout\\includes\\layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1747703737699},{"_id":"themes\\butterfly\\layout\\includes\\rightside.pug","hash":"3617840416f26078117f760579fb544dce07e1bc","modified":1747703737703},{"_id":"themes\\butterfly\\layout\\includes\\sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1747703737703},{"_id":"themes\\butterfly\\scripts\\common\\postDesc.js","hash":"ba98361b9d469076bfb045e5ff42eaf764a38fb1","modified":1747703737724},{"_id":"themes\\butterfly\\scripts\\events\\404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1747703737724},{"_id":"themes\\butterfly\\scripts\\events\\cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1747703737724},{"_id":"themes\\butterfly\\scripts\\events\\init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1747703737725},{"_id":"themes\\butterfly\\scripts\\events\\comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1747703737724},{"_id":"themes\\butterfly\\scripts\\events\\stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1747703737725},{"_id":"themes\\butterfly\\scripts\\events\\merge_config.js","hash":"5518fe648ffe8ebf870fdec50a3209732d79ab23","modified":1747703737725},{"_id":"themes\\butterfly\\scripts\\events\\welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1747703737725},{"_id":"themes\\butterfly\\scripts\\helpers\\aside_archives.js","hash":"d2878483c160999240e969a34e3ddc51a780821b","modified":1747703737726},{"_id":"themes\\butterfly\\scripts\\helpers\\aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1747703737727},{"_id":"themes\\butterfly\\scripts\\helpers\\inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1747703737727},{"_id":"themes\\butterfly\\scripts\\helpers\\getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1747703737727},{"_id":"themes\\butterfly\\scripts\\helpers\\related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1747703737727},{"_id":"themes\\butterfly\\scripts\\helpers\\page.js","hash":"b9af69d8998d748178348d93a19daccff0550c56","modified":1747703737727},{"_id":"themes\\butterfly\\scripts\\filters\\post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1747703737726},{"_id":"themes\\butterfly\\scripts\\helpers\\series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1747703737728},{"_id":"themes\\butterfly\\scripts\\filters\\random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1747703737726},{"_id":"themes\\butterfly\\scripts\\tag\\button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1747703737728},{"_id":"themes\\butterfly\\scripts\\tag\\chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1747703737728},{"_id":"themes\\butterfly\\scripts\\tag\\flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1747703737728},{"_id":"themes\\butterfly\\scripts\\tag\\gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1747703737729},{"_id":"themes\\butterfly\\scripts\\tag\\hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1747703737729},{"_id":"themes\\butterfly\\scripts\\tag\\inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1747703737729},{"_id":"themes\\butterfly\\scripts\\tag\\label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1747703737729},{"_id":"themes\\butterfly\\scripts\\tag\\mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1747703737729},{"_id":"themes\\butterfly\\scripts\\tag\\note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1747703737730},{"_id":"themes\\butterfly\\scripts\\tag\\score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1747703737730},{"_id":"themes\\butterfly\\scripts\\tag\\series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1747703737730},{"_id":"themes\\butterfly\\scripts\\tag\\tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1747703737730},{"_id":"themes\\butterfly\\source\\css\\index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1747703737742},{"_id":"themes\\butterfly\\source\\css\\var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1747703737742},{"_id":"themes\\butterfly\\source\\img\\404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1747703737743},{"_id":"themes\\butterfly\\scripts\\tag\\timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1747703737730},{"_id":"themes\\butterfly\\source\\img\\error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1747703737746},{"_id":"themes\\butterfly\\source\\img\\favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1747703737746},{"_id":"themes\\butterfly\\source\\img\\friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1747703737747},{"_id":"themes\\butterfly\\source\\js\\tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1747703737748},{"_id":"themes\\butterfly\\source\\js\\main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1747703737747},{"_id":"themes\\butterfly\\layout\\includes\\head\\Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1747703737695},{"_id":"themes\\butterfly\\source\\js\\utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1747703737749},{"_id":"themes\\butterfly\\layout\\includes\\head\\config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1747703737696},{"_id":"themes\\butterfly\\layout\\includes\\head\\analytics.pug","hash":"f87a101c881d8942c9a8b4337f3dd3c45de023c5","modified":1747703737696},{"_id":"themes\\butterfly\\layout\\includes\\head\\google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1747703737696},{"_id":"themes\\butterfly\\layout\\includes\\head\\config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1747703737696},{"_id":"themes\\butterfly\\layout\\includes\\head\\preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1747703737696},{"_id":"themes\\butterfly\\layout\\includes\\head\\pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1747703737697},{"_id":"themes\\butterfly\\layout\\includes\\head\\site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1747703737697},{"_id":"themes\\butterfly\\layout\\includes\\header\\index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1747703737698},{"_id":"themes\\butterfly\\layout\\includes\\header\\menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1747703737698},{"_id":"themes\\butterfly\\layout\\includes\\head\\structured_data.pug","hash":"9e8568a2556692faf36b9041eedadd1814179b0a","modified":1747703737697},{"_id":"themes\\butterfly\\layout\\includes\\header\\nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1747703737698},{"_id":"themes\\butterfly\\layout\\includes\\header\\post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1747703737698},{"_id":"themes\\butterfly\\layout\\includes\\header\\social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1747703737699},{"_id":"themes\\butterfly\\layout\\includes\\page\\404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1747703737701},{"_id":"themes\\butterfly\\layout\\includes\\loading\\fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1747703737700},{"_id":"themes\\butterfly\\layout\\includes\\loading\\index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1747703737700},{"_id":"themes\\butterfly\\layout\\includes\\mixins\\indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1747703737700},{"_id":"themes\\butterfly\\layout\\includes\\loading\\pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1747703737700},{"_id":"themes\\butterfly\\layout\\includes\\mixins\\article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1747703737700},{"_id":"themes\\butterfly\\layout\\includes\\page\\default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1747703737701},{"_id":"themes\\butterfly\\layout\\includes\\page\\flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1747703737701},{"_id":"themes\\butterfly\\layout\\includes\\page\\categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1747703737701},{"_id":"themes\\butterfly\\layout\\includes\\page\\tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1747703737702},{"_id":"themes\\butterfly\\layout\\includes\\post\\post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1747703737702},{"_id":"themes\\butterfly\\layout\\includes\\page\\shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1747703737701},{"_id":"themes\\butterfly\\layout\\includes\\post\\outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1747703737702},{"_id":"themes\\butterfly\\layout\\includes\\post\\reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1747703737703},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1747703737704},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1747703737713},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\pjax.pug","hash":"d29ee6a07e6716c0dc1d4533c87b19b6076fefd3","modified":1747703737717},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1747703737717},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1747703737719},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1747703737719},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1747703737720},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1747703737720},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1747703737720},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1747703737720},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1747703737721},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1747703737721},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1747703737720},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1747703737721},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1747703737721},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1747703737721},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1747703737722},{"_id":"themes\\butterfly\\layout\\includes\\widget\\card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1747703737722},{"_id":"themes\\butterfly\\layout\\includes\\widget\\index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1747703737722},{"_id":"themes\\butterfly\\source\\css\\_global\\function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1747703737731},{"_id":"themes\\butterfly\\source\\css\\_global\\index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1747703737731},{"_id":"themes\\butterfly\\source\\css\\_highlight\\highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1747703737732},{"_id":"themes\\butterfly\\source\\css\\_layout\\aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1747703737734},{"_id":"themes\\butterfly\\source\\css\\_highlight\\theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1747703737733},{"_id":"themes\\butterfly\\source\\css\\_layout\\chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1747703737734},{"_id":"themes\\butterfly\\source\\css\\_layout\\comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1747703737734},{"_id":"themes\\butterfly\\source\\css\\_layout\\footer.styl","hash":"5692bcf8929f7ef12b10d860da6cb90ca55752c0","modified":1747703737734},{"_id":"themes\\butterfly\\source\\css\\_layout\\head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1747703737734},{"_id":"themes\\butterfly\\source\\css\\_layout\\post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1747703737735},{"_id":"themes\\butterfly\\source\\css\\_layout\\pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1747703737735},{"_id":"themes\\butterfly\\source\\css\\_layout\\loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1747703737735},{"_id":"themes\\butterfly\\source\\css\\_layout\\reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1747703737736},{"_id":"themes\\butterfly\\source\\css\\_layout\\rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1747703737736},{"_id":"themes\\butterfly\\source\\css\\_layout\\relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1747703737735},{"_id":"themes\\butterfly\\source\\css\\_layout\\sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1747703737736},{"_id":"themes\\butterfly\\source\\css\\_layout\\third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1747703737736},{"_id":"themes\\butterfly\\source\\css\\_page\\404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1747703737737},{"_id":"themes\\butterfly\\source\\css\\_page\\archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1747703737737},{"_id":"themes\\butterfly\\source\\css\\_page\\categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1747703737738},{"_id":"themes\\butterfly\\source\\css\\_page\\common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1747703737738},{"_id":"themes\\butterfly\\source\\css\\_page\\homepage.styl","hash":"fc26e980fedde31644ebf878967f66ef9ba32be2","modified":1747703737738},{"_id":"themes\\butterfly\\source\\css\\_page\\flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1747703737738},{"_id":"themes\\butterfly\\source\\css\\_page\\shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1747703737738},{"_id":"themes\\butterfly\\source\\css\\_page\\tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1747703737739},{"_id":"themes\\butterfly\\source\\css\\_mode\\darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1747703737737},{"_id":"themes\\butterfly\\source\\css\\_mode\\readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1747703737737},{"_id":"themes\\butterfly\\source\\css\\_search\\algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1747703737739},{"_id":"themes\\butterfly\\source\\css\\_search\\index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1747703737739},{"_id":"themes\\butterfly\\source\\css\\_search\\local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1747703737739},{"_id":"themes\\butterfly\\source\\css\\_tags\\button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1747703737740},{"_id":"themes\\butterfly\\source\\css\\_tags\\gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1747703737740},{"_id":"themes\\butterfly\\source\\css\\_tags\\hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1747703737740},{"_id":"themes\\butterfly\\source\\css\\_tags\\hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1747703737740},{"_id":"themes\\butterfly\\source\\css\\_tags\\inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1747703737741},{"_id":"themes\\butterfly\\source\\css\\_tags\\label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1747703737741},{"_id":"themes\\butterfly\\source\\css\\_tags\\series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1747703737741},{"_id":"themes\\butterfly\\source\\css\\_tags\\note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1747703737741},{"_id":"themes\\butterfly\\source\\css\\_tags\\tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1747703737741},{"_id":"themes\\butterfly\\source\\css\\_tags\\timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1747703737742},{"_id":"themes\\butterfly\\source\\css\\_third-party\\normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1747703737742},{"_id":"themes\\butterfly\\source\\js\\search\\local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1747703737748},{"_id":"themes\\butterfly\\source\\js\\search\\algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1747703737748},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\abcjs\\abcjs.pug","hash":"fb0b341ac8cb3ce466d1853cea4704f1e3e5ba7f","modified":1747703737704},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\abcjs\\index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1747703737704},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1747703737705},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1747703737705},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1747703737704},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1747703737708},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1747703737708},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1747703737708},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1747703737709},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\card-post-count\\waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1747703737709},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\chat\\chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1747703737709},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\chat\\crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1747703737709},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\chat\\tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1747703737710},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1747703737710},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\chat\\index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1747703737710},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1747703737711},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1747703737711},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1747703737711},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1747703737712},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1747703737711},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1747703737711},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1747703737712},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1747703737719},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1747703737712},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1747703737712},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1747703737713},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1747703737712},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1747703737713},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\math\\chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1747703737714},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\math\\index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1747703737714},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\math\\katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1747703737714},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\comments\\waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1747703737713},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\math\\mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1747703737714},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\math\\mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1747703737714},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1747703737715},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1747703737715},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1747703737715},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1747703737716},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1747703737716},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1747703737716},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1747703737716},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1747703737716},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\newest-comments\\waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1747703737717},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\search\\algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1747703737717},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\search\\docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1747703737718},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\search\\local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1747703737718},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\share\\index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1747703737718},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\search\\index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1747703737718},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\share\\addtoany.pug","hash":"5c944052280c5ed046d2cfeb54b0da8876af0ec6","modified":1747703737718},{"_id":"themes\\butterfly\\layout\\includes\\third-party\\share\\share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1747703737719},{"_id":"themes\\butterfly\\source\\css\\_highlight\\highlight\\index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1747703737732},{"_id":"themes\\butterfly\\source\\css\\_highlight\\highlight\\diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1747703737732},{"_id":"themes\\butterfly\\source\\css\\_highlight\\prismjs\\index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1747703737733},{"_id":"themes\\butterfly\\source\\css\\_highlight\\prismjs\\diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1747703737733},{"_id":"themes\\butterfly\\source\\css\\_highlight\\prismjs\\line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1747703737733},{"_id":"themes\\butterfly\\source\\img\\butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1747703737745},{"_id":"public/404.html","hash":"d4bfb38d32124087310dd287a2564bcc9f5fd638","modified":1751941891153},{"_id":"public/tags/index.html","hash":"7c7d9721e628e28570e30c2a3bcacab7c6518d86","modified":1751941891153},{"_id":"public/categories/index.html","hash":"5debc83639b4b5bd93bde13693464118cbc5fbfc","modified":1751941891153},{"_id":"public/2024/06/26/hexo+github部署博客/hexo+github部署博客/index.html","hash":"0456fd2a488e49283344612f472d5c2088c17a5e","modified":1751941891153},{"_id":"public/2024/06/26/算法基础知识/算法基础知识/index.html","hash":"a0b200dcec758a761d315dd9829deca9e3ed3223","modified":1751941891153},{"_id":"public/2024/07/01/数据结构-递归/数据结构-递归/index.html","hash":"a32535875aaddccf6beb47b95c6f868f9e209d5a","modified":1751941891153},{"_id":"public/2025/03/05/Spring Bean/Spring Bean/index.html","hash":"8fdbc6cfac33bc42345e26bed9fa41a44cece200","modified":1751941891153},{"_id":"public/2025/03/05/MapTask工作机制/MapTask工作机制/index.html","hash":"4decc31bef57bc40ffeba0aa2fc604b62c972193","modified":1751941891153},{"_id":"public/2025/03/05/Spring/Spring/index.html","hash":"f9f4cba88ef8af88bca173b9554d7ed6b77a0240","modified":1751941891153},{"_id":"public/2025/03/13/docker四种重启方式/docker四种重启方式/index.html","hash":"149c8c0838788e06c6e9fa2c76e7d8df0d2d7358","modified":1751941891153},{"_id":"public/2025/04/05/flask-layui基础项目架构/flask-layui基础项目架构/index.html","hash":"815a19330222ed69c4346a95d802c68d4ae4fb95","modified":1751941891153},{"_id":"public/2025/04/05/flask中config-py文件编写指南/flask中config-py文件编写指南/index.html","hash":"c4bf36518af52ce5b29bfaff236be5d25ea57246","modified":1751941891153},{"_id":"public/2025/04/08/算法习题-统计射击比赛成绩/算法习题-统计射击比赛成绩/index.html","hash":"22a7fdd931645f3da52c4e04cc466fc74ecc85f3","modified":1751941891153},{"_id":"public/2025/04/08/算法习题-求最大数/算法习题-求最大数/index.html","hash":"67fc838cdd04ea5d94615c1970b0e95d01cbdf09","modified":1751941891153},{"_id":"public/2025/04/08/算法习题-字符串切割/算法习题-字符串切割/index.html","hash":"31607317e68f9fdd33d689b7aeeae433f25f1d5f","modified":1751941891153},{"_id":"public/2025/04/08/算法习题-判断是不是子字符串/算法习题-判断是不是子字符串/index.html","hash":"3f9bc5a71a309d0de47d407769a22bf1f9305c73","modified":1751941891153},{"_id":"public/2025/04/09/算法习题-数据分类/算法习题-数据分类/index.html","hash":"0fcd88b4601fcc14fd284996970339c3a6ad4fe3","modified":1751941891153},{"_id":"public/2025/04/13/oracle学习笔记-表空间、区、段、数据块/oracle学习笔记-表空间、区、段、数据块/index.html","hash":"35112658ef9987560a2aed16e1bbabbbea001b35","modified":1751941891153},{"_id":"public/2025/04/12/oracle学习笔记-表空间、模式、表三者的关系/oracle学习笔记-表空间、模式、表三者的关系/index.html","hash":"d2cfbc445bff3ddad128744443d8b9ba27c21a67","modified":1751941891153},{"_id":"public/2025/04/12/oracle学习笔记-12c后的新特性cdb和pdb/oracle学习笔记-12c后的新特性cdb和pdb/index.html","hash":"6431679c0f9744d8cbf60b8e1c0331b9729131be","modified":1751941891153},{"_id":"public/2025/04/13/oracle学习笔记-索引组织表和堆组织表/oracle学习笔记-索引组织表和堆组织表/index.html","hash":"458684e2aaee5ce9fdf1af9cb8b544fadb1ec88b","modified":1751941891153},{"_id":"public/2025/04/13/oracle学习笔记-队列（Sequence）/oracle学习笔记-队列（Sequence）/index.html","hash":"bf32f1e7c117f410b199f7c417422aec729d4fc5","modified":1751941891153},{"_id":"public/2025/05/20/FastApi基础架构/FastApi基础架构/index.html","hash":"e241b89b3573bf1e6815de36594b4a364575db49","modified":1751941891153},{"_id":"public/2025/04/13/开发基础知识-连接池/开发基础知识-连接池/index.html","hash":"6c51cb9486bcc55fb5c69448aa2593f4e2272c5c","modified":1751941891153},{"_id":"public/2025/05/20/FastAPI数据库连接方式推荐/FastAPI数据库连接方式推荐/index.html","hash":"9270e3c67109e0b3f2cd393f8c8aa310f131a7ff","modified":1751941891153},{"_id":"public/2025/06/03/sql查询语句转为json/sql查询语句转为json/index.html","hash":"092a7d8f015b716979acc6d53319abde892b24c1","modified":1751941891153},{"_id":"public/2025/05/22/Http状态码与字段/Http状态码与字段/index.html","hash":"bea8c5852f4ac65a650a3248819ea07a62747b5b","modified":1751941891153},{"_id":"public/2025/05/20/大数据量返回前端方法/大数据量返回前端方法/index.html","hash":"3c3737f271ae38195c2cd3f408d3082fe3c4d534","modified":1751941891153},{"_id":"public/2025/06/03/sql数学运算转为json/sql数学运算转为json/index.html","hash":"daa22207fc5b998982debe8c9f544da19fc0c9a8","modified":1751941891153},{"_id":"public/2025/07/08/excel数据转insert语句/excel数据转insert语句/index.html","hash":"d26c6ff17cea8d783eea41494332f211459c42f3","modified":1751941891153},{"_id":"public/2025/07/08/离线环境获取docker包/离线环境获取docker包/index.html","hash":"e50f72163c422c900ce724c4bdcd2ed117800b87","modified":1751941891153},{"_id":"public/archives/index.html","hash":"38b08ed5b6264ddc909056d2440cfd228a926f4d","modified":1751941891153},{"_id":"public/archives/page/3/index.html","hash":"e785b2e59b5639758247aa01842895b6b2a3fc98","modified":1751941891153},{"_id":"public/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1751941891153},{"_id":"public/archives/page/2/index.html","hash":"4d22e409199d94b171f37f32ad52b445b3272e3b","modified":1751941891153},{"_id":"public/archives/2024/index.html","hash":"6dd34b1ee75b3dedfc4a3d95e65b43b0c0e09452","modified":1751941891153},{"_id":"public/archives/2024/06/index.html","hash":"1546388df69e8987d438a38d6920f4cf14de8e3c","modified":1751941891153},{"_id":"public/archives/2024/07/index.html","hash":"32f56f8ffd77fc0b10da47ce35110a8bd951e836","modified":1751941891153},{"_id":"public/archives/2025/index.html","hash":"5e151908dbb985d9685299d1033b817fbb012b68","modified":1751941891153},{"_id":"public/archives/2025/page/2/index.html","hash":"fe5211ee70b894954f0e4932f3c0f104780304a3","modified":1751941891153},{"_id":"public/archives/2025/page/3/index.html","hash":"5e372dd6786c97dda231746c9c75bebed0d73fb8","modified":1751941891153},{"_id":"public/archives/2025/03/index.html","hash":"7b90140ea35c9dcc11ea137c1f3ced082e13ccbb","modified":1751941891153},{"_id":"public/archives/2025/04/index.html","hash":"10a7296fa3142b903abe0b686a10ea4178dfed94","modified":1751941891153},{"_id":"public/archives/2025/04/page/2/index.html","hash":"6bc2ab2e0ccbffa824d39e8caf1abc5a3441b03a","modified":1751941891153},{"_id":"public/archives/2025/05/index.html","hash":"5848cf04c15078bf9fd80388286059890d4453dd","modified":1751941891153},{"_id":"public/archives/2025/06/index.html","hash":"7d9bf5a095a5efbe3e897913f4351c3eeb5a71ad","modified":1751941891153},{"_id":"public/archives/2025/07/index.html","hash":"e0e854319edb8f43c8532aa2a3b418e538b62679","modified":1751941891153},{"_id":"public/categories/技术/index.html","hash":"d360288770bbab1dbcd06c10324d5cd9388ce47d","modified":1751941891153},{"_id":"public/categories/技术/page/2/index.html","hash":"16f5beb6f8c0c09c188d0a142b3ea7b60b28f4cc","modified":1751941891153},{"_id":"public/categories/技术/flask/index.html","hash":"7e96dc89650666294da30d9c54c11930164e26d7","modified":1751941891153},{"_id":"public/categories/技术/Spring/index.html","hash":"55808bcc396784ae05439ee00935291e743d8ebe","modified":1751941891153},{"_id":"public/categories/技术/docker/index.html","hash":"2bc8331e0bae8aef233bac4a30726fdcdda7e76c","modified":1751941891153},{"_id":"public/categories/开发心得/index.html","hash":"b8af6f740922bb7010ddf7e0bbf3a3371c262437","modified":1751941891153},{"_id":"public/categories/技术/hadoop/index.html","hash":"7e356f004b9ce4f718833d9daf1fcf8950b4e160","modified":1751941891153},{"_id":"public/categories/技术/hexo/index.html","hash":"e813e8fb74689da163b66e5d0feab69db00b1983","modified":1751941891153},{"_id":"public/categories/技术/oracle/index.html","hash":"000529be546994b18260e1ee98fd0ab662a428be","modified":1751941891153},{"_id":"public/categories/技术/开发基础知识/index.html","hash":"206992fcd35b5e7d80e5623329909c5b52fbc38d","modified":1751941891153},{"_id":"public/index.html","hash":"ec404019485794eee6a603f136cf88f399e9da85","modified":1751941891153},{"_id":"public/categories/算法/index.html","hash":"79893f97ae965b8bb9a81ad642462ba7ed0a1f3a","modified":1751941891153},{"_id":"public/categories/算法/习题/index.html","hash":"7b2b75bc1929e8449a522e768645361ba6110bc4","modified":1751941891153},{"_id":"public/page/2/index.html","hash":"0b657f2e553098477db60f21353a822ab4ef3610","modified":1751941891153},{"_id":"public/page/3/index.html","hash":"b188e8482efc17f138c9563c7186b357ae0c72a0","modified":1751941891153},{"_id":"public/tags/Spring/index.html","hash":"3b2610a170839230af38824ae0def583a93f9c0a","modified":1751941891153},{"_id":"public/tags/hadoop/index.html","hash":"123c2df9805f941294ea29598655e2ffc530ecc7","modified":1751941891153},{"_id":"public/tags/flask/index.html","hash":"4491f5f7d2b44b8c8c782ea6eca4663fa6b24662","modified":1751941891153},{"_id":"public/tags/layui/index.html","hash":"b10dd22fc5e1fab4a44a6b86d6231406b60a06ec","modified":1751941891153},{"_id":"public/tags/docker/index.html","hash":"76e31aff8cf1a2250464c11b966b14a36441a3c6","modified":1751941891153},{"_id":"public/tags/excel/index.html","hash":"f429ff6b8d8ba43fbb001fa3b68d09abc839ac63","modified":1751941891153},{"_id":"public/tags/sql/index.html","hash":"2c0baab2f852a9df60e83efacebc907525b06efb","modified":1751941891153},{"_id":"public/tags/开发心得/index.html","hash":"02bb7baad088f4c49ad7197682d71b9b1bbf56e5","modified":1751941891153},{"_id":"public/tags/config/index.html","hash":"5c6c3c23840014eaa3849d6385e3d5959a71d672","modified":1751941891153},{"_id":"public/tags/hexo/index.html","hash":"277783651ede91f6b53c137e908361cab57e3c34","modified":1751941891153},{"_id":"public/tags/oracle/index.html","hash":"2e6d01b17054968c9f0767f178a539079f987c99","modified":1751941891153},{"_id":"public/tags/开发基础知识/index.html","hash":"b7b5760cd41d24023f01ca2f246617e8b0417201","modified":1751941891153},{"_id":"public/tags/算法/index.html","hash":"de4161e104b68f4b29582ac90f22923d638e00ab","modified":1751941891153},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1751941891153},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1751941891153},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1751941891153},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1751941891153},{"_id":"public/css/index.css","hash":"43ab37554451d99354892298ef143ff098b3ad09","modified":1751941891153},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1751941891153},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1751941891153},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1751941891153},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1751941891153},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1751941891153},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1751941891153},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1751941891153}],"Category":[{"name":"技术","_id":"cmctwyvaq0007x4gr4eq9e9lr"},{"name":"flask","parent":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvax000mx4gre5bfap6e"},{"name":"Spring","parent":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvaz000rx4gr3q4nb7aa"},{"name":"docker","parent":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb0000wx4gr2hls1dhf"},{"name":"开发心得","_id":"cmctwyvb10014x4grhg9u7u7u"},{"name":"hadoop","parent":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb3001cx4gr70xs58eu"},{"name":"hexo","parent":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb6001nx4gr1mwyas8u"},{"name":"oracle","parent":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb80020x4gr4if51m6q"},{"name":"开发基础知识","parent":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvba002ux4gr0p2u8k3c"},{"name":"算法","_id":"cmctwyvba0033x4grcw49alv9"},{"name":"习题","parent":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbc003nx4gr30x3932s"}],"Data":[],"Page":[{"title":"标签","date":"2024-06-27T07:04:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-06-27 15:04:25\ntype: tags\n---\n","updated":"2024-06-28T12:57:35.264Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmctwyvae0000x4gr2otvc6bp","content":"","excerpt":"","more":""},{"title":"分类","date":"2024-06-27T07:06:05.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-06-27 15:06:05\ntype: \"categories\"\n---","updated":"2024-06-28T12:57:37.242Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmctwyvah0002x4gratic1ub0","content":"","excerpt":"","more":""}],"Post":[{"_content":"## FastAPI数据库连接方式推荐\n在 FastAPI 框架下结合 Pandas 操作数据库时，选择高效的数据库连接方式需综合考虑 **异步性能**、**代码简洁性** 和 **Pandas 兼容性**。以下是几种推荐方案及具体实现：\n\n---\n\n### **1. 异步驱动 + SQLAlchemy Core（推荐）**\n结合异步数据库驱动（如 `asyncpg`）和 SQLAlchemy 的异步核心（`SQLAlchemy Core`），既能利用 FastAPI 的异步优势，又兼容 Pandas 的同步操作。\n\n#### **步骤说明**\n1. **安装依赖**：\n   ```bash\n   pip install fastapi sqlalchemy asyncpg pandas databases\n   ```\n\n2. **配置异步数据库连接**：\n   ```python\n   from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\n   from sqlalchemy.orm import sessionmaker\n   from sqlalchemy import text\n\n   # 异步引擎配置（以 PostgreSQL 为例）\n   DATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\n   async_engine = create_async_engine(DATABASE_URL)\n   AsyncSessionLocal = sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=False)\n   ```\n\n3. **FastAPI 依赖注入会话**：\n   ```python\n   from fastapi import Depends, FastAPI\n   app = FastAPI()\n\n   async def get_db():\n       async with AsyncSessionLocal() as session:\n           yield session\n   ```\n\n4. **异步查询 + Pandas 处理**：\n   ```python\n   import pandas as pd\n   from fastapi.concurrency import run_in_threadpool\n\n   @app.get(\"/data\")\n   async def get_data(db: AsyncSession = Depends(get_db)):\n       # 异步执行 SQL 查询\n       result = await db.execute(text(\"SELECT * FROM table\"))\n       rows = result.mappings().all()\n       \n       # 将异步查询结果转为 Pandas DataFrame（通过线程池避免阻塞事件循环）\n       df = await run_in_threadpool(pd.DataFrame, rows)\n       \n       # 使用 Pandas 处理数据\n       processed_df = df[df[\"value\"] > 100]\n       return processed_df.to_dict(orient=\"records\")\n   ```\n\n#### **优点**\n- **异步高效**：利用 FastAPI 的异步特性处理高并发请求。\n- **线程池隔离**：通过 `run_in_threadpool` 运行 Pandas 的同步操作，避免阻塞事件循环。\n- **ORM 灵活性**：可同时使用 SQLAlchemy ORM 或 Core。\n\n---\n\n### **2. 纯异步驱动（如 `asyncpg`）直接操作**\n直接使用异步驱动查询数据库，再手动将结果转换为 DataFrame。\n\n#### **实现代码**\n```python\nimport asyncpg\nimport pandas as pd\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nasync def get_asyncpg_conn():\n    return await asyncpg.connect(\"postgresql://user:password@localhost/dbname\")\n\n@app.get(\"/data\")\nasync def get_data():\n    conn = await get_asyncpg_conn()\n    try:\n        # 异步查询\n        rows = await conn.fetch(\"SELECT * FROM table\")\n        # 转换为 DataFrame\n        df = pd.DataFrame([dict(row) for row in rows], columns=[\"col1\", \"col2\"])\n        processed_df = df[df[\"value\"] > 100]\n        return processed_df.to_dict(orient=\"records\")\n    finally:\n        await conn.close()\n```\n\n#### **优点**\n- **极简轻量**：无需 ORM 框架，直接控制 SQL。\n- **高性能**：异步驱动原生支持高并发。\n\n#### **缺点**\n- **手动转换**：需手动将数据库记录转换为 DataFrame。\n- **无 ORM 支持**：复杂查询需手写 SQL。\n\n---\n\n### **3. 同步驱动 + 线程池兼容**\n使用同步驱动（如 `psycopg2`）并在 FastAPI 中通过线程池运行，确保不阻塞主线程。\n\n#### **实现代码**\n```python\nfrom fastapi import FastAPI\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nimport pandas as pd\nfrom fastapi.concurrency import run_in_threadpool\n\napp = FastAPI()\n\n# 同步引擎配置\nSYNC_DATABASE_URL = \"postgresql://user:password@localhost/dbname\"\nsync_engine = create_engine(SYNC_DATABASE_URL)\nSyncSessionLocal = sessionmaker(sync_engine)\n\n@app.get(\"/data\")\nasync def get_data():\n    def sync_query():\n        with SyncSessionLocal() as session:\n            result = session.execute(\"SELECT * FROM table\")\n            return [dict(row) for row in result]\n\n    # 在线程池中执行同步查询\n    rows = await run_in_threadpool(sync_query)\n    df = pd.DataFrame(rows)\n    processed_df = df[df[\"value\"] > 100]\n    return processed_df.to_dict(orient=\"records\")\n```\n\n#### **适用场景**\n- **遗留代码迁移**：已有基于同步驱动的代码需快速集成到 FastAPI。\n- **简单查询**：无需复杂异步优化的小型项目。\n\n---\n\n### **4. ODBC 或专用数据库适配器**\n针对特定数据库（如 SQL Server、Oracle）使用 ODBC 或专用异步驱动。\n\n#### **示例（SQL Server + pyodbc）**\n```python\nimport pyodbc\nimport pandas as pd\nfrom fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\n\napp = FastAPI()\n\ndef sync_query():\n    conn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=localhost;DATABASE=dbname;UID=user;PWD=password\")\n    df = pd.read_sql(\"SELECT * FROM table\", conn)\n    conn.close()\n    return df\n\n@app.get(\"/data\")\nasync def get_data():\n    df = await run_in_threadpool(sync_query)\n    processed_df = df[df[\"value\"] > 100]\n    return processed_df.to_dict(orient=\"records\")\n```\n\n---\n\n### **对比总结**\n| **方案**               | **性能** | **代码复杂度** | **Pandas 兼容性** | **适用场景**               |\n|------------------------|----------|----------------|--------------------|--------------------------|\n| 异步驱动 + SQLAlchemy  | ⭐⭐⭐⭐   | ⭐⭐⭐          | ⭐⭐⭐⭐            | 高并发生产环境            |\n| 纯异步驱动（asyncpg）  | ⭐⭐⭐⭐⭐  | ⭐⭐           | ⭐⭐               | 轻量级简单查询           |\n| 同步驱动 + 线程池      | ⭐⭐      | ⭐            | ⭐⭐⭐⭐⭐           | 遗留系统或简单应用       |\n| ODBC/专用驱动          | ⭐⭐      | ⭐⭐⭐         | ⭐⭐⭐              | 特定数据库（如 SQL Server）|\n\n---\n\n### **最佳实践建议**\n1. **优先选择异步驱动 + SQLAlchemy Core**：平衡性能和开发效率。\n2. **大数据量分块处理**：使用 `chunksize` 参数避免内存溢出：\n   ```python\n   df = pd.read_sql(query, con, chunksize=1000)\n   for chunk in df:\n       process(chunk)\n   ```\n3. **连接池管理**：通过 SQLAlchemy 或异步驱动内置池化机制复用连接。\n4. **错误重试机制**：为数据库操作添加重试逻辑（如 `tenacity` 库）。\n\n通过合理选择连接方式，可显著提升 FastAPI + Pandas 组合的数据库处理效率！","source":"_posts/FastAPI数据库连接方式推荐/FastAPI数据库连接方式推荐.md","raw":"## FastAPI数据库连接方式推荐\n在 FastAPI 框架下结合 Pandas 操作数据库时，选择高效的数据库连接方式需综合考虑 **异步性能**、**代码简洁性** 和 **Pandas 兼容性**。以下是几种推荐方案及具体实现：\n\n---\n\n### **1. 异步驱动 + SQLAlchemy Core（推荐）**\n结合异步数据库驱动（如 `asyncpg`）和 SQLAlchemy 的异步核心（`SQLAlchemy Core`），既能利用 FastAPI 的异步优势，又兼容 Pandas 的同步操作。\n\n#### **步骤说明**\n1. **安装依赖**：\n   ```bash\n   pip install fastapi sqlalchemy asyncpg pandas databases\n   ```\n\n2. **配置异步数据库连接**：\n   ```python\n   from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\n   from sqlalchemy.orm import sessionmaker\n   from sqlalchemy import text\n\n   # 异步引擎配置（以 PostgreSQL 为例）\n   DATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\n   async_engine = create_async_engine(DATABASE_URL)\n   AsyncSessionLocal = sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=False)\n   ```\n\n3. **FastAPI 依赖注入会话**：\n   ```python\n   from fastapi import Depends, FastAPI\n   app = FastAPI()\n\n   async def get_db():\n       async with AsyncSessionLocal() as session:\n           yield session\n   ```\n\n4. **异步查询 + Pandas 处理**：\n   ```python\n   import pandas as pd\n   from fastapi.concurrency import run_in_threadpool\n\n   @app.get(\"/data\")\n   async def get_data(db: AsyncSession = Depends(get_db)):\n       # 异步执行 SQL 查询\n       result = await db.execute(text(\"SELECT * FROM table\"))\n       rows = result.mappings().all()\n       \n       # 将异步查询结果转为 Pandas DataFrame（通过线程池避免阻塞事件循环）\n       df = await run_in_threadpool(pd.DataFrame, rows)\n       \n       # 使用 Pandas 处理数据\n       processed_df = df[df[\"value\"] > 100]\n       return processed_df.to_dict(orient=\"records\")\n   ```\n\n#### **优点**\n- **异步高效**：利用 FastAPI 的异步特性处理高并发请求。\n- **线程池隔离**：通过 `run_in_threadpool` 运行 Pandas 的同步操作，避免阻塞事件循环。\n- **ORM 灵活性**：可同时使用 SQLAlchemy ORM 或 Core。\n\n---\n\n### **2. 纯异步驱动（如 `asyncpg`）直接操作**\n直接使用异步驱动查询数据库，再手动将结果转换为 DataFrame。\n\n#### **实现代码**\n```python\nimport asyncpg\nimport pandas as pd\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nasync def get_asyncpg_conn():\n    return await asyncpg.connect(\"postgresql://user:password@localhost/dbname\")\n\n@app.get(\"/data\")\nasync def get_data():\n    conn = await get_asyncpg_conn()\n    try:\n        # 异步查询\n        rows = await conn.fetch(\"SELECT * FROM table\")\n        # 转换为 DataFrame\n        df = pd.DataFrame([dict(row) for row in rows], columns=[\"col1\", \"col2\"])\n        processed_df = df[df[\"value\"] > 100]\n        return processed_df.to_dict(orient=\"records\")\n    finally:\n        await conn.close()\n```\n\n#### **优点**\n- **极简轻量**：无需 ORM 框架，直接控制 SQL。\n- **高性能**：异步驱动原生支持高并发。\n\n#### **缺点**\n- **手动转换**：需手动将数据库记录转换为 DataFrame。\n- **无 ORM 支持**：复杂查询需手写 SQL。\n\n---\n\n### **3. 同步驱动 + 线程池兼容**\n使用同步驱动（如 `psycopg2`）并在 FastAPI 中通过线程池运行，确保不阻塞主线程。\n\n#### **实现代码**\n```python\nfrom fastapi import FastAPI\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nimport pandas as pd\nfrom fastapi.concurrency import run_in_threadpool\n\napp = FastAPI()\n\n# 同步引擎配置\nSYNC_DATABASE_URL = \"postgresql://user:password@localhost/dbname\"\nsync_engine = create_engine(SYNC_DATABASE_URL)\nSyncSessionLocal = sessionmaker(sync_engine)\n\n@app.get(\"/data\")\nasync def get_data():\n    def sync_query():\n        with SyncSessionLocal() as session:\n            result = session.execute(\"SELECT * FROM table\")\n            return [dict(row) for row in result]\n\n    # 在线程池中执行同步查询\n    rows = await run_in_threadpool(sync_query)\n    df = pd.DataFrame(rows)\n    processed_df = df[df[\"value\"] > 100]\n    return processed_df.to_dict(orient=\"records\")\n```\n\n#### **适用场景**\n- **遗留代码迁移**：已有基于同步驱动的代码需快速集成到 FastAPI。\n- **简单查询**：无需复杂异步优化的小型项目。\n\n---\n\n### **4. ODBC 或专用数据库适配器**\n针对特定数据库（如 SQL Server、Oracle）使用 ODBC 或专用异步驱动。\n\n#### **示例（SQL Server + pyodbc）**\n```python\nimport pyodbc\nimport pandas as pd\nfrom fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\n\napp = FastAPI()\n\ndef sync_query():\n    conn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=localhost;DATABASE=dbname;UID=user;PWD=password\")\n    df = pd.read_sql(\"SELECT * FROM table\", conn)\n    conn.close()\n    return df\n\n@app.get(\"/data\")\nasync def get_data():\n    df = await run_in_threadpool(sync_query)\n    processed_df = df[df[\"value\"] > 100]\n    return processed_df.to_dict(orient=\"records\")\n```\n\n---\n\n### **对比总结**\n| **方案**               | **性能** | **代码复杂度** | **Pandas 兼容性** | **适用场景**               |\n|------------------------|----------|----------------|--------------------|--------------------------|\n| 异步驱动 + SQLAlchemy  | ⭐⭐⭐⭐   | ⭐⭐⭐          | ⭐⭐⭐⭐            | 高并发生产环境            |\n| 纯异步驱动（asyncpg）  | ⭐⭐⭐⭐⭐  | ⭐⭐           | ⭐⭐               | 轻量级简单查询           |\n| 同步驱动 + 线程池      | ⭐⭐      | ⭐            | ⭐⭐⭐⭐⭐           | 遗留系统或简单应用       |\n| ODBC/专用驱动          | ⭐⭐      | ⭐⭐⭐         | ⭐⭐⭐              | 特定数据库（如 SQL Server）|\n\n---\n\n### **最佳实践建议**\n1. **优先选择异步驱动 + SQLAlchemy Core**：平衡性能和开发效率。\n2. **大数据量分块处理**：使用 `chunksize` 参数避免内存溢出：\n   ```python\n   df = pd.read_sql(query, con, chunksize=1000)\n   for chunk in df:\n       process(chunk)\n   ```\n3. **连接池管理**：通过 SQLAlchemy 或异步驱动内置池化机制复用连接。\n4. **错误重试机制**：为数据库操作添加重试逻辑（如 `tenacity` 库）。\n\n通过合理选择连接方式，可显著提升 FastAPI + Pandas 组合的数据库处理效率！","slug":"FastAPI数据库连接方式推荐/FastAPI数据库连接方式推荐","published":1,"date":"2025-05-20T02:26:25.166Z","updated":"2025-05-20T02:26:21.000Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmctwyvaf0001x4gr2r785jeb","content":"<h2 id=\"FastAPI数据库连接方式推荐\"><a href=\"#FastAPI数据库连接方式推荐\" class=\"headerlink\" title=\"FastAPI数据库连接方式推荐\"></a>FastAPI数据库连接方式推荐</h2><p>在 FastAPI 框架下结合 Pandas 操作数据库时，选择高效的数据库连接方式需综合考虑 <strong>异步性能</strong>、<strong>代码简洁性</strong> 和 <strong>Pandas 兼容性</strong>。以下是几种推荐方案及具体实现：</p>\n<hr>\n<h3 id=\"1-异步驱动-SQLAlchemy-Core（推荐）\"><a href=\"#1-异步驱动-SQLAlchemy-Core（推荐）\" class=\"headerlink\" title=\"1. 异步驱动 + SQLAlchemy Core（推荐）\"></a><strong>1. 异步驱动 + SQLAlchemy Core（推荐）</strong></h3><p>结合异步数据库驱动（如 <code>asyncpg</code>）和 SQLAlchemy 的异步核心（<code>SQLAlchemy Core</code>），既能利用 FastAPI 的异步优势，又兼容 Pandas 的同步操作。</p>\n<h4 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h4><ol>\n<li><p><strong>安装依赖</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install fastapi sqlalchemy asyncpg pandas databases</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置异步数据库连接</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.asyncio <span class=\"keyword\">import</span> create_async_engine, AsyncSession</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步引擎配置（以 PostgreSQL 为例）</span></span><br><span class=\"line\">DATABASE_URL = <span class=\"string\">&quot;postgresql+asyncpg://user:password@localhost/dbname&quot;</span></span><br><span class=\"line\">async_engine = create_async_engine(DATABASE_URL)</span><br><span class=\"line\">AsyncSessionLocal = sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FastAPI 依赖注入会话</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> Depends, FastAPI</span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_db</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> AsyncSessionLocal() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> session</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异步查询 + Pandas 处理</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.concurrency <span class=\"keyword\">import</span> run_in_threadpool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>(<span class=\"params\">db: AsyncSession = Depends(<span class=\"params\">get_db</span>)</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 异步执行 SQL 查询</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> db.execute(text(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>))</span><br><span class=\"line\">    rows = result.mappings().<span class=\"built_in\">all</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 将异步查询结果转为 Pandas DataFrame（通过线程池避免阻塞事件循环）</span></span><br><span class=\"line\">    df = <span class=\"keyword\">await</span> run_in_threadpool(pd.DataFrame, rows)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 使用 Pandas 处理数据</span></span><br><span class=\"line\">    processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li><strong>异步高效</strong>：利用 FastAPI 的异步特性处理高并发请求。</li>\n<li><strong>线程池隔离</strong>：通过 <code>run_in_threadpool</code> 运行 Pandas 的同步操作，避免阻塞事件循环。</li>\n<li><strong>ORM 灵活性</strong>：可同时使用 SQLAlchemy ORM 或 Core。</li>\n</ul>\n<hr>\n<h3 id=\"2-纯异步驱动（如-asyncpg）直接操作\"><a href=\"#2-纯异步驱动（如-asyncpg）直接操作\" class=\"headerlink\" title=\"2. 纯异步驱动（如 asyncpg）直接操作\"></a><strong>2. 纯异步驱动（如 <code>asyncpg</code>）直接操作</strong></h3><p>直接使用异步驱动查询数据库，再手动将结果转换为 DataFrame。</p>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a><strong>实现代码</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncpg</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_asyncpg_conn</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> asyncpg.connect(<span class=\"string\">&quot;postgresql://user:password@localhost/dbname&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> get_asyncpg_conn()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 异步查询</span></span><br><span class=\"line\">        rows = <span class=\"keyword\">await</span> conn.fetch(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 转换为 DataFrame</span></span><br><span class=\"line\">        df = pd.DataFrame([<span class=\"built_in\">dict</span>(row) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows], columns=[<span class=\"string\">&quot;col1&quot;</span>, <span class=\"string\">&quot;col2&quot;</span>])</span><br><span class=\"line\">        processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> conn.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li><strong>极简轻量</strong>：无需 ORM 框架，直接控制 SQL。</li>\n<li><strong>高性能</strong>：异步驱动原生支持高并发。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a><strong>缺点</strong></h4><ul>\n<li><strong>手动转换</strong>：需手动将数据库记录转换为 DataFrame。</li>\n<li><strong>无 ORM 支持</strong>：复杂查询需手写 SQL。</li>\n</ul>\n<hr>\n<h3 id=\"3-同步驱动-线程池兼容\"><a href=\"#3-同步驱动-线程池兼容\" class=\"headerlink\" title=\"3. 同步驱动 + 线程池兼容\"></a><strong>3. 同步驱动 + 线程池兼容</strong></h3><p>使用同步驱动（如 <code>psycopg2</code>）并在 FastAPI 中通过线程池运行，确保不阻塞主线程。</p>\n<h4 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a><strong>实现代码</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.concurrency <span class=\"keyword\">import</span> run_in_threadpool</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同步引擎配置</span></span><br><span class=\"line\">SYNC_DATABASE_URL = <span class=\"string\">&quot;postgresql://user:password@localhost/dbname&quot;</span></span><br><span class=\"line\">sync_engine = create_engine(SYNC_DATABASE_URL)</span><br><span class=\"line\">SyncSessionLocal = sessionmaker(sync_engine)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sync_query</span>():</span><br><span class=\"line\">        <span class=\"keyword\">with</span> SyncSessionLocal() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">            result = session.execute(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"built_in\">dict</span>(row) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> result]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在线程池中执行同步查询</span></span><br><span class=\"line\">    rows = <span class=\"keyword\">await</span> run_in_threadpool(sync_query)</span><br><span class=\"line\">    df = pd.DataFrame(rows)</span><br><span class=\"line\">    processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a><strong>适用场景</strong></h4><ul>\n<li><strong>遗留代码迁移</strong>：已有基于同步驱动的代码需快速集成到 FastAPI。</li>\n<li><strong>简单查询</strong>：无需复杂异步优化的小型项目。</li>\n</ul>\n<hr>\n<h3 id=\"4-ODBC-或专用数据库适配器\"><a href=\"#4-ODBC-或专用数据库适配器\" class=\"headerlink\" title=\"4. ODBC 或专用数据库适配器\"></a><strong>4. ODBC 或专用数据库适配器</strong></h3><p>针对特定数据库（如 SQL Server、Oracle）使用 ODBC 或专用异步驱动。</p>\n<h4 id=\"示例（SQL-Server-pyodbc）\"><a href=\"#示例（SQL-Server-pyodbc）\" class=\"headerlink\" title=\"示例（SQL Server + pyodbc）\"></a><strong>示例（SQL Server + pyodbc）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pyodbc</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.concurrency <span class=\"keyword\">import</span> run_in_threadpool</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sync_query</span>():</span><br><span class=\"line\">    conn = pyodbc.connect(<span class=\"string\">&quot;DRIVER=&#123;ODBC Driver 17 for SQL Server&#125;;SERVER=localhost;DATABASE=dbname;UID=user;PWD=password&quot;</span>)</span><br><span class=\"line\">    df = pd.read_sql(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>, conn)</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    df = <span class=\"keyword\">await</span> run_in_threadpool(sync_query)</span><br><span class=\"line\">    processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"对比总结\"><a href=\"#对比总结\" class=\"headerlink\" title=\"对比总结\"></a><strong>对比总结</strong></h3><table>\n<thead>\n<tr>\n<th><strong>方案</strong></th>\n<th><strong>性能</strong></th>\n<th><strong>代码复杂度</strong></th>\n<th><strong>Pandas 兼容性</strong></th>\n<th><strong>适用场景</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>异步驱动 + SQLAlchemy</td>\n<td>⭐⭐⭐⭐</td>\n<td>⭐⭐⭐</td>\n<td>⭐⭐⭐⭐</td>\n<td>高并发生产环境</td>\n</tr>\n<tr>\n<td>纯异步驱动（asyncpg）</td>\n<td>⭐⭐⭐⭐⭐</td>\n<td>⭐⭐</td>\n<td>⭐⭐</td>\n<td>轻量级简单查询</td>\n</tr>\n<tr>\n<td>同步驱动 + 线程池</td>\n<td>⭐⭐</td>\n<td>⭐</td>\n<td>⭐⭐⭐⭐⭐</td>\n<td>遗留系统或简单应用</td>\n</tr>\n<tr>\n<td>ODBC&#x2F;专用驱动</td>\n<td>⭐⭐</td>\n<td>⭐⭐⭐</td>\n<td>⭐⭐⭐</td>\n<td>特定数据库（如 SQL Server）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"最佳实践建议\"><a href=\"#最佳实践建议\" class=\"headerlink\" title=\"最佳实践建议\"></a><strong>最佳实践建议</strong></h3><ol>\n<li><strong>优先选择异步驱动 + SQLAlchemy Core</strong>：平衡性能和开发效率。</li>\n<li><strong>大数据量分块处理</strong>：使用 <code>chunksize</code> 参数避免内存溢出：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df = pd.read_sql(query, con, chunksize=<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> df:</span><br><span class=\"line\">    process(chunk)</span><br></pre></td></tr></table></figure></li>\n<li><strong>连接池管理</strong>：通过 SQLAlchemy 或异步驱动内置池化机制复用连接。</li>\n<li><strong>错误重试机制</strong>：为数据库操作添加重试逻辑（如 <code>tenacity</code> 库）。</li>\n</ol>\n<p>通过合理选择连接方式，可显著提升 FastAPI + Pandas 组合的数据库处理效率！</p>\n","excerpt":"","more":"<h2 id=\"FastAPI数据库连接方式推荐\"><a href=\"#FastAPI数据库连接方式推荐\" class=\"headerlink\" title=\"FastAPI数据库连接方式推荐\"></a>FastAPI数据库连接方式推荐</h2><p>在 FastAPI 框架下结合 Pandas 操作数据库时，选择高效的数据库连接方式需综合考虑 <strong>异步性能</strong>、<strong>代码简洁性</strong> 和 <strong>Pandas 兼容性</strong>。以下是几种推荐方案及具体实现：</p>\n<hr>\n<h3 id=\"1-异步驱动-SQLAlchemy-Core（推荐）\"><a href=\"#1-异步驱动-SQLAlchemy-Core（推荐）\" class=\"headerlink\" title=\"1. 异步驱动 + SQLAlchemy Core（推荐）\"></a><strong>1. 异步驱动 + SQLAlchemy Core（推荐）</strong></h3><p>结合异步数据库驱动（如 <code>asyncpg</code>）和 SQLAlchemy 的异步核心（<code>SQLAlchemy Core</code>），既能利用 FastAPI 的异步优势，又兼容 Pandas 的同步操作。</p>\n<h4 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h4><ol>\n<li><p><strong>安装依赖</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install fastapi sqlalchemy asyncpg pandas databases</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>配置异步数据库连接</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.asyncio <span class=\"keyword\">import</span> create_async_engine, AsyncSession</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步引擎配置（以 PostgreSQL 为例）</span></span><br><span class=\"line\">DATABASE_URL = <span class=\"string\">&quot;postgresql+asyncpg://user:password@localhost/dbname&quot;</span></span><br><span class=\"line\">async_engine = create_async_engine(DATABASE_URL)</span><br><span class=\"line\">AsyncSessionLocal = sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FastAPI 依赖注入会话</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> Depends, FastAPI</span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_db</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> AsyncSessionLocal() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> session</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异步查询 + Pandas 处理</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.concurrency <span class=\"keyword\">import</span> run_in_threadpool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>(<span class=\"params\">db: AsyncSession = Depends(<span class=\"params\">get_db</span>)</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 异步执行 SQL 查询</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> db.execute(text(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>))</span><br><span class=\"line\">    rows = result.mappings().<span class=\"built_in\">all</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 将异步查询结果转为 Pandas DataFrame（通过线程池避免阻塞事件循环）</span></span><br><span class=\"line\">    df = <span class=\"keyword\">await</span> run_in_threadpool(pd.DataFrame, rows)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 使用 Pandas 处理数据</span></span><br><span class=\"line\">    processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li><strong>异步高效</strong>：利用 FastAPI 的异步特性处理高并发请求。</li>\n<li><strong>线程池隔离</strong>：通过 <code>run_in_threadpool</code> 运行 Pandas 的同步操作，避免阻塞事件循环。</li>\n<li><strong>ORM 灵活性</strong>：可同时使用 SQLAlchemy ORM 或 Core。</li>\n</ul>\n<hr>\n<h3 id=\"2-纯异步驱动（如-asyncpg）直接操作\"><a href=\"#2-纯异步驱动（如-asyncpg）直接操作\" class=\"headerlink\" title=\"2. 纯异步驱动（如 asyncpg）直接操作\"></a><strong>2. 纯异步驱动（如 <code>asyncpg</code>）直接操作</strong></h3><p>直接使用异步驱动查询数据库，再手动将结果转换为 DataFrame。</p>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a><strong>实现代码</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncpg</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_asyncpg_conn</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> asyncpg.connect(<span class=\"string\">&quot;postgresql://user:password@localhost/dbname&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> get_asyncpg_conn()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 异步查询</span></span><br><span class=\"line\">        rows = <span class=\"keyword\">await</span> conn.fetch(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 转换为 DataFrame</span></span><br><span class=\"line\">        df = pd.DataFrame([<span class=\"built_in\">dict</span>(row) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows], columns=[<span class=\"string\">&quot;col1&quot;</span>, <span class=\"string\">&quot;col2&quot;</span>])</span><br><span class=\"line\">        processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> conn.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li><strong>极简轻量</strong>：无需 ORM 框架，直接控制 SQL。</li>\n<li><strong>高性能</strong>：异步驱动原生支持高并发。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a><strong>缺点</strong></h4><ul>\n<li><strong>手动转换</strong>：需手动将数据库记录转换为 DataFrame。</li>\n<li><strong>无 ORM 支持</strong>：复杂查询需手写 SQL。</li>\n</ul>\n<hr>\n<h3 id=\"3-同步驱动-线程池兼容\"><a href=\"#3-同步驱动-线程池兼容\" class=\"headerlink\" title=\"3. 同步驱动 + 线程池兼容\"></a><strong>3. 同步驱动 + 线程池兼容</strong></h3><p>使用同步驱动（如 <code>psycopg2</code>）并在 FastAPI 中通过线程池运行，确保不阻塞主线程。</p>\n<h4 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a><strong>实现代码</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.concurrency <span class=\"keyword\">import</span> run_in_threadpool</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同步引擎配置</span></span><br><span class=\"line\">SYNC_DATABASE_URL = <span class=\"string\">&quot;postgresql://user:password@localhost/dbname&quot;</span></span><br><span class=\"line\">sync_engine = create_engine(SYNC_DATABASE_URL)</span><br><span class=\"line\">SyncSessionLocal = sessionmaker(sync_engine)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sync_query</span>():</span><br><span class=\"line\">        <span class=\"keyword\">with</span> SyncSessionLocal() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">            result = session.execute(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"built_in\">dict</span>(row) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> result]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在线程池中执行同步查询</span></span><br><span class=\"line\">    rows = <span class=\"keyword\">await</span> run_in_threadpool(sync_query)</span><br><span class=\"line\">    df = pd.DataFrame(rows)</span><br><span class=\"line\">    processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a><strong>适用场景</strong></h4><ul>\n<li><strong>遗留代码迁移</strong>：已有基于同步驱动的代码需快速集成到 FastAPI。</li>\n<li><strong>简单查询</strong>：无需复杂异步优化的小型项目。</li>\n</ul>\n<hr>\n<h3 id=\"4-ODBC-或专用数据库适配器\"><a href=\"#4-ODBC-或专用数据库适配器\" class=\"headerlink\" title=\"4. ODBC 或专用数据库适配器\"></a><strong>4. ODBC 或专用数据库适配器</strong></h3><p>针对特定数据库（如 SQL Server、Oracle）使用 ODBC 或专用异步驱动。</p>\n<h4 id=\"示例（SQL-Server-pyodbc）\"><a href=\"#示例（SQL-Server-pyodbc）\" class=\"headerlink\" title=\"示例（SQL Server + pyodbc）\"></a><strong>示例（SQL Server + pyodbc）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pyodbc</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.concurrency <span class=\"keyword\">import</span> run_in_threadpool</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sync_query</span>():</span><br><span class=\"line\">    conn = pyodbc.connect(<span class=\"string\">&quot;DRIVER=&#123;ODBC Driver 17 for SQL Server&#125;;SERVER=localhost;DATABASE=dbname;UID=user;PWD=password&quot;</span>)</span><br><span class=\"line\">    df = pd.read_sql(<span class=\"string\">&quot;SELECT * FROM table&quot;</span>, conn)</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    df = <span class=\"keyword\">await</span> run_in_threadpool(sync_query)</span><br><span class=\"line\">    processed_df = df[df[<span class=\"string\">&quot;value&quot;</span>] &gt; <span class=\"number\">100</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processed_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"对比总结\"><a href=\"#对比总结\" class=\"headerlink\" title=\"对比总结\"></a><strong>对比总结</strong></h3><table>\n<thead>\n<tr>\n<th><strong>方案</strong></th>\n<th><strong>性能</strong></th>\n<th><strong>代码复杂度</strong></th>\n<th><strong>Pandas 兼容性</strong></th>\n<th><strong>适用场景</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>异步驱动 + SQLAlchemy</td>\n<td>⭐⭐⭐⭐</td>\n<td>⭐⭐⭐</td>\n<td>⭐⭐⭐⭐</td>\n<td>高并发生产环境</td>\n</tr>\n<tr>\n<td>纯异步驱动（asyncpg）</td>\n<td>⭐⭐⭐⭐⭐</td>\n<td>⭐⭐</td>\n<td>⭐⭐</td>\n<td>轻量级简单查询</td>\n</tr>\n<tr>\n<td>同步驱动 + 线程池</td>\n<td>⭐⭐</td>\n<td>⭐</td>\n<td>⭐⭐⭐⭐⭐</td>\n<td>遗留系统或简单应用</td>\n</tr>\n<tr>\n<td>ODBC&#x2F;专用驱动</td>\n<td>⭐⭐</td>\n<td>⭐⭐⭐</td>\n<td>⭐⭐⭐</td>\n<td>特定数据库（如 SQL Server）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"最佳实践建议\"><a href=\"#最佳实践建议\" class=\"headerlink\" title=\"最佳实践建议\"></a><strong>最佳实践建议</strong></h3><ol>\n<li><strong>优先选择异步驱动 + SQLAlchemy Core</strong>：平衡性能和开发效率。</li>\n<li><strong>大数据量分块处理</strong>：使用 <code>chunksize</code> 参数避免内存溢出：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df = pd.read_sql(query, con, chunksize=<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> df:</span><br><span class=\"line\">    process(chunk)</span><br></pre></td></tr></table></figure></li>\n<li><strong>连接池管理</strong>：通过 SQLAlchemy 或异步驱动内置池化机制复用连接。</li>\n<li><strong>错误重试机制</strong>：为数据库操作添加重试逻辑（如 <code>tenacity</code> 库）。</li>\n</ol>\n<p>通过合理选择连接方式，可显著提升 FastAPI + Pandas 组合的数据库处理效率！</p>\n"},{"title":"Http状态码与字段","date":"2025-05-22T01:12:01.000Z","updated":"2025-05-22T01:12:01.000Z","keywords":null,"description":null,"_content":"### HTTP 常见状态码\n\nHTTP 状态码分为五类，以三位数字表示，首数字定义分类：\n\n#### 1xx（信息响应）\n- **100 Continue**：服务器已收到请求头，客户端应继续发送请求体。\n- **101 Switching Protocols**：服务器根据客户端请求切换协议（如升级到 WebSocket）。\n\n#### 2xx（成功）\n- **200 OK**：请求成功，响应中包含请求的数据。\n- **201 Created**：资源创建成功（常用于 POST/PUT 请求）。\n- **204 No Content**：服务器成功处理请求，但无返回内容（如删除操作）。\n- **206 Partial Content**：响应部分内容（用于分块下载或断点续传）。\n\n#### 3xx（重定向）\n- **301 Moved Permanently**：资源永久重定向，客户端应更新书签。\n- **302 Found**：资源临时重定向，后续请求仍用原 URL。\n- **304 Not Modified**：资源未修改，客户端可使用缓存（需配合 `ETag` 或 `Last-Modified` 使用）。\n- **307 Temporary Redirect**：临时重定向，要求请求方法不变（与 302 类似但更严格）。\n- **308 Permanent Redirect**：永久重定向，要求请求方法不变（与 301 类似但更严格）。\n\n#### 4xx（客户端错误）\n- **400 Bad Request**：请求格式错误（如参数缺失）。\n- **401 Unauthorized**：需身份验证（如未提供 Token）。\n- **403 Forbidden**：服务器拒绝请求（权限不足）。\n- **404 Not Found**：资源不存在。\n- **405 Method Not Allowed**：请求方法不被允许（响应头包含 `Allow` 字段提示允许的方法）。\n- **408 Request Timeout**：服务器等待请求超时。\n- **409 Conflict**：资源冲突（如重复提交）。\n- **429 Too Many Requests**：请求频率过高（限流场景）。\n\n#### 5xx（服务器错误）\n- **500 Internal Server Error**：服务器内部错误（通用错误）。\n- **501 Not Implemented**：服务器不支持请求的功能。\n- **502 Bad Gateway**：网关或代理服务器收到无效响应。\n- **503 Service Unavailable**：服务暂时不可用（如维护或过载）。\n- **504 Gateway Timeout**：网关服务器未及时获取响应。\n\n---\n\n### HTTP 常见字段\n\n#### 通用字段（请求/响应均可出现）\n- **Cache-Control**：缓存策略（如 `max-age=3600`、`no-cache`）。\n- **Connection**：控制连接（如 `keep-alive` 保持长连接）。\n- **Date**：消息生成的日期时间。\n\n#### 请求头字段\n- **Host**：目标服务器的域名和端口（HTTP/1.1 必须字段）。\n- **User-Agent**：客户端信息（如浏览器类型）。\n- **Accept**：客户端可处理的媒体类型（如 `application/json`）。\n- **Accept-Encoding**：支持的压缩方式（如 `gzip`）。\n- **Authorization**：认证凭证（如 `Bearer <token>`）。\n- **Cookie**：客户端发送的 Cookie 数据。\n- **Content-Type**：请求体的数据类型（如 `application/json`）。\n- **Referer**：当前请求的来源页面 URL。\n- **Origin**：跨域请求的源地址（用于 CORS）。\n\n#### 响应头字段\n- **Content-Type**：响应体的数据类型（如 `text/html`）。\n- **Content-Encoding**：响应体的压缩方式（如 `gzip`）。\n- **Set-Cookie**：服务器设置的 Cookie。\n- **Location**：重定向目标 URL（用于 3xx 状态码）。\n- **Access-Control-Allow-Origin**：允许跨域请求的源（如 `*` 表示任意）。\n- **ETag**：资源版本标识符（用于缓存验证）。\n- **Last-Modified**：资源最后修改时间（缓存相关）。\n\n#### 实体头字段（描述数据内容）\n- **Content-Length**：响应体的字节数。\n- **Content-Disposition**：指示如何处理数据（如 `attachment; filename=\"file.txt\"` 触发下载）。\n\n---\n\n### 示例场景\n\n#### 成功请求\n```\n200 OK\nContent-Type: application/json\nCache-Control: max-age=3600\n{\n  \"data\": \"Hello, World!\"\n}\n```\n\n#### 重定向\n```\n301 Moved Permanently\nLocation: https://new-site.com/resource\n```\n\n#### 客户端错误\n```\n404 Not Found\nContent-Type: text/html\n<h1>Page Not Found</h1>\n```\n\n#### 缓存验证\n客户端请求头包含 `If-None-Match: \"abc123\"`，若资源未修改：\n```\n304 Not Modified\nETag: \"abc123\"\n```\n\n#### 跨域请求\n请求头：\n```\nOrigin: https://client.com\n```\n响应头：\n```\nAccess-Control-Allow-Origin: https://client.com\n```\n","source":"_posts/Http状态码与字段/Http状态码与字段.md","raw":"---\ntitle: Http状态码与字段\ndate: 2025-05-22 09:12:01\nupdated: 2025-05-22 09:12:01\ntags:\ncategories:\nkeywords:\ndescription:\n---\n### HTTP 常见状态码\n\nHTTP 状态码分为五类，以三位数字表示，首数字定义分类：\n\n#### 1xx（信息响应）\n- **100 Continue**：服务器已收到请求头，客户端应继续发送请求体。\n- **101 Switching Protocols**：服务器根据客户端请求切换协议（如升级到 WebSocket）。\n\n#### 2xx（成功）\n- **200 OK**：请求成功，响应中包含请求的数据。\n- **201 Created**：资源创建成功（常用于 POST/PUT 请求）。\n- **204 No Content**：服务器成功处理请求，但无返回内容（如删除操作）。\n- **206 Partial Content**：响应部分内容（用于分块下载或断点续传）。\n\n#### 3xx（重定向）\n- **301 Moved Permanently**：资源永久重定向，客户端应更新书签。\n- **302 Found**：资源临时重定向，后续请求仍用原 URL。\n- **304 Not Modified**：资源未修改，客户端可使用缓存（需配合 `ETag` 或 `Last-Modified` 使用）。\n- **307 Temporary Redirect**：临时重定向，要求请求方法不变（与 302 类似但更严格）。\n- **308 Permanent Redirect**：永久重定向，要求请求方法不变（与 301 类似但更严格）。\n\n#### 4xx（客户端错误）\n- **400 Bad Request**：请求格式错误（如参数缺失）。\n- **401 Unauthorized**：需身份验证（如未提供 Token）。\n- **403 Forbidden**：服务器拒绝请求（权限不足）。\n- **404 Not Found**：资源不存在。\n- **405 Method Not Allowed**：请求方法不被允许（响应头包含 `Allow` 字段提示允许的方法）。\n- **408 Request Timeout**：服务器等待请求超时。\n- **409 Conflict**：资源冲突（如重复提交）。\n- **429 Too Many Requests**：请求频率过高（限流场景）。\n\n#### 5xx（服务器错误）\n- **500 Internal Server Error**：服务器内部错误（通用错误）。\n- **501 Not Implemented**：服务器不支持请求的功能。\n- **502 Bad Gateway**：网关或代理服务器收到无效响应。\n- **503 Service Unavailable**：服务暂时不可用（如维护或过载）。\n- **504 Gateway Timeout**：网关服务器未及时获取响应。\n\n---\n\n### HTTP 常见字段\n\n#### 通用字段（请求/响应均可出现）\n- **Cache-Control**：缓存策略（如 `max-age=3600`、`no-cache`）。\n- **Connection**：控制连接（如 `keep-alive` 保持长连接）。\n- **Date**：消息生成的日期时间。\n\n#### 请求头字段\n- **Host**：目标服务器的域名和端口（HTTP/1.1 必须字段）。\n- **User-Agent**：客户端信息（如浏览器类型）。\n- **Accept**：客户端可处理的媒体类型（如 `application/json`）。\n- **Accept-Encoding**：支持的压缩方式（如 `gzip`）。\n- **Authorization**：认证凭证（如 `Bearer <token>`）。\n- **Cookie**：客户端发送的 Cookie 数据。\n- **Content-Type**：请求体的数据类型（如 `application/json`）。\n- **Referer**：当前请求的来源页面 URL。\n- **Origin**：跨域请求的源地址（用于 CORS）。\n\n#### 响应头字段\n- **Content-Type**：响应体的数据类型（如 `text/html`）。\n- **Content-Encoding**：响应体的压缩方式（如 `gzip`）。\n- **Set-Cookie**：服务器设置的 Cookie。\n- **Location**：重定向目标 URL（用于 3xx 状态码）。\n- **Access-Control-Allow-Origin**：允许跨域请求的源（如 `*` 表示任意）。\n- **ETag**：资源版本标识符（用于缓存验证）。\n- **Last-Modified**：资源最后修改时间（缓存相关）。\n\n#### 实体头字段（描述数据内容）\n- **Content-Length**：响应体的字节数。\n- **Content-Disposition**：指示如何处理数据（如 `attachment; filename=\"file.txt\"` 触发下载）。\n\n---\n\n### 示例场景\n\n#### 成功请求\n```\n200 OK\nContent-Type: application/json\nCache-Control: max-age=3600\n{\n  \"data\": \"Hello, World!\"\n}\n```\n\n#### 重定向\n```\n301 Moved Permanently\nLocation: https://new-site.com/resource\n```\n\n#### 客户端错误\n```\n404 Not Found\nContent-Type: text/html\n<h1>Page Not Found</h1>\n```\n\n#### 缓存验证\n客户端请求头包含 `If-None-Match: \"abc123\"`，若资源未修改：\n```\n304 Not Modified\nETag: \"abc123\"\n```\n\n#### 跨域请求\n请求头：\n```\nOrigin: https://client.com\n```\n响应头：\n```\nAccess-Control-Allow-Origin: https://client.com\n```\n","slug":"Http状态码与字段/Http状态码与字段","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvai0003x4grdjgd4h9d","content":"<h3 id=\"HTTP-常见状态码\"><a href=\"#HTTP-常见状态码\" class=\"headerlink\" title=\"HTTP 常见状态码\"></a>HTTP 常见状态码</h3><p>HTTP 状态码分为五类，以三位数字表示，首数字定义分类：</p>\n<h4 id=\"1xx（信息响应）\"><a href=\"#1xx（信息响应）\" class=\"headerlink\" title=\"1xx（信息响应）\"></a>1xx（信息响应）</h4><ul>\n<li><strong>100 Continue</strong>：服务器已收到请求头，客户端应继续发送请求体。</li>\n<li><strong>101 Switching Protocols</strong>：服务器根据客户端请求切换协议（如升级到 WebSocket）。</li>\n</ul>\n<h4 id=\"2xx（成功）\"><a href=\"#2xx（成功）\" class=\"headerlink\" title=\"2xx（成功）\"></a>2xx（成功）</h4><ul>\n<li><strong>200 OK</strong>：请求成功，响应中包含请求的数据。</li>\n<li><strong>201 Created</strong>：资源创建成功（常用于 POST&#x2F;PUT 请求）。</li>\n<li><strong>204 No Content</strong>：服务器成功处理请求，但无返回内容（如删除操作）。</li>\n<li><strong>206 Partial Content</strong>：响应部分内容（用于分块下载或断点续传）。</li>\n</ul>\n<h4 id=\"3xx（重定向）\"><a href=\"#3xx（重定向）\" class=\"headerlink\" title=\"3xx（重定向）\"></a>3xx（重定向）</h4><ul>\n<li><strong>301 Moved Permanently</strong>：资源永久重定向，客户端应更新书签。</li>\n<li><strong>302 Found</strong>：资源临时重定向，后续请求仍用原 URL。</li>\n<li><strong>304 Not Modified</strong>：资源未修改，客户端可使用缓存（需配合 <code>ETag</code> 或 <code>Last-Modified</code> 使用）。</li>\n<li><strong>307 Temporary Redirect</strong>：临时重定向，要求请求方法不变（与 302 类似但更严格）。</li>\n<li><strong>308 Permanent Redirect</strong>：永久重定向，要求请求方法不变（与 301 类似但更严格）。</li>\n</ul>\n<h4 id=\"4xx（客户端错误）\"><a href=\"#4xx（客户端错误）\" class=\"headerlink\" title=\"4xx（客户端错误）\"></a>4xx（客户端错误）</h4><ul>\n<li><strong>400 Bad Request</strong>：请求格式错误（如参数缺失）。</li>\n<li><strong>401 Unauthorized</strong>：需身份验证（如未提供 Token）。</li>\n<li><strong>403 Forbidden</strong>：服务器拒绝请求（权限不足）。</li>\n<li><strong>404 Not Found</strong>：资源不存在。</li>\n<li><strong>405 Method Not Allowed</strong>：请求方法不被允许（响应头包含 <code>Allow</code> 字段提示允许的方法）。</li>\n<li><strong>408 Request Timeout</strong>：服务器等待请求超时。</li>\n<li><strong>409 Conflict</strong>：资源冲突（如重复提交）。</li>\n<li><strong>429 Too Many Requests</strong>：请求频率过高（限流场景）。</li>\n</ul>\n<h4 id=\"5xx（服务器错误）\"><a href=\"#5xx（服务器错误）\" class=\"headerlink\" title=\"5xx（服务器错误）\"></a>5xx（服务器错误）</h4><ul>\n<li><strong>500 Internal Server Error</strong>：服务器内部错误（通用错误）。</li>\n<li><strong>501 Not Implemented</strong>：服务器不支持请求的功能。</li>\n<li><strong>502 Bad Gateway</strong>：网关或代理服务器收到无效响应。</li>\n<li><strong>503 Service Unavailable</strong>：服务暂时不可用（如维护或过载）。</li>\n<li><strong>504 Gateway Timeout</strong>：网关服务器未及时获取响应。</li>\n</ul>\n<hr>\n<h3 id=\"HTTP-常见字段\"><a href=\"#HTTP-常见字段\" class=\"headerlink\" title=\"HTTP 常见字段\"></a>HTTP 常见字段</h3><h4 id=\"通用字段（请求-响应均可出现）\"><a href=\"#通用字段（请求-响应均可出现）\" class=\"headerlink\" title=\"通用字段（请求&#x2F;响应均可出现）\"></a>通用字段（请求&#x2F;响应均可出现）</h4><ul>\n<li><strong>Cache-Control</strong>：缓存策略（如 <code>max-age=3600</code>、<code>no-cache</code>）。</li>\n<li><strong>Connection</strong>：控制连接（如 <code>keep-alive</code> 保持长连接）。</li>\n<li><strong>Date</strong>：消息生成的日期时间。</li>\n</ul>\n<h4 id=\"请求头字段\"><a href=\"#请求头字段\" class=\"headerlink\" title=\"请求头字段\"></a>请求头字段</h4><ul>\n<li><strong>Host</strong>：目标服务器的域名和端口（HTTP&#x2F;1.1 必须字段）。</li>\n<li><strong>User-Agent</strong>：客户端信息（如浏览器类型）。</li>\n<li><strong>Accept</strong>：客户端可处理的媒体类型（如 <code>application/json</code>）。</li>\n<li><strong>Accept-Encoding</strong>：支持的压缩方式（如 <code>gzip</code>）。</li>\n<li><strong>Authorization</strong>：认证凭证（如 <code>Bearer &lt;token&gt;</code>）。</li>\n<li><strong>Cookie</strong>：客户端发送的 Cookie 数据。</li>\n<li><strong>Content-Type</strong>：请求体的数据类型（如 <code>application/json</code>）。</li>\n<li><strong>Referer</strong>：当前请求的来源页面 URL。</li>\n<li><strong>Origin</strong>：跨域请求的源地址（用于 CORS）。</li>\n</ul>\n<h4 id=\"响应头字段\"><a href=\"#响应头字段\" class=\"headerlink\" title=\"响应头字段\"></a>响应头字段</h4><ul>\n<li><strong>Content-Type</strong>：响应体的数据类型（如 <code>text/html</code>）。</li>\n<li><strong>Content-Encoding</strong>：响应体的压缩方式（如 <code>gzip</code>）。</li>\n<li><strong>Set-Cookie</strong>：服务器设置的 Cookie。</li>\n<li><strong>Location</strong>：重定向目标 URL（用于 3xx 状态码）。</li>\n<li><strong>Access-Control-Allow-Origin</strong>：允许跨域请求的源（如 <code>*</code> 表示任意）。</li>\n<li><strong>ETag</strong>：资源版本标识符（用于缓存验证）。</li>\n<li><strong>Last-Modified</strong>：资源最后修改时间（缓存相关）。</li>\n</ul>\n<h4 id=\"实体头字段（描述数据内容）\"><a href=\"#实体头字段（描述数据内容）\" class=\"headerlink\" title=\"实体头字段（描述数据内容）\"></a>实体头字段（描述数据内容）</h4><ul>\n<li><strong>Content-Length</strong>：响应体的字节数。</li>\n<li><strong>Content-Disposition</strong>：指示如何处理数据（如 <code>attachment; filename=&quot;file.txt&quot;</code> 触发下载）。</li>\n</ul>\n<hr>\n<h3 id=\"示例场景\"><a href=\"#示例场景\" class=\"headerlink\" title=\"示例场景\"></a>示例场景</h3><h4 id=\"成功请求\"><a href=\"#成功请求\" class=\"headerlink\" title=\"成功请求\"></a>成功请求</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Cache-Control: max-age=3600</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;data&quot;: &quot;Hello, World!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">301 Moved Permanently</span><br><span class=\"line\">Location: https://new-site.com/resource</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"客户端错误\"><a href=\"#客户端错误\" class=\"headerlink\" title=\"客户端错误\"></a>客户端错误</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">404 Not Found</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">&lt;h1&gt;Page Not Found&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"缓存验证\"><a href=\"#缓存验证\" class=\"headerlink\" title=\"缓存验证\"></a>缓存验证</h4><p>客户端请求头包含 <code>If-None-Match: &quot;abc123&quot;</code>，若资源未修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">304 Not Modified</span><br><span class=\"line\">ETag: &quot;abc123&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"跨域请求\"><a href=\"#跨域请求\" class=\"headerlink\" title=\"跨域请求\"></a>跨域请求</h4><p>请求头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Origin: https://client.com</span><br></pre></td></tr></table></figure>\n<p>响应头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: https://client.com</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"HTTP-常见状态码\"><a href=\"#HTTP-常见状态码\" class=\"headerlink\" title=\"HTTP 常见状态码\"></a>HTTP 常见状态码</h3><p>HTTP 状态码分为五类，以三位数字表示，首数字定义分类：</p>\n<h4 id=\"1xx（信息响应）\"><a href=\"#1xx（信息响应）\" class=\"headerlink\" title=\"1xx（信息响应）\"></a>1xx（信息响应）</h4><ul>\n<li><strong>100 Continue</strong>：服务器已收到请求头，客户端应继续发送请求体。</li>\n<li><strong>101 Switching Protocols</strong>：服务器根据客户端请求切换协议（如升级到 WebSocket）。</li>\n</ul>\n<h4 id=\"2xx（成功）\"><a href=\"#2xx（成功）\" class=\"headerlink\" title=\"2xx（成功）\"></a>2xx（成功）</h4><ul>\n<li><strong>200 OK</strong>：请求成功，响应中包含请求的数据。</li>\n<li><strong>201 Created</strong>：资源创建成功（常用于 POST&#x2F;PUT 请求）。</li>\n<li><strong>204 No Content</strong>：服务器成功处理请求，但无返回内容（如删除操作）。</li>\n<li><strong>206 Partial Content</strong>：响应部分内容（用于分块下载或断点续传）。</li>\n</ul>\n<h4 id=\"3xx（重定向）\"><a href=\"#3xx（重定向）\" class=\"headerlink\" title=\"3xx（重定向）\"></a>3xx（重定向）</h4><ul>\n<li><strong>301 Moved Permanently</strong>：资源永久重定向，客户端应更新书签。</li>\n<li><strong>302 Found</strong>：资源临时重定向，后续请求仍用原 URL。</li>\n<li><strong>304 Not Modified</strong>：资源未修改，客户端可使用缓存（需配合 <code>ETag</code> 或 <code>Last-Modified</code> 使用）。</li>\n<li><strong>307 Temporary Redirect</strong>：临时重定向，要求请求方法不变（与 302 类似但更严格）。</li>\n<li><strong>308 Permanent Redirect</strong>：永久重定向，要求请求方法不变（与 301 类似但更严格）。</li>\n</ul>\n<h4 id=\"4xx（客户端错误）\"><a href=\"#4xx（客户端错误）\" class=\"headerlink\" title=\"4xx（客户端错误）\"></a>4xx（客户端错误）</h4><ul>\n<li><strong>400 Bad Request</strong>：请求格式错误（如参数缺失）。</li>\n<li><strong>401 Unauthorized</strong>：需身份验证（如未提供 Token）。</li>\n<li><strong>403 Forbidden</strong>：服务器拒绝请求（权限不足）。</li>\n<li><strong>404 Not Found</strong>：资源不存在。</li>\n<li><strong>405 Method Not Allowed</strong>：请求方法不被允许（响应头包含 <code>Allow</code> 字段提示允许的方法）。</li>\n<li><strong>408 Request Timeout</strong>：服务器等待请求超时。</li>\n<li><strong>409 Conflict</strong>：资源冲突（如重复提交）。</li>\n<li><strong>429 Too Many Requests</strong>：请求频率过高（限流场景）。</li>\n</ul>\n<h4 id=\"5xx（服务器错误）\"><a href=\"#5xx（服务器错误）\" class=\"headerlink\" title=\"5xx（服务器错误）\"></a>5xx（服务器错误）</h4><ul>\n<li><strong>500 Internal Server Error</strong>：服务器内部错误（通用错误）。</li>\n<li><strong>501 Not Implemented</strong>：服务器不支持请求的功能。</li>\n<li><strong>502 Bad Gateway</strong>：网关或代理服务器收到无效响应。</li>\n<li><strong>503 Service Unavailable</strong>：服务暂时不可用（如维护或过载）。</li>\n<li><strong>504 Gateway Timeout</strong>：网关服务器未及时获取响应。</li>\n</ul>\n<hr>\n<h3 id=\"HTTP-常见字段\"><a href=\"#HTTP-常见字段\" class=\"headerlink\" title=\"HTTP 常见字段\"></a>HTTP 常见字段</h3><h4 id=\"通用字段（请求-响应均可出现）\"><a href=\"#通用字段（请求-响应均可出现）\" class=\"headerlink\" title=\"通用字段（请求&#x2F;响应均可出现）\"></a>通用字段（请求&#x2F;响应均可出现）</h4><ul>\n<li><strong>Cache-Control</strong>：缓存策略（如 <code>max-age=3600</code>、<code>no-cache</code>）。</li>\n<li><strong>Connection</strong>：控制连接（如 <code>keep-alive</code> 保持长连接）。</li>\n<li><strong>Date</strong>：消息生成的日期时间。</li>\n</ul>\n<h4 id=\"请求头字段\"><a href=\"#请求头字段\" class=\"headerlink\" title=\"请求头字段\"></a>请求头字段</h4><ul>\n<li><strong>Host</strong>：目标服务器的域名和端口（HTTP&#x2F;1.1 必须字段）。</li>\n<li><strong>User-Agent</strong>：客户端信息（如浏览器类型）。</li>\n<li><strong>Accept</strong>：客户端可处理的媒体类型（如 <code>application/json</code>）。</li>\n<li><strong>Accept-Encoding</strong>：支持的压缩方式（如 <code>gzip</code>）。</li>\n<li><strong>Authorization</strong>：认证凭证（如 <code>Bearer &lt;token&gt;</code>）。</li>\n<li><strong>Cookie</strong>：客户端发送的 Cookie 数据。</li>\n<li><strong>Content-Type</strong>：请求体的数据类型（如 <code>application/json</code>）。</li>\n<li><strong>Referer</strong>：当前请求的来源页面 URL。</li>\n<li><strong>Origin</strong>：跨域请求的源地址（用于 CORS）。</li>\n</ul>\n<h4 id=\"响应头字段\"><a href=\"#响应头字段\" class=\"headerlink\" title=\"响应头字段\"></a>响应头字段</h4><ul>\n<li><strong>Content-Type</strong>：响应体的数据类型（如 <code>text/html</code>）。</li>\n<li><strong>Content-Encoding</strong>：响应体的压缩方式（如 <code>gzip</code>）。</li>\n<li><strong>Set-Cookie</strong>：服务器设置的 Cookie。</li>\n<li><strong>Location</strong>：重定向目标 URL（用于 3xx 状态码）。</li>\n<li><strong>Access-Control-Allow-Origin</strong>：允许跨域请求的源（如 <code>*</code> 表示任意）。</li>\n<li><strong>ETag</strong>：资源版本标识符（用于缓存验证）。</li>\n<li><strong>Last-Modified</strong>：资源最后修改时间（缓存相关）。</li>\n</ul>\n<h4 id=\"实体头字段（描述数据内容）\"><a href=\"#实体头字段（描述数据内容）\" class=\"headerlink\" title=\"实体头字段（描述数据内容）\"></a>实体头字段（描述数据内容）</h4><ul>\n<li><strong>Content-Length</strong>：响应体的字节数。</li>\n<li><strong>Content-Disposition</strong>：指示如何处理数据（如 <code>attachment; filename=&quot;file.txt&quot;</code> 触发下载）。</li>\n</ul>\n<hr>\n<h3 id=\"示例场景\"><a href=\"#示例场景\" class=\"headerlink\" title=\"示例场景\"></a>示例场景</h3><h4 id=\"成功请求\"><a href=\"#成功请求\" class=\"headerlink\" title=\"成功请求\"></a>成功请求</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Cache-Control: max-age=3600</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;data&quot;: &quot;Hello, World!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">301 Moved Permanently</span><br><span class=\"line\">Location: https://new-site.com/resource</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"客户端错误\"><a href=\"#客户端错误\" class=\"headerlink\" title=\"客户端错误\"></a>客户端错误</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">404 Not Found</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">&lt;h1&gt;Page Not Found&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"缓存验证\"><a href=\"#缓存验证\" class=\"headerlink\" title=\"缓存验证\"></a>缓存验证</h4><p>客户端请求头包含 <code>If-None-Match: &quot;abc123&quot;</code>，若资源未修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">304 Not Modified</span><br><span class=\"line\">ETag: &quot;abc123&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"跨域请求\"><a href=\"#跨域请求\" class=\"headerlink\" title=\"跨域请求\"></a>跨域请求</h4><p>请求头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Origin: https://client.com</span><br></pre></td></tr></table></figure>\n<p>响应头：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: https://client.com</span><br></pre></td></tr></table></figure>\n"},{"_content":"以下是根据上述讨论整合的 **完整 FastAPI 项目架构**，包含模块化设计、分层抽象、依赖注入以及对 Pandas 数据操作的支持。该架构遵循现代后端开发的最佳实践，同时保持高扩展性和可维护性。\n\n---\n\n### **完整项目结构**\n```bash\nproject-root/\n├── app/\n│   ├── core/                     # 核心抽象与接口定义\n│   │   ├── __init__.py\n│   │   └── repositories.py       # 抽象基类（如 BaseRepository）\n│   ├── data_access/              # 具体数据访问实现\n│   │   ├── pandas/               # Pandas 实现\n│   │   │   ├── __init__.py\n│   │   │   └── user_repository.py\n│   │   └── sql/                  # SQL 实现（可选，未来扩展）\n│   ├── services/                 # 业务逻辑层\n│   │   ├── __init__.py\n│   │   └── user_service.py\n│   ├── routers/                  # API 路由\n│   │   ├── __init__.py\n│   │   └── users.py\n│   ├── schemas/                  # Pydantic 模型\n│   │   ├── __init__.py\n│   │   └── user.py\n│   ├── config/                   # 配置管理\n│   │   ├── __init__.py\n│   │   └── settings.py\n│   ├── dependencies.py           # 依赖注入定义\n│   ├── database.py               # 数据库连接（预留，未来扩展）\n│   ├── utils/                    # 工具类\n│   │   ├── __init__.py\n│   │   ├── exceptions.py         # 自定义异常处理\n│   │   └── logger.py             # 日志配置\n│   ├── containers.py             # 依赖注入容器配置\n│   └── main.py                   # FastAPI 应用入口\n├── tests/                        # 测试用例\n│   ├── __init__.py\n│   ├── test_users.py\n│   └── conftest.py               # 测试固件\n├── data/                         # 数据文件（CSV/Parquet）\n│   └── users.csv\n├── static/                       # 静态文件\n├── templates/                    # Jinja2 模板（可选）\n├── requirements.txt              # 依赖列表\n├── .env                          # 环境变量\n├── .gitignore\n└── README.md\n```\n\n---\n\n### **关键文件代码示例**\n\n#### 1. **抽象基类定义 (`core/repositories.py`)**\n```python\nfrom abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar, Optional\n\nT = TypeVar(\"T\")\n\nclass BaseRepository(ABC):\n    \"\"\"CRUD 操作的抽象基类\"\"\"\n\n    @abstractmethod\n    def get(self, id: int) -> Optional[T]:\n        pass\n\n    @abstractmethod\n    def create(self, data: dict) -> T:\n        pass\n\n    @abstractmethod\n    def update(self, id: int, data: dict) -> T:\n        pass\n\n    @abstractmethod\n    def delete(self, id: int) -> bool:\n        pass\n```\n\n#### 2. **Pandas 数据访问实现 (`data_access/pandas/user_repository.py`)**\n```python\nimport pandas as pd\nfrom pathlib import Path\nfrom app.core.repositories import BaseRepository\nfrom app.schemas.user import UserResponse\n\nclass PandasUserRepository(BaseRepository):\n    def __init__(self, file_path: str = \"data/users.csv\"):\n        self.file_path = Path(file_path)\n        self._ensure_file_exists()\n\n    def _ensure_file_exists(self):\n        if not self.file_path.exists():\n            self.file_path.parent.mkdir(parents=True, exist_ok=True)\n            pd.DataFrame(columns=[\"id\", \"name\", \"email\"]).to_csv(self.file_path, index=False)\n\n    def get(self, user_id: int) -> Optional[UserResponse]:\n        df = pd.read_csv(self.file_path)\n        user = df[df[\"id\"] == user_id].to_dict(orient=\"records\")\n        return UserResponse(**user[0]) if user else None\n\n    def create(self, data: dict) -> UserResponse:\n        df = pd.read_csv(self.file_path)\n        new_id = df[\"id\"].max() + 1 if not df.empty else 1\n        new_user = {\"id\": new_id, **data}\n        df = pd.concat([df, pd.DataFrame([new_user])], ignore_index=True)\n        df.to_csv(self.file_path, index=False)\n        return UserResponse(**new_user)\n```\n\n#### 3. **服务层 (`services/user_service.py`)**\n```python\nfrom app.core.repositories import BaseRepository\nfrom app.schemas.user import UserCreate, UserResponse\n\nclass UserService:\n    def __init__(self, repository: BaseRepository):\n        self.repository = repository\n\n    def create_user(self, user_data: UserCreate) -> UserResponse:\n        return self.repository.create(user_data.dict())\n\n    def get_user(self, user_id: int) -> Optional[UserResponse]:\n        return self.repository.get(user_id)\n```\n\n#### 4. **路由层 (`routers/users.py`)**\n```python\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom app.services.user_service import UserService\nfrom app.schemas.user import UserCreate, UserResponse\nfrom app.containers import Container\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@router.post(\"/\", response_model=UserResponse)\ndef create_user(\n    user: UserCreate,\n    service: UserService = Depends(Container.user_service)\n):\n    return service.create_user(user)\n\n@router.get(\"/{user_id}\", response_model=UserResponse)\ndef get_user(user_id: int, service: UserService = Depends(Container.user_service)):\n    user = service.get_user(user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n```\n\n#### 5. **依赖注入容器 (`containers.py`)**\n```python\nfrom dependency_injector import containers, providers\nfrom app.core.repositories import BaseRepository\nfrom app.data_access.pandas.user_repository import PandasUserRepository\nfrom app.services.user_service import UserService\n\nclass Container(containers.DeclarativeContainer):\n    user_repository = providers.Singleton(PandasUserRepository)\n    user_service = providers.Factory(UserService, repository=user_repository)\n```\n\n#### 6. **应用入口 (`main.py`)**\n```python\nfrom fastapi import FastAPI\nfrom app.routers import users\nfrom app.utils.exceptions import http_exception_handler\nfrom app.containers import Container\n\napp = FastAPI()\ncontainer = Container()\n\n# 注册路由\napp.include_router(users.router)\n\n# 全局异常处理\napp.add_exception_handler(HTTPException, http_exception_handler)\n\n@app.get(\"/health\")\ndef health_check():\n    return {\"status\": \"ok\"}\n```\n\n---\n\n### **关键设计说明**\n1. **分层架构**  \n   - **核心抽象层 (`core/`)**：定义与业务相关的接口（如 `BaseRepository`）。  \n   - **数据访问层 (`data_access/`)**：实现具体技术（如 Pandas、SQL）。  \n   - **服务层 (`services/`)**：处理业务逻辑，依赖抽象接口。  \n   - **路由层 (`routers/`)**：仅处理 HTTP 请求和响应。\n\n2. **依赖注入**  \n   - 使用 `dependency-injector` 管理服务实例化，实现解耦。  \n   - 替换数据源时只需修改 `Container` 中的绑定（如从 Pandas 切换到 SQL）。\n\n3. **配置管理**  \n   - 通过 `config/settings.py` 加载环境变量，适配不同环境（开发/生产）。  \n   - 示例配置：\n     ```python\n     from pydantic import BaseSettings\n\n     class Settings(BaseSettings):\n         PANDAS_DATA_PATH: str = \"data/users.csv\"\n\n         class Config:\n             env_file = \".env\"\n     ```\n\n4. **可测试性**  \n   - 在 `tests/` 中编写单元测试，通过 Mock `BaseRepository` 隔离依赖。  \n   - 示例测试用例：\n     ```python\n     from unittest.mock import Mock\n     from app.services.user_service import UserService\n\n     def test_create_user():\n         mock_repo = Mock()\n         service = UserService(mock_repo)\n         service.create_user({\"name\": \"Alice\", \"email\": \"alice@example.com\"})\n         mock_repo.create.assert_called_once()\n     ```\n\n---\n\n### **扩展场景**\n1. **异步支持**  \n   - 使用 `async/await` 和 `aiofiles` 优化文件读写性能。\n   ```python\n   import aiofiles\n\n   async def async_read_csv(file_path: str) -> pd.DataFrame:\n       async with aiofiles.open(file_path, mode=\"r\") as f:\n           content = await f.read()\n       return pd.read_csv(pd.compat.StringIO(content))\n   ```\n\n2. **更换数据源**  \n   - 添加 SQL 实现类 (`data_access/sql/user_repository.py`)：\n     ```python\n     from sqlalchemy.orm import Session\n     from app.core.repositories import BaseRepository\n     from app.models.user import User\n\n     class SQLUserRepository(BaseRepository):\n         def __init__(self, db: Session):\n             self.db = db\n\n         def get(self, user_id: int) -> Optional[User]:\n             return self.db.query(User).filter(User.id == user_id).first()\n     ```\n\n3. **API 文档增强**  \n   - 在路由中添加 OpenAPI 元数据：\n     ```python\n     @router.post(\n         \"/\",\n         response_model=UserResponse,\n         summary=\"Create a new user\",\n         description=\"Creates a user with email and name\",\n     )\n     ```\n\n---\n\n### **总结**\n此架构通过 **清晰的层次划分** 和 **依赖抽象**，能够高效支持 Pandas 数据操作，同时具备向传统数据库（如 PostgreSQL）迁移的能力。核心优势包括：\n- **高内聚低耦合**：各层职责明确，修改局部不影响全局。  \n- **可扩展性**：轻松替换数据源或添加新功能模块。  \n- **可维护性**：代码结构规范，便于团队协作和长期维护。","source":"_posts/FastApi基础架构/FastApi基础架构.md","raw":"以下是根据上述讨论整合的 **完整 FastAPI 项目架构**，包含模块化设计、分层抽象、依赖注入以及对 Pandas 数据操作的支持。该架构遵循现代后端开发的最佳实践，同时保持高扩展性和可维护性。\n\n---\n\n### **完整项目结构**\n```bash\nproject-root/\n├── app/\n│   ├── core/                     # 核心抽象与接口定义\n│   │   ├── __init__.py\n│   │   └── repositories.py       # 抽象基类（如 BaseRepository）\n│   ├── data_access/              # 具体数据访问实现\n│   │   ├── pandas/               # Pandas 实现\n│   │   │   ├── __init__.py\n│   │   │   └── user_repository.py\n│   │   └── sql/                  # SQL 实现（可选，未来扩展）\n│   ├── services/                 # 业务逻辑层\n│   │   ├── __init__.py\n│   │   └── user_service.py\n│   ├── routers/                  # API 路由\n│   │   ├── __init__.py\n│   │   └── users.py\n│   ├── schemas/                  # Pydantic 模型\n│   │   ├── __init__.py\n│   │   └── user.py\n│   ├── config/                   # 配置管理\n│   │   ├── __init__.py\n│   │   └── settings.py\n│   ├── dependencies.py           # 依赖注入定义\n│   ├── database.py               # 数据库连接（预留，未来扩展）\n│   ├── utils/                    # 工具类\n│   │   ├── __init__.py\n│   │   ├── exceptions.py         # 自定义异常处理\n│   │   └── logger.py             # 日志配置\n│   ├── containers.py             # 依赖注入容器配置\n│   └── main.py                   # FastAPI 应用入口\n├── tests/                        # 测试用例\n│   ├── __init__.py\n│   ├── test_users.py\n│   └── conftest.py               # 测试固件\n├── data/                         # 数据文件（CSV/Parquet）\n│   └── users.csv\n├── static/                       # 静态文件\n├── templates/                    # Jinja2 模板（可选）\n├── requirements.txt              # 依赖列表\n├── .env                          # 环境变量\n├── .gitignore\n└── README.md\n```\n\n---\n\n### **关键文件代码示例**\n\n#### 1. **抽象基类定义 (`core/repositories.py`)**\n```python\nfrom abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar, Optional\n\nT = TypeVar(\"T\")\n\nclass BaseRepository(ABC):\n    \"\"\"CRUD 操作的抽象基类\"\"\"\n\n    @abstractmethod\n    def get(self, id: int) -> Optional[T]:\n        pass\n\n    @abstractmethod\n    def create(self, data: dict) -> T:\n        pass\n\n    @abstractmethod\n    def update(self, id: int, data: dict) -> T:\n        pass\n\n    @abstractmethod\n    def delete(self, id: int) -> bool:\n        pass\n```\n\n#### 2. **Pandas 数据访问实现 (`data_access/pandas/user_repository.py`)**\n```python\nimport pandas as pd\nfrom pathlib import Path\nfrom app.core.repositories import BaseRepository\nfrom app.schemas.user import UserResponse\n\nclass PandasUserRepository(BaseRepository):\n    def __init__(self, file_path: str = \"data/users.csv\"):\n        self.file_path = Path(file_path)\n        self._ensure_file_exists()\n\n    def _ensure_file_exists(self):\n        if not self.file_path.exists():\n            self.file_path.parent.mkdir(parents=True, exist_ok=True)\n            pd.DataFrame(columns=[\"id\", \"name\", \"email\"]).to_csv(self.file_path, index=False)\n\n    def get(self, user_id: int) -> Optional[UserResponse]:\n        df = pd.read_csv(self.file_path)\n        user = df[df[\"id\"] == user_id].to_dict(orient=\"records\")\n        return UserResponse(**user[0]) if user else None\n\n    def create(self, data: dict) -> UserResponse:\n        df = pd.read_csv(self.file_path)\n        new_id = df[\"id\"].max() + 1 if not df.empty else 1\n        new_user = {\"id\": new_id, **data}\n        df = pd.concat([df, pd.DataFrame([new_user])], ignore_index=True)\n        df.to_csv(self.file_path, index=False)\n        return UserResponse(**new_user)\n```\n\n#### 3. **服务层 (`services/user_service.py`)**\n```python\nfrom app.core.repositories import BaseRepository\nfrom app.schemas.user import UserCreate, UserResponse\n\nclass UserService:\n    def __init__(self, repository: BaseRepository):\n        self.repository = repository\n\n    def create_user(self, user_data: UserCreate) -> UserResponse:\n        return self.repository.create(user_data.dict())\n\n    def get_user(self, user_id: int) -> Optional[UserResponse]:\n        return self.repository.get(user_id)\n```\n\n#### 4. **路由层 (`routers/users.py`)**\n```python\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom app.services.user_service import UserService\nfrom app.schemas.user import UserCreate, UserResponse\nfrom app.containers import Container\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@router.post(\"/\", response_model=UserResponse)\ndef create_user(\n    user: UserCreate,\n    service: UserService = Depends(Container.user_service)\n):\n    return service.create_user(user)\n\n@router.get(\"/{user_id}\", response_model=UserResponse)\ndef get_user(user_id: int, service: UserService = Depends(Container.user_service)):\n    user = service.get_user(user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n```\n\n#### 5. **依赖注入容器 (`containers.py`)**\n```python\nfrom dependency_injector import containers, providers\nfrom app.core.repositories import BaseRepository\nfrom app.data_access.pandas.user_repository import PandasUserRepository\nfrom app.services.user_service import UserService\n\nclass Container(containers.DeclarativeContainer):\n    user_repository = providers.Singleton(PandasUserRepository)\n    user_service = providers.Factory(UserService, repository=user_repository)\n```\n\n#### 6. **应用入口 (`main.py`)**\n```python\nfrom fastapi import FastAPI\nfrom app.routers import users\nfrom app.utils.exceptions import http_exception_handler\nfrom app.containers import Container\n\napp = FastAPI()\ncontainer = Container()\n\n# 注册路由\napp.include_router(users.router)\n\n# 全局异常处理\napp.add_exception_handler(HTTPException, http_exception_handler)\n\n@app.get(\"/health\")\ndef health_check():\n    return {\"status\": \"ok\"}\n```\n\n---\n\n### **关键设计说明**\n1. **分层架构**  \n   - **核心抽象层 (`core/`)**：定义与业务相关的接口（如 `BaseRepository`）。  \n   - **数据访问层 (`data_access/`)**：实现具体技术（如 Pandas、SQL）。  \n   - **服务层 (`services/`)**：处理业务逻辑，依赖抽象接口。  \n   - **路由层 (`routers/`)**：仅处理 HTTP 请求和响应。\n\n2. **依赖注入**  \n   - 使用 `dependency-injector` 管理服务实例化，实现解耦。  \n   - 替换数据源时只需修改 `Container` 中的绑定（如从 Pandas 切换到 SQL）。\n\n3. **配置管理**  \n   - 通过 `config/settings.py` 加载环境变量，适配不同环境（开发/生产）。  \n   - 示例配置：\n     ```python\n     from pydantic import BaseSettings\n\n     class Settings(BaseSettings):\n         PANDAS_DATA_PATH: str = \"data/users.csv\"\n\n         class Config:\n             env_file = \".env\"\n     ```\n\n4. **可测试性**  \n   - 在 `tests/` 中编写单元测试，通过 Mock `BaseRepository` 隔离依赖。  \n   - 示例测试用例：\n     ```python\n     from unittest.mock import Mock\n     from app.services.user_service import UserService\n\n     def test_create_user():\n         mock_repo = Mock()\n         service = UserService(mock_repo)\n         service.create_user({\"name\": \"Alice\", \"email\": \"alice@example.com\"})\n         mock_repo.create.assert_called_once()\n     ```\n\n---\n\n### **扩展场景**\n1. **异步支持**  \n   - 使用 `async/await` 和 `aiofiles` 优化文件读写性能。\n   ```python\n   import aiofiles\n\n   async def async_read_csv(file_path: str) -> pd.DataFrame:\n       async with aiofiles.open(file_path, mode=\"r\") as f:\n           content = await f.read()\n       return pd.read_csv(pd.compat.StringIO(content))\n   ```\n\n2. **更换数据源**  \n   - 添加 SQL 实现类 (`data_access/sql/user_repository.py`)：\n     ```python\n     from sqlalchemy.orm import Session\n     from app.core.repositories import BaseRepository\n     from app.models.user import User\n\n     class SQLUserRepository(BaseRepository):\n         def __init__(self, db: Session):\n             self.db = db\n\n         def get(self, user_id: int) -> Optional[User]:\n             return self.db.query(User).filter(User.id == user_id).first()\n     ```\n\n3. **API 文档增强**  \n   - 在路由中添加 OpenAPI 元数据：\n     ```python\n     @router.post(\n         \"/\",\n         response_model=UserResponse,\n         summary=\"Create a new user\",\n         description=\"Creates a user with email and name\",\n     )\n     ```\n\n---\n\n### **总结**\n此架构通过 **清晰的层次划分** 和 **依赖抽象**，能够高效支持 Pandas 数据操作，同时具备向传统数据库（如 PostgreSQL）迁移的能力。核心优势包括：\n- **高内聚低耦合**：各层职责明确，修改局部不影响全局。  \n- **可扩展性**：轻松替换数据源或添加新功能模块。  \n- **可维护性**：代码结构规范，便于团队协作和长期维护。","slug":"FastApi基础架构/FastApi基础架构","published":1,"date":"2025-05-20T01:38:05.196Z","updated":"2025-05-16T08:34:27.000Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmctwyvak0004x4grdxpia8ys","content":"<p>以下是根据上述讨论整合的 <strong>完整 FastAPI 项目架构</strong>，包含模块化设计、分层抽象、依赖注入以及对 Pandas 数据操作的支持。该架构遵循现代后端开发的最佳实践，同时保持高扩展性和可维护性。</p>\n<hr>\n<h3 id=\"完整项目结构\"><a href=\"#完整项目结构\" class=\"headerlink\" title=\"完整项目结构\"></a><strong>完整项目结构</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">project-root/</span><br><span class=\"line\">├── app/</span><br><span class=\"line\">│   ├── core/                     <span class=\"comment\"># 核心抽象与接口定义</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── repositories.py       <span class=\"comment\"># 抽象基类（如 BaseRepository）</span></span><br><span class=\"line\">│   ├── data_access/              <span class=\"comment\"># 具体数据访问实现</span></span><br><span class=\"line\">│   │   ├── pandas/               <span class=\"comment\"># Pandas 实现</span></span><br><span class=\"line\">│   │   │   ├── __init__.py</span><br><span class=\"line\">│   │   │   └── user_repository.py</span><br><span class=\"line\">│   │   └── sql/                  <span class=\"comment\"># SQL 实现（可选，未来扩展）</span></span><br><span class=\"line\">│   ├── services/                 <span class=\"comment\"># 业务逻辑层</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── user_service.py</span><br><span class=\"line\">│   ├── routers/                  <span class=\"comment\"># API 路由</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── users.py</span><br><span class=\"line\">│   ├── schemas/                  <span class=\"comment\"># Pydantic 模型</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── user.py</span><br><span class=\"line\">│   ├── config/                   <span class=\"comment\"># 配置管理</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── settings.py</span><br><span class=\"line\">│   ├── dependencies.py           <span class=\"comment\"># 依赖注入定义</span></span><br><span class=\"line\">│   ├── database.py               <span class=\"comment\"># 数据库连接（预留，未来扩展）</span></span><br><span class=\"line\">│   ├── utils/                    <span class=\"comment\"># 工具类</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── exceptions.py         <span class=\"comment\"># 自定义异常处理</span></span><br><span class=\"line\">│   │   └── logger.py             <span class=\"comment\"># 日志配置</span></span><br><span class=\"line\">│   ├── containers.py             <span class=\"comment\"># 依赖注入容器配置</span></span><br><span class=\"line\">│   └── main.py                   <span class=\"comment\"># FastAPI 应用入口</span></span><br><span class=\"line\">├── tests/                        <span class=\"comment\"># 测试用例</span></span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── test_users.py</span><br><span class=\"line\">│   └── conftest.py               <span class=\"comment\"># 测试固件</span></span><br><span class=\"line\">├── data/                         <span class=\"comment\"># 数据文件（CSV/Parquet）</span></span><br><span class=\"line\">│   └── users.csv</span><br><span class=\"line\">├── static/                       <span class=\"comment\"># 静态文件</span></span><br><span class=\"line\">├── templates/                    <span class=\"comment\"># Jinja2 模板（可选）</span></span><br><span class=\"line\">├── requirements.txt              <span class=\"comment\"># 依赖列表</span></span><br><span class=\"line\">├── .<span class=\"built_in\">env</span>                          <span class=\"comment\"># 环境变量</span></span><br><span class=\"line\">├── .gitignore</span><br><span class=\"line\">└── README.md</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键文件代码示例\"><a href=\"#关键文件代码示例\" class=\"headerlink\" title=\"关键文件代码示例\"></a><strong>关键文件代码示例</strong></h3><h4 id=\"1-抽象基类定义-core-repositories-py\"><a href=\"#1-抽象基类定义-core-repositories-py\" class=\"headerlink\" title=\"1. 抽象基类定义 (core/repositories.py)\"></a>1. <strong>抽象基类定义 (<code>core/repositories.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Generic</span>, TypeVar, <span class=\"type\">Optional</span></span><br><span class=\"line\"></span><br><span class=\"line\">T = TypeVar(<span class=\"string\">&quot;T&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseRepository</span>(<span class=\"title class_ inherited__\">ABC</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;CRUD 操作的抽象基类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, <span class=\"built_in\">id</span>: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[T]:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, data: <span class=\"built_in\">dict</span></span>) -&gt; T:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self, <span class=\"built_in\">id</span>: <span class=\"built_in\">int</span>, data: <span class=\"built_in\">dict</span></span>) -&gt; T:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">self, <span class=\"built_in\">id</span>: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Pandas-数据访问实现-data-access-pandas-user-repository-py\"><a href=\"#2-Pandas-数据访问实现-data-access-pandas-user-repository-py\" class=\"headerlink\" title=\"2. Pandas 数据访问实现 (data_access/pandas/user_repository.py)\"></a>2. <strong>Pandas 数据访问实现 (<code>data_access/pandas/user_repository.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.schemas.user <span class=\"keyword\">import</span> UserResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PandasUserRepository</span>(<span class=\"title class_ inherited__\">BaseRepository</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, file_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;data/users.csv&quot;</span></span>):</span><br><span class=\"line\">        self.file_path = Path(file_path)</span><br><span class=\"line\">        self._ensure_file_exists()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_ensure_file_exists</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.file_path.exists():</span><br><span class=\"line\">            self.file_path.parent.mkdir(parents=<span class=\"literal\">True</span>, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            pd.DataFrame(columns=[<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;email&quot;</span>]).to_csv(self.file_path, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[UserResponse]:</span><br><span class=\"line\">        df = pd.read_csv(self.file_path)</span><br><span class=\"line\">        user = df[df[<span class=\"string\">&quot;id&quot;</span>] == user_id].to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserResponse(**user[<span class=\"number\">0</span>]) <span class=\"keyword\">if</span> user <span class=\"keyword\">else</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, data: <span class=\"built_in\">dict</span></span>) -&gt; UserResponse:</span><br><span class=\"line\">        df = pd.read_csv(self.file_path)</span><br><span class=\"line\">        new_id = df[<span class=\"string\">&quot;id&quot;</span>].<span class=\"built_in\">max</span>() + <span class=\"number\">1</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> df.empty <span class=\"keyword\">else</span> <span class=\"number\">1</span></span><br><span class=\"line\">        new_user = &#123;<span class=\"string\">&quot;id&quot;</span>: new_id, **data&#125;</span><br><span class=\"line\">        df = pd.concat([df, pd.DataFrame([new_user])], ignore_index=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        df.to_csv(self.file_path, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserResponse(**new_user)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-服务层-services-user-service-py\"><a href=\"#3-服务层-services-user-service-py\" class=\"headerlink\" title=\"3. 服务层 (services/user_service.py)\"></a>3. <strong>服务层 (<code>services/user_service.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.schemas.user <span class=\"keyword\">import</span> UserCreate, UserResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, repository: BaseRepository</span>):</span><br><span class=\"line\">        self.repository = repository</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\">self, user_data: UserCreate</span>) -&gt; UserResponse:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.repository.create(user_data.<span class=\"built_in\">dict</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_user</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[UserResponse]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.repository.get(user_id)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-路由层-routers-users-py\"><a href=\"#4-路由层-routers-users-py\" class=\"headerlink\" title=\"4. 路由层 (routers/users.py)\"></a>4. <strong>路由层 (<code>routers/users.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> APIRouter, Depends, HTTPException</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.services.user_service <span class=\"keyword\">import</span> UserService</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.schemas.user <span class=\"keyword\">import</span> UserCreate, UserResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.containers <span class=\"keyword\">import</span> Container</span><br><span class=\"line\"></span><br><span class=\"line\">router = APIRouter(prefix=<span class=\"string\">&quot;/users&quot;</span>, tags=[<span class=\"string\">&quot;users&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.post(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, response_model=UserResponse</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    user: UserCreate,</span></span><br><span class=\"line\"><span class=\"params\">    service: UserService = Depends(<span class=\"params\">Container.user_service</span>)</span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> service.create_user(user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/&#123;user_id&#125;&quot;</span>, response_model=UserResponse</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_user</span>(<span class=\"params\">user_id: <span class=\"built_in\">int</span>, service: UserService = Depends(<span class=\"params\">Container.user_service</span>)</span>):</span><br><span class=\"line\">    user = service.get_user(user_id)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> HTTPException(status_code=<span class=\"number\">404</span>, detail=<span class=\"string\">&quot;User not found&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-依赖注入容器-containers-py\"><a href=\"#5-依赖注入容器-containers-py\" class=\"headerlink\" title=\"5. 依赖注入容器 (containers.py)\"></a>5. <strong>依赖注入容器 (<code>containers.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dependency_injector <span class=\"keyword\">import</span> containers, providers</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.data_access.pandas.user_repository <span class=\"keyword\">import</span> PandasUserRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.services.user_service <span class=\"keyword\">import</span> UserService</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Container</span>(containers.DeclarativeContainer):</span><br><span class=\"line\">    user_repository = providers.Singleton(PandasUserRepository)</span><br><span class=\"line\">    user_service = providers.Factory(UserService, repository=user_repository)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-应用入口-main-py\"><a href=\"#6-应用入口-main-py\" class=\"headerlink\" title=\"6. 应用入口 (main.py)\"></a>6. <strong>应用入口 (<code>main.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.routers <span class=\"keyword\">import</span> users</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.utils.exceptions <span class=\"keyword\">import</span> http_exception_handler</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.containers <span class=\"keyword\">import</span> Container</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">container = Container()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册路由</span></span><br><span class=\"line\">app.include_router(users.router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局异常处理</span></span><br><span class=\"line\">app.add_exception_handler(HTTPException, http_exception_handler)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/health&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">health_check</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键设计说明\"><a href=\"#关键设计说明\" class=\"headerlink\" title=\"关键设计说明\"></a><strong>关键设计说明</strong></h3><ol>\n<li><p><strong>分层架构</strong>  </p>\n<ul>\n<li>**核心抽象层 (<code>core/</code>)**：定义与业务相关的接口（如 <code>BaseRepository</code>）。  </li>\n<li>**数据访问层 (<code>data_access/</code>)**：实现具体技术（如 Pandas、SQL）。  </li>\n<li>**服务层 (<code>services/</code>)**：处理业务逻辑，依赖抽象接口。  </li>\n<li>**路由层 (<code>routers/</code>)**：仅处理 HTTP 请求和响应。</li>\n</ul>\n</li>\n<li><p><strong>依赖注入</strong>  </p>\n<ul>\n<li>使用 <code>dependency-injector</code> 管理服务实例化，实现解耦。  </li>\n<li>替换数据源时只需修改 <code>Container</code> 中的绑定（如从 Pandas 切换到 SQL）。</li>\n</ul>\n</li>\n<li><p><strong>配置管理</strong>  </p>\n<ul>\n<li>通过 <code>config/settings.py</code> 加载环境变量，适配不同环境（开发&#x2F;生产）。  </li>\n<li>示例配置：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pydantic <span class=\"keyword\">import</span> BaseSettings</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>(<span class=\"title class_ inherited__\">BaseSettings</span>):</span><br><span class=\"line\">    PANDAS_DATA_PATH: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;data/users.csv&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Config</span>:</span><br><span class=\"line\">        env_file = <span class=\"string\">&quot;.env&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>可测试性</strong>  </p>\n<ul>\n<li>在 <code>tests/</code> 中编写单元测试，通过 Mock <code>BaseRepository</code> 隔离依赖。  </li>\n<li>示例测试用例：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> unittest.mock <span class=\"keyword\">import</span> Mock</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.services.user_service <span class=\"keyword\">import</span> UserService</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_create_user</span>():</span><br><span class=\"line\">    mock_repo = Mock()</span><br><span class=\"line\">    service = UserService(mock_repo)</span><br><span class=\"line\">    service.create_user(&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;alice@example.com&quot;</span>&#125;)</span><br><span class=\"line\">    mock_repo.create.assert_called_once()</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"扩展场景\"><a href=\"#扩展场景\" class=\"headerlink\" title=\"扩展场景\"></a><strong>扩展场景</strong></h3><ol>\n<li><p><strong>异步支持</strong>  </p>\n<ul>\n<li>使用 <code>async/await</code> 和 <code>aiofiles</code> 优化文件读写性能。<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> aiofiles</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">async_read_csv</span>(<span class=\"params\">file_path: <span class=\"built_in\">str</span></span>) -&gt; pd.DataFrame:</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiofiles.<span class=\"built_in\">open</span>(file_path, mode=<span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        content = <span class=\"keyword\">await</span> f.read()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd.read_csv(pd.compat.StringIO(content))</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>更换数据源</strong>  </p>\n<ul>\n<li>添加 SQL 实现类 (<code>data_access/sql/user_repository.py</code>)：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> Session</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.models.user <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SQLUserRepository</span>(<span class=\"title class_ inherited__\">BaseRepository</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, db: Session</span>):</span><br><span class=\"line\">        self.db = db</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[User]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.db.query(User).<span class=\"built_in\">filter</span>(User.<span class=\"built_in\">id</span> == user_id).first()</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>API 文档增强</strong>  </p>\n<ul>\n<li>在路由中添加 OpenAPI 元数据：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@router.post(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;/&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    response_model=UserResponse,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    summary=<span class=\"string\">&quot;Create a new user&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    description=<span class=\"string\">&quot;Creates a user with email and name&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>此架构通过 <strong>清晰的层次划分</strong> 和 <strong>依赖抽象</strong>，能够高效支持 Pandas 数据操作，同时具备向传统数据库（如 PostgreSQL）迁移的能力。核心优势包括：</p>\n<ul>\n<li><strong>高内聚低耦合</strong>：各层职责明确，修改局部不影响全局。  </li>\n<li><strong>可扩展性</strong>：轻松替换数据源或添加新功能模块。  </li>\n<li><strong>可维护性</strong>：代码结构规范，便于团队协作和长期维护。</li>\n</ul>\n","excerpt":"","more":"<p>以下是根据上述讨论整合的 <strong>完整 FastAPI 项目架构</strong>，包含模块化设计、分层抽象、依赖注入以及对 Pandas 数据操作的支持。该架构遵循现代后端开发的最佳实践，同时保持高扩展性和可维护性。</p>\n<hr>\n<h3 id=\"完整项目结构\"><a href=\"#完整项目结构\" class=\"headerlink\" title=\"完整项目结构\"></a><strong>完整项目结构</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">project-root/</span><br><span class=\"line\">├── app/</span><br><span class=\"line\">│   ├── core/                     <span class=\"comment\"># 核心抽象与接口定义</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── repositories.py       <span class=\"comment\"># 抽象基类（如 BaseRepository）</span></span><br><span class=\"line\">│   ├── data_access/              <span class=\"comment\"># 具体数据访问实现</span></span><br><span class=\"line\">│   │   ├── pandas/               <span class=\"comment\"># Pandas 实现</span></span><br><span class=\"line\">│   │   │   ├── __init__.py</span><br><span class=\"line\">│   │   │   └── user_repository.py</span><br><span class=\"line\">│   │   └── sql/                  <span class=\"comment\"># SQL 实现（可选，未来扩展）</span></span><br><span class=\"line\">│   ├── services/                 <span class=\"comment\"># 业务逻辑层</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── user_service.py</span><br><span class=\"line\">│   ├── routers/                  <span class=\"comment\"># API 路由</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── users.py</span><br><span class=\"line\">│   ├── schemas/                  <span class=\"comment\"># Pydantic 模型</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── user.py</span><br><span class=\"line\">│   ├── config/                   <span class=\"comment\"># 配置管理</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── settings.py</span><br><span class=\"line\">│   ├── dependencies.py           <span class=\"comment\"># 依赖注入定义</span></span><br><span class=\"line\">│   ├── database.py               <span class=\"comment\"># 数据库连接（预留，未来扩展）</span></span><br><span class=\"line\">│   ├── utils/                    <span class=\"comment\"># 工具类</span></span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── exceptions.py         <span class=\"comment\"># 自定义异常处理</span></span><br><span class=\"line\">│   │   └── logger.py             <span class=\"comment\"># 日志配置</span></span><br><span class=\"line\">│   ├── containers.py             <span class=\"comment\"># 依赖注入容器配置</span></span><br><span class=\"line\">│   └── main.py                   <span class=\"comment\"># FastAPI 应用入口</span></span><br><span class=\"line\">├── tests/                        <span class=\"comment\"># 测试用例</span></span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── test_users.py</span><br><span class=\"line\">│   └── conftest.py               <span class=\"comment\"># 测试固件</span></span><br><span class=\"line\">├── data/                         <span class=\"comment\"># 数据文件（CSV/Parquet）</span></span><br><span class=\"line\">│   └── users.csv</span><br><span class=\"line\">├── static/                       <span class=\"comment\"># 静态文件</span></span><br><span class=\"line\">├── templates/                    <span class=\"comment\"># Jinja2 模板（可选）</span></span><br><span class=\"line\">├── requirements.txt              <span class=\"comment\"># 依赖列表</span></span><br><span class=\"line\">├── .<span class=\"built_in\">env</span>                          <span class=\"comment\"># 环境变量</span></span><br><span class=\"line\">├── .gitignore</span><br><span class=\"line\">└── README.md</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键文件代码示例\"><a href=\"#关键文件代码示例\" class=\"headerlink\" title=\"关键文件代码示例\"></a><strong>关键文件代码示例</strong></h3><h4 id=\"1-抽象基类定义-core-repositories-py\"><a href=\"#1-抽象基类定义-core-repositories-py\" class=\"headerlink\" title=\"1. 抽象基类定义 (core/repositories.py)\"></a>1. <strong>抽象基类定义 (<code>core/repositories.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Generic</span>, TypeVar, <span class=\"type\">Optional</span></span><br><span class=\"line\"></span><br><span class=\"line\">T = TypeVar(<span class=\"string\">&quot;T&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseRepository</span>(<span class=\"title class_ inherited__\">ABC</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;CRUD 操作的抽象基类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, <span class=\"built_in\">id</span>: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[T]:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, data: <span class=\"built_in\">dict</span></span>) -&gt; T:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self, <span class=\"built_in\">id</span>: <span class=\"built_in\">int</span>, data: <span class=\"built_in\">dict</span></span>) -&gt; T:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">self, <span class=\"built_in\">id</span>: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Pandas-数据访问实现-data-access-pandas-user-repository-py\"><a href=\"#2-Pandas-数据访问实现-data-access-pandas-user-repository-py\" class=\"headerlink\" title=\"2. Pandas 数据访问实现 (data_access/pandas/user_repository.py)\"></a>2. <strong>Pandas 数据访问实现 (<code>data_access/pandas/user_repository.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.schemas.user <span class=\"keyword\">import</span> UserResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PandasUserRepository</span>(<span class=\"title class_ inherited__\">BaseRepository</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, file_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;data/users.csv&quot;</span></span>):</span><br><span class=\"line\">        self.file_path = Path(file_path)</span><br><span class=\"line\">        self._ensure_file_exists()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_ensure_file_exists</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.file_path.exists():</span><br><span class=\"line\">            self.file_path.parent.mkdir(parents=<span class=\"literal\">True</span>, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            pd.DataFrame(columns=[<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;email&quot;</span>]).to_csv(self.file_path, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[UserResponse]:</span><br><span class=\"line\">        df = pd.read_csv(self.file_path)</span><br><span class=\"line\">        user = df[df[<span class=\"string\">&quot;id&quot;</span>] == user_id].to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserResponse(**user[<span class=\"number\">0</span>]) <span class=\"keyword\">if</span> user <span class=\"keyword\">else</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, data: <span class=\"built_in\">dict</span></span>) -&gt; UserResponse:</span><br><span class=\"line\">        df = pd.read_csv(self.file_path)</span><br><span class=\"line\">        new_id = df[<span class=\"string\">&quot;id&quot;</span>].<span class=\"built_in\">max</span>() + <span class=\"number\">1</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> df.empty <span class=\"keyword\">else</span> <span class=\"number\">1</span></span><br><span class=\"line\">        new_user = &#123;<span class=\"string\">&quot;id&quot;</span>: new_id, **data&#125;</span><br><span class=\"line\">        df = pd.concat([df, pd.DataFrame([new_user])], ignore_index=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        df.to_csv(self.file_path, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserResponse(**new_user)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-服务层-services-user-service-py\"><a href=\"#3-服务层-services-user-service-py\" class=\"headerlink\" title=\"3. 服务层 (services/user_service.py)\"></a>3. <strong>服务层 (<code>services/user_service.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.schemas.user <span class=\"keyword\">import</span> UserCreate, UserResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, repository: BaseRepository</span>):</span><br><span class=\"line\">        self.repository = repository</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\">self, user_data: UserCreate</span>) -&gt; UserResponse:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.repository.create(user_data.<span class=\"built_in\">dict</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_user</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[UserResponse]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.repository.get(user_id)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-路由层-routers-users-py\"><a href=\"#4-路由层-routers-users-py\" class=\"headerlink\" title=\"4. 路由层 (routers/users.py)\"></a>4. <strong>路由层 (<code>routers/users.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> APIRouter, Depends, HTTPException</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.services.user_service <span class=\"keyword\">import</span> UserService</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.schemas.user <span class=\"keyword\">import</span> UserCreate, UserResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.containers <span class=\"keyword\">import</span> Container</span><br><span class=\"line\"></span><br><span class=\"line\">router = APIRouter(prefix=<span class=\"string\">&quot;/users&quot;</span>, tags=[<span class=\"string\">&quot;users&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.post(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, response_model=UserResponse</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    user: UserCreate,</span></span><br><span class=\"line\"><span class=\"params\">    service: UserService = Depends(<span class=\"params\">Container.user_service</span>)</span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> service.create_user(user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/&#123;user_id&#125;&quot;</span>, response_model=UserResponse</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_user</span>(<span class=\"params\">user_id: <span class=\"built_in\">int</span>, service: UserService = Depends(<span class=\"params\">Container.user_service</span>)</span>):</span><br><span class=\"line\">    user = service.get_user(user_id)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> HTTPException(status_code=<span class=\"number\">404</span>, detail=<span class=\"string\">&quot;User not found&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-依赖注入容器-containers-py\"><a href=\"#5-依赖注入容器-containers-py\" class=\"headerlink\" title=\"5. 依赖注入容器 (containers.py)\"></a>5. <strong>依赖注入容器 (<code>containers.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dependency_injector <span class=\"keyword\">import</span> containers, providers</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.data_access.pandas.user_repository <span class=\"keyword\">import</span> PandasUserRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.services.user_service <span class=\"keyword\">import</span> UserService</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Container</span>(containers.DeclarativeContainer):</span><br><span class=\"line\">    user_repository = providers.Singleton(PandasUserRepository)</span><br><span class=\"line\">    user_service = providers.Factory(UserService, repository=user_repository)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-应用入口-main-py\"><a href=\"#6-应用入口-main-py\" class=\"headerlink\" title=\"6. 应用入口 (main.py)\"></a>6. <strong>应用入口 (<code>main.py</code>)</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.routers <span class=\"keyword\">import</span> users</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.utils.exceptions <span class=\"keyword\">import</span> http_exception_handler</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.containers <span class=\"keyword\">import</span> Container</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">container = Container()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册路由</span></span><br><span class=\"line\">app.include_router(users.router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局异常处理</span></span><br><span class=\"line\">app.add_exception_handler(HTTPException, http_exception_handler)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/health&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">health_check</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键设计说明\"><a href=\"#关键设计说明\" class=\"headerlink\" title=\"关键设计说明\"></a><strong>关键设计说明</strong></h3><ol>\n<li><p><strong>分层架构</strong>  </p>\n<ul>\n<li>**核心抽象层 (<code>core/</code>)**：定义与业务相关的接口（如 <code>BaseRepository</code>）。  </li>\n<li>**数据访问层 (<code>data_access/</code>)**：实现具体技术（如 Pandas、SQL）。  </li>\n<li>**服务层 (<code>services/</code>)**：处理业务逻辑，依赖抽象接口。  </li>\n<li>**路由层 (<code>routers/</code>)**：仅处理 HTTP 请求和响应。</li>\n</ul>\n</li>\n<li><p><strong>依赖注入</strong>  </p>\n<ul>\n<li>使用 <code>dependency-injector</code> 管理服务实例化，实现解耦。  </li>\n<li>替换数据源时只需修改 <code>Container</code> 中的绑定（如从 Pandas 切换到 SQL）。</li>\n</ul>\n</li>\n<li><p><strong>配置管理</strong>  </p>\n<ul>\n<li>通过 <code>config/settings.py</code> 加载环境变量，适配不同环境（开发&#x2F;生产）。  </li>\n<li>示例配置：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pydantic <span class=\"keyword\">import</span> BaseSettings</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>(<span class=\"title class_ inherited__\">BaseSettings</span>):</span><br><span class=\"line\">    PANDAS_DATA_PATH: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;data/users.csv&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Config</span>:</span><br><span class=\"line\">        env_file = <span class=\"string\">&quot;.env&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>可测试性</strong>  </p>\n<ul>\n<li>在 <code>tests/</code> 中编写单元测试，通过 Mock <code>BaseRepository</code> 隔离依赖。  </li>\n<li>示例测试用例：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> unittest.mock <span class=\"keyword\">import</span> Mock</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.services.user_service <span class=\"keyword\">import</span> UserService</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_create_user</span>():</span><br><span class=\"line\">    mock_repo = Mock()</span><br><span class=\"line\">    service = UserService(mock_repo)</span><br><span class=\"line\">    service.create_user(&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;alice@example.com&quot;</span>&#125;)</span><br><span class=\"line\">    mock_repo.create.assert_called_once()</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"扩展场景\"><a href=\"#扩展场景\" class=\"headerlink\" title=\"扩展场景\"></a><strong>扩展场景</strong></h3><ol>\n<li><p><strong>异步支持</strong>  </p>\n<ul>\n<li>使用 <code>async/await</code> 和 <code>aiofiles</code> 优化文件读写性能。<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> aiofiles</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">async_read_csv</span>(<span class=\"params\">file_path: <span class=\"built_in\">str</span></span>) -&gt; pd.DataFrame:</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiofiles.<span class=\"built_in\">open</span>(file_path, mode=<span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        content = <span class=\"keyword\">await</span> f.read()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd.read_csv(pd.compat.StringIO(content))</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>更换数据源</strong>  </p>\n<ul>\n<li>添加 SQL 实现类 (<code>data_access/sql/user_repository.py</code>)：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> Session</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.core.repositories <span class=\"keyword\">import</span> BaseRepository</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.models.user <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SQLUserRepository</span>(<span class=\"title class_ inherited__\">BaseRepository</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, db: Session</span>):</span><br><span class=\"line\">        self.db = db</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[User]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.db.query(User).<span class=\"built_in\">filter</span>(User.<span class=\"built_in\">id</span> == user_id).first()</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>API 文档增强</strong>  </p>\n<ul>\n<li>在路由中添加 OpenAPI 元数据：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@router.post(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;/&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    response_model=UserResponse,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    summary=<span class=\"string\">&quot;Create a new user&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    description=<span class=\"string\">&quot;Creates a user with email and name&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>此架构通过 <strong>清晰的层次划分</strong> 和 <strong>依赖抽象</strong>，能够高效支持 Pandas 数据操作，同时具备向传统数据库（如 PostgreSQL）迁移的能力。核心优势包括：</p>\n<ul>\n<li><strong>高内聚低耦合</strong>：各层职责明确，修改局部不影响全局。  </li>\n<li><strong>可扩展性</strong>：轻松替换数据源或添加新功能模块。  </li>\n<li><strong>可维护性</strong>：代码结构规范，便于团队协作和长期维护。</li>\n</ul>\n"},{"title":"Spring 之 @Bean注解","date":"2025-03-05T12:42:22.000Z","updated":"2025-03-05T12:42:22.000Z","keywords":["Spring","Bean"],"description":"介绍了Spring框架中`@Bean`注解的简单用法","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"\n在 Spring 框架中，`@Bean` 注解用于显式地定义一个 Bean，并将其注册到 Spring 容器中。它是 Java 配置类（使用 `@Configuration` 注解标记的类）中的核心注解之一，主要用于替代 XML 配置中的 `<bean>` 标签。\n\n---\n\n### 1. **`@Bean` 的基本用法**\n   - `@Bean` 注解通常用于方法上，表示该方法返回的对象将由 Spring 容器管理。\n   - 示例：\n     ```java\n     @Configuration\n     public class AppConfig {\n\n         @Bean\n         public MyBean myBean() {\n             return new MyBean();\n         }\n     }\n     ```\n   - 在这个例子中，`myBean()` 方法返回的 `MyBean` 对象会被 Spring 容器管理，Bean 的名称为方法名（即 `myBean`）。\n\n---\n\n### 2. **`@Bean` 的作用**\n   - **注册 Bean**：将方法的返回值注册为 Spring 容器中的一个 Bean。\n   - **控制 Bean 的生命周期**：可以通过 `@Bean` 注解的属性或方法逻辑控制 Bean 的初始化、销毁等行为。\n   - **依赖注入**：可以在 `@Bean` 方法中注入其他 Bean，实现依赖关系。\n\n---\n\n### 3. **`@Bean` 的常用属性**\n   - **`name` / `value`**：指定 Bean 的名称（默认是方法名）。\n     ```java\n     @Bean(name = \"customBeanName\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - **`initMethod`**：指定 Bean 的初始化方法。\n     ```java\n     @Bean(initMethod = \"init\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - **`destroyMethod`**：指定 Bean 的销毁方法。\n     ```java\n     @Bean(destroyMethod = \"cleanup\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n\n---\n\n### 4. **`@Bean` 与依赖注入**\n   - 在 `@Bean` 方法中，可以通过方法参数注入其他 Bean。\n   - 示例：\n     ```java\n     @Configuration\n     public class AppConfig {\n\n         @Bean\n         public MyBean myBean(AnotherBean anotherBean) {\n             MyBean myBean = new MyBean();\n             myBean.setAnotherBean(anotherBean);\n             return myBean;\n         }\n\n         @Bean\n         public AnotherBean anotherBean() {\n             return new AnotherBean();\n         }\n     }\n     ```\n   - 在这个例子中，`myBean()` 方法注入了 `AnotherBean`，Spring 会自动将 `AnotherBean` 注入到 `myBean()` 方法中。\n\n---\n\n### 5. **`@Bean` 与 Bean 的作用域**\n   - 默认情况下，`@Bean` 注册的 Bean 是单例（Singleton）的。\n   - 可以通过 `@Scope` 注解指定 Bean 的作用域。\n     ```java\n     @Bean\n     @Scope(\"prototype\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n\n---\n\n### 6. **`@Bean` 与条件化注册**\n   - 结合 `@Conditional` 注解，可以根据条件动态注册 Bean。\n   - 示例：\n     ```java\n     @Bean\n     @Conditional(MyCondition.class)\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - `MyCondition` 是一个实现了 `Condition` 接口的类，用于定义注册条件。\n\n---\n\n### 7. **`@Bean` 与第三方库集成**\n   - `@Bean` 常用于注册第三方库的组件（如数据源、线程池等）。\n   - 示例：\n     ```java\n     @Bean\n     public DataSource dataSource() {\n         return new HikariDataSource();\n     }\n     ```\n\n---\n\n### 8. **`@Bean` 与 Bean 的初始化/销毁**\n   - 可以通过 `@Bean` 注解的 `initMethod` 和 `destroyMethod` 属性指定初始化和销毁方法。\n   - 示例：\n     ```java\n     @Bean(initMethod = \"init\", destroyMethod = \"cleanup\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - 或者直接在 `@Bean` 方法中编写逻辑：\n     ```java\n     @Bean\n     public MyBean myBean() {\n         MyBean myBean = new MyBean();\n         myBean.init(); // 初始化逻辑\n         return myBean;\n     }\n     ```\n\n---\n\n### 9. **`@Bean` 与 `@Configuration` 的关系**\n   - `@Bean` 通常与 `@Configuration` 注解一起使用。\n   - `@Configuration` 标记的类是 Spring 的配置类，其中的 `@Bean` 方法会被 Spring 代理，确保每次调用返回的是同一个 Bean 实例（单例模式）。\n\n---\n\n### 10. **`@Bean` 与 `@Component` 的区别**\n   - `@Component` 用于类级别，自动扫描并注册 Bean。\n   - `@Bean` 用于方法级别，显式地定义和注册 Bean。\n   - `@Bean` 更适合注册第三方库的组件或需要复杂初始化逻辑的 Bean。\n\n---\n\n### 总结\n`@Bean` 是 Spring 中用于显式定义和注册 Bean 的核心注解，适用于以下场景：\n- 注册第三方库的组件。\n- 需要复杂初始化逻辑的 Bean。\n- 需要动态或条件化注册 Bean。\n- 替代 XML 配置中的 `<bean>` 标签。\n\n通过 `@Bean`，开发者可以更灵活地控制 Bean 的创建和注册过程，是 Spring Java 配置的重要组成部分。","source":"_posts/Spring Bean/Spring Bean.md","raw":"---\ntitle: Spring 之 @Bean注解\ndate: 2025-03-05 20:42:22\nupdated: 2025-03-05 20:42:22\ntags: \n - Spring\ncategories: \n - 技术\n - Spring\nkeywords: \n - Spring\n - Bean\ndescription: 介绍了Spring框架中`@Bean`注解的简单用法\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n\n在 Spring 框架中，`@Bean` 注解用于显式地定义一个 Bean，并将其注册到 Spring 容器中。它是 Java 配置类（使用 `@Configuration` 注解标记的类）中的核心注解之一，主要用于替代 XML 配置中的 `<bean>` 标签。\n\n---\n\n### 1. **`@Bean` 的基本用法**\n   - `@Bean` 注解通常用于方法上，表示该方法返回的对象将由 Spring 容器管理。\n   - 示例：\n     ```java\n     @Configuration\n     public class AppConfig {\n\n         @Bean\n         public MyBean myBean() {\n             return new MyBean();\n         }\n     }\n     ```\n   - 在这个例子中，`myBean()` 方法返回的 `MyBean` 对象会被 Spring 容器管理，Bean 的名称为方法名（即 `myBean`）。\n\n---\n\n### 2. **`@Bean` 的作用**\n   - **注册 Bean**：将方法的返回值注册为 Spring 容器中的一个 Bean。\n   - **控制 Bean 的生命周期**：可以通过 `@Bean` 注解的属性或方法逻辑控制 Bean 的初始化、销毁等行为。\n   - **依赖注入**：可以在 `@Bean` 方法中注入其他 Bean，实现依赖关系。\n\n---\n\n### 3. **`@Bean` 的常用属性**\n   - **`name` / `value`**：指定 Bean 的名称（默认是方法名）。\n     ```java\n     @Bean(name = \"customBeanName\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - **`initMethod`**：指定 Bean 的初始化方法。\n     ```java\n     @Bean(initMethod = \"init\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - **`destroyMethod`**：指定 Bean 的销毁方法。\n     ```java\n     @Bean(destroyMethod = \"cleanup\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n\n---\n\n### 4. **`@Bean` 与依赖注入**\n   - 在 `@Bean` 方法中，可以通过方法参数注入其他 Bean。\n   - 示例：\n     ```java\n     @Configuration\n     public class AppConfig {\n\n         @Bean\n         public MyBean myBean(AnotherBean anotherBean) {\n             MyBean myBean = new MyBean();\n             myBean.setAnotherBean(anotherBean);\n             return myBean;\n         }\n\n         @Bean\n         public AnotherBean anotherBean() {\n             return new AnotherBean();\n         }\n     }\n     ```\n   - 在这个例子中，`myBean()` 方法注入了 `AnotherBean`，Spring 会自动将 `AnotherBean` 注入到 `myBean()` 方法中。\n\n---\n\n### 5. **`@Bean` 与 Bean 的作用域**\n   - 默认情况下，`@Bean` 注册的 Bean 是单例（Singleton）的。\n   - 可以通过 `@Scope` 注解指定 Bean 的作用域。\n     ```java\n     @Bean\n     @Scope(\"prototype\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n\n---\n\n### 6. **`@Bean` 与条件化注册**\n   - 结合 `@Conditional` 注解，可以根据条件动态注册 Bean。\n   - 示例：\n     ```java\n     @Bean\n     @Conditional(MyCondition.class)\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - `MyCondition` 是一个实现了 `Condition` 接口的类，用于定义注册条件。\n\n---\n\n### 7. **`@Bean` 与第三方库集成**\n   - `@Bean` 常用于注册第三方库的组件（如数据源、线程池等）。\n   - 示例：\n     ```java\n     @Bean\n     public DataSource dataSource() {\n         return new HikariDataSource();\n     }\n     ```\n\n---\n\n### 8. **`@Bean` 与 Bean 的初始化/销毁**\n   - 可以通过 `@Bean` 注解的 `initMethod` 和 `destroyMethod` 属性指定初始化和销毁方法。\n   - 示例：\n     ```java\n     @Bean(initMethod = \"init\", destroyMethod = \"cleanup\")\n     public MyBean myBean() {\n         return new MyBean();\n     }\n     ```\n   - 或者直接在 `@Bean` 方法中编写逻辑：\n     ```java\n     @Bean\n     public MyBean myBean() {\n         MyBean myBean = new MyBean();\n         myBean.init(); // 初始化逻辑\n         return myBean;\n     }\n     ```\n\n---\n\n### 9. **`@Bean` 与 `@Configuration` 的关系**\n   - `@Bean` 通常与 `@Configuration` 注解一起使用。\n   - `@Configuration` 标记的类是 Spring 的配置类，其中的 `@Bean` 方法会被 Spring 代理，确保每次调用返回的是同一个 Bean 实例（单例模式）。\n\n---\n\n### 10. **`@Bean` 与 `@Component` 的区别**\n   - `@Component` 用于类级别，自动扫描并注册 Bean。\n   - `@Bean` 用于方法级别，显式地定义和注册 Bean。\n   - `@Bean` 更适合注册第三方库的组件或需要复杂初始化逻辑的 Bean。\n\n---\n\n### 总结\n`@Bean` 是 Spring 中用于显式定义和注册 Bean 的核心注解，适用于以下场景：\n- 注册第三方库的组件。\n- 需要复杂初始化逻辑的 Bean。\n- 需要动态或条件化注册 Bean。\n- 替代 XML 配置中的 `<bean>` 标签。\n\n通过 `@Bean`，开发者可以更灵活地控制 Bean 的创建和注册过程，是 Spring Java 配置的重要组成部分。","slug":"Spring Bean/Spring Bean","published":1,"layout":"post","photos":[],"_id":"cmctwyvao0005x4grciac23at","content":"<p>在 Spring 框架中，<code>@Bean</code> 注解用于显式地定义一个 Bean，并将其注册到 Spring 容器中。它是 Java 配置类（使用 <code>@Configuration</code> 注解标记的类）中的核心注解之一，主要用于替代 XML 配置中的 <code>&lt;bean&gt;</code> 标签。</p>\n<hr>\n<h3 id=\"1-Bean-的基本用法\"><a href=\"#1-Bean-的基本用法\" class=\"headerlink\" title=\"1. @Bean 的基本用法\"></a>1. <strong><code>@Bean</code> 的基本用法</strong></h3><ul>\n<li><code>@Bean</code> 注解通常用于方法上，表示该方法返回的对象将由 Spring 容器管理。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在这个例子中，<code>myBean()</code> 方法返回的 <code>MyBean</code> 对象会被 Spring 容器管理，Bean 的名称为方法名（即 <code>myBean</code>）。</li>\n</ul>\n<hr>\n<h3 id=\"2-Bean-的作用\"><a href=\"#2-Bean-的作用\" class=\"headerlink\" title=\"2. @Bean 的作用\"></a>2. <strong><code>@Bean</code> 的作用</strong></h3><ul>\n<li><strong>注册 Bean</strong>：将方法的返回值注册为 Spring 容器中的一个 Bean。</li>\n<li><strong>控制 Bean 的生命周期</strong>：可以通过 <code>@Bean</code> 注解的属性或方法逻辑控制 Bean 的初始化、销毁等行为。</li>\n<li><strong>依赖注入</strong>：可以在 <code>@Bean</code> 方法中注入其他 Bean，实现依赖关系。</li>\n</ul>\n<hr>\n<h3 id=\"3-Bean-的常用属性\"><a href=\"#3-Bean-的常用属性\" class=\"headerlink\" title=\"3. @Bean 的常用属性\"></a>3. <strong><code>@Bean</code> 的常用属性</strong></h3><ul>\n<li>**<code>name</code> &#x2F; <code>value</code>**：指定 Bean 的名称（默认是方法名）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = &quot;customBeanName&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>**<code>initMethod</code>**：指定 Bean 的初始化方法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>**<code>destroyMethod</code>**：指定 Bean 的销毁方法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(destroyMethod = &quot;cleanup&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"4-Bean-与依赖注入\"><a href=\"#4-Bean-与依赖注入\" class=\"headerlink\" title=\"4. @Bean 与依赖注入\"></a>4. <strong><code>@Bean</code> 与依赖注入</strong></h3><ul>\n<li>在 <code>@Bean</code> 方法中，可以通过方法参数注入其他 Bean。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">(AnotherBean anotherBean)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyBean</span> <span class=\"variable\">myBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">        myBean.setAnotherBean(anotherBean);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AnotherBean <span class=\"title function_\">anotherBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnotherBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在这个例子中，<code>myBean()</code> 方法注入了 <code>AnotherBean</code>，Spring 会自动将 <code>AnotherBean</code> 注入到 <code>myBean()</code> 方法中。</li>\n</ul>\n<hr>\n<h3 id=\"5-Bean-与-Bean-的作用域\"><a href=\"#5-Bean-与-Bean-的作用域\" class=\"headerlink\" title=\"5. @Bean 与 Bean 的作用域\"></a>5. <strong><code>@Bean</code> 与 Bean 的作用域</strong></h3><ul>\n<li>默认情况下，<code>@Bean</code> 注册的 Bean 是单例（Singleton）的。</li>\n<li>可以通过 <code>@Scope</code> 注解指定 Bean 的作用域。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"6-Bean-与条件化注册\"><a href=\"#6-Bean-与条件化注册\" class=\"headerlink\" title=\"6. @Bean 与条件化注册\"></a>6. <strong><code>@Bean</code> 与条件化注册</strong></h3><ul>\n<li>结合 <code>@Conditional</code> 注解，可以根据条件动态注册 Bean。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(MyCondition.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>MyCondition</code> 是一个实现了 <code>Condition</code> 接口的类，用于定义注册条件。</li>\n</ul>\n<hr>\n<h3 id=\"7-Bean-与第三方库集成\"><a href=\"#7-Bean-与第三方库集成\" class=\"headerlink\" title=\"7. @Bean 与第三方库集成\"></a>7. <strong><code>@Bean</code> 与第三方库集成</strong></h3><ul>\n<li><code>@Bean</code> 常用于注册第三方库的组件（如数据源、线程池等）。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HikariDataSource</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"8-Bean-与-Bean-的初始化-销毁\"><a href=\"#8-Bean-与-Bean-的初始化-销毁\" class=\"headerlink\" title=\"8. @Bean 与 Bean 的初始化&#x2F;销毁\"></a>8. <strong><code>@Bean</code> 与 Bean 的初始化&#x2F;销毁</strong></h3><ul>\n<li>可以通过 <code>@Bean</code> 注解的 <code>initMethod</code> 和 <code>destroyMethod</code> 属性指定初始化和销毁方法。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;cleanup&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>或者直接在 <code>@Bean</code> 方法中编写逻辑：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyBean</span> <span class=\"variable\">myBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">    myBean.init(); <span class=\"comment\">// 初始化逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> myBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"9-Bean-与-Configuration-的关系\"><a href=\"#9-Bean-与-Configuration-的关系\" class=\"headerlink\" title=\"9. @Bean 与 @Configuration 的关系\"></a>9. <strong><code>@Bean</code> 与 <code>@Configuration</code> 的关系</strong></h3><ul>\n<li><code>@Bean</code> 通常与 <code>@Configuration</code> 注解一起使用。</li>\n<li><code>@Configuration</code> 标记的类是 Spring 的配置类，其中的 <code>@Bean</code> 方法会被 Spring 代理，确保每次调用返回的是同一个 Bean 实例（单例模式）。</li>\n</ul>\n<hr>\n<h3 id=\"10-Bean-与-Component-的区别\"><a href=\"#10-Bean-与-Component-的区别\" class=\"headerlink\" title=\"10. @Bean 与 @Component 的区别\"></a>10. <strong><code>@Bean</code> 与 <code>@Component</code> 的区别</strong></h3><ul>\n<li><code>@Component</code> 用于类级别，自动扫描并注册 Bean。</li>\n<li><code>@Bean</code> 用于方法级别，显式地定义和注册 Bean。</li>\n<li><code>@Bean</code> 更适合注册第三方库的组件或需要复杂初始化逻辑的 Bean。</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>@Bean</code> 是 Spring 中用于显式定义和注册 Bean 的核心注解，适用于以下场景：</p>\n<ul>\n<li>注册第三方库的组件。</li>\n<li>需要复杂初始化逻辑的 Bean。</li>\n<li>需要动态或条件化注册 Bean。</li>\n<li>替代 XML 配置中的 <code>&lt;bean&gt;</code> 标签。</li>\n</ul>\n<p>通过 <code>@Bean</code>，开发者可以更灵活地控制 Bean 的创建和注册过程，是 Spring Java 配置的重要组成部分。</p>\n","excerpt":"","more":"<p>在 Spring 框架中，<code>@Bean</code> 注解用于显式地定义一个 Bean，并将其注册到 Spring 容器中。它是 Java 配置类（使用 <code>@Configuration</code> 注解标记的类）中的核心注解之一，主要用于替代 XML 配置中的 <code>&lt;bean&gt;</code> 标签。</p>\n<hr>\n<h3 id=\"1-Bean-的基本用法\"><a href=\"#1-Bean-的基本用法\" class=\"headerlink\" title=\"1. @Bean 的基本用法\"></a>1. <strong><code>@Bean</code> 的基本用法</strong></h3><ul>\n<li><code>@Bean</code> 注解通常用于方法上，表示该方法返回的对象将由 Spring 容器管理。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在这个例子中，<code>myBean()</code> 方法返回的 <code>MyBean</code> 对象会被 Spring 容器管理，Bean 的名称为方法名（即 <code>myBean</code>）。</li>\n</ul>\n<hr>\n<h3 id=\"2-Bean-的作用\"><a href=\"#2-Bean-的作用\" class=\"headerlink\" title=\"2. @Bean 的作用\"></a>2. <strong><code>@Bean</code> 的作用</strong></h3><ul>\n<li><strong>注册 Bean</strong>：将方法的返回值注册为 Spring 容器中的一个 Bean。</li>\n<li><strong>控制 Bean 的生命周期</strong>：可以通过 <code>@Bean</code> 注解的属性或方法逻辑控制 Bean 的初始化、销毁等行为。</li>\n<li><strong>依赖注入</strong>：可以在 <code>@Bean</code> 方法中注入其他 Bean，实现依赖关系。</li>\n</ul>\n<hr>\n<h3 id=\"3-Bean-的常用属性\"><a href=\"#3-Bean-的常用属性\" class=\"headerlink\" title=\"3. @Bean 的常用属性\"></a>3. <strong><code>@Bean</code> 的常用属性</strong></h3><ul>\n<li>**<code>name</code> &#x2F; <code>value</code>**：指定 Bean 的名称（默认是方法名）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = &quot;customBeanName&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>**<code>initMethod</code>**：指定 Bean 的初始化方法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>**<code>destroyMethod</code>**：指定 Bean 的销毁方法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(destroyMethod = &quot;cleanup&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"4-Bean-与依赖注入\"><a href=\"#4-Bean-与依赖注入\" class=\"headerlink\" title=\"4. @Bean 与依赖注入\"></a>4. <strong><code>@Bean</code> 与依赖注入</strong></h3><ul>\n<li>在 <code>@Bean</code> 方法中，可以通过方法参数注入其他 Bean。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">(AnotherBean anotherBean)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyBean</span> <span class=\"variable\">myBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">        myBean.setAnotherBean(anotherBean);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AnotherBean <span class=\"title function_\">anotherBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnotherBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在这个例子中，<code>myBean()</code> 方法注入了 <code>AnotherBean</code>，Spring 会自动将 <code>AnotherBean</code> 注入到 <code>myBean()</code> 方法中。</li>\n</ul>\n<hr>\n<h3 id=\"5-Bean-与-Bean-的作用域\"><a href=\"#5-Bean-与-Bean-的作用域\" class=\"headerlink\" title=\"5. @Bean 与 Bean 的作用域\"></a>5. <strong><code>@Bean</code> 与 Bean 的作用域</strong></h3><ul>\n<li>默认情况下，<code>@Bean</code> 注册的 Bean 是单例（Singleton）的。</li>\n<li>可以通过 <code>@Scope</code> 注解指定 Bean 的作用域。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"6-Bean-与条件化注册\"><a href=\"#6-Bean-与条件化注册\" class=\"headerlink\" title=\"6. @Bean 与条件化注册\"></a>6. <strong><code>@Bean</code> 与条件化注册</strong></h3><ul>\n<li>结合 <code>@Conditional</code> 注解，可以根据条件动态注册 Bean。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(MyCondition.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>MyCondition</code> 是一个实现了 <code>Condition</code> 接口的类，用于定义注册条件。</li>\n</ul>\n<hr>\n<h3 id=\"7-Bean-与第三方库集成\"><a href=\"#7-Bean-与第三方库集成\" class=\"headerlink\" title=\"7. @Bean 与第三方库集成\"></a>7. <strong><code>@Bean</code> 与第三方库集成</strong></h3><ul>\n<li><code>@Bean</code> 常用于注册第三方库的组件（如数据源、线程池等）。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HikariDataSource</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"8-Bean-与-Bean-的初始化-销毁\"><a href=\"#8-Bean-与-Bean-的初始化-销毁\" class=\"headerlink\" title=\"8. @Bean 与 Bean 的初始化&#x2F;销毁\"></a>8. <strong><code>@Bean</code> 与 Bean 的初始化&#x2F;销毁</strong></h3><ul>\n<li>可以通过 <code>@Bean</code> 注解的 <code>initMethod</code> 和 <code>destroyMethod</code> 属性指定初始化和销毁方法。</li>\n<li>示例：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;cleanup&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>或者直接在 <code>@Bean</code> 方法中编写逻辑：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MyBean <span class=\"title function_\">myBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyBean</span> <span class=\"variable\">myBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBean</span>();</span><br><span class=\"line\">    myBean.init(); <span class=\"comment\">// 初始化逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> myBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"9-Bean-与-Configuration-的关系\"><a href=\"#9-Bean-与-Configuration-的关系\" class=\"headerlink\" title=\"9. @Bean 与 @Configuration 的关系\"></a>9. <strong><code>@Bean</code> 与 <code>@Configuration</code> 的关系</strong></h3><ul>\n<li><code>@Bean</code> 通常与 <code>@Configuration</code> 注解一起使用。</li>\n<li><code>@Configuration</code> 标记的类是 Spring 的配置类，其中的 <code>@Bean</code> 方法会被 Spring 代理，确保每次调用返回的是同一个 Bean 实例（单例模式）。</li>\n</ul>\n<hr>\n<h3 id=\"10-Bean-与-Component-的区别\"><a href=\"#10-Bean-与-Component-的区别\" class=\"headerlink\" title=\"10. @Bean 与 @Component 的区别\"></a>10. <strong><code>@Bean</code> 与 <code>@Component</code> 的区别</strong></h3><ul>\n<li><code>@Component</code> 用于类级别，自动扫描并注册 Bean。</li>\n<li><code>@Bean</code> 用于方法级别，显式地定义和注册 Bean。</li>\n<li><code>@Bean</code> 更适合注册第三方库的组件或需要复杂初始化逻辑的 Bean。</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>@Bean</code> 是 Spring 中用于显式定义和注册 Bean 的核心注解，适用于以下场景：</p>\n<ul>\n<li>注册第三方库的组件。</li>\n<li>需要复杂初始化逻辑的 Bean。</li>\n<li>需要动态或条件化注册 Bean。</li>\n<li>替代 XML 配置中的 <code>&lt;bean&gt;</code> 标签。</li>\n</ul>\n<p>通过 <code>@Bean</code>，开发者可以更灵活地控制 Bean 的创建和注册过程，是 Spring Java 配置的重要组成部分。</p>\n"},{"title":"Hadoop基础之MapTask工作机制","date":"2025-03-05T12:42:22.000Z","updated":"2025-03-05T12:42:22.000Z","keywords":["MapTask工作机制"],"description":"MapTask工作机制流程","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"\n# MapTask工作机制\nhttps://www.cnblogs.com/shihongpin/p/18419934\n![MapTask工作机制](./MapTask工作机制/MapTask工作机制.jpg)\n### 0. 准备阶段\nsubmit提交前先获取分片大小`computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M`\n根据分片大小**虚拟拆分**文件，不会实际拆分hdfs中存储的文件\n准备jar包、xml文件和切片信息提交到yarn\nMrAppMaster根据切片信息计算maptask数量\n\n### 1. Read阶段  \nMapTask通过InputFormat获得的RecordReader，从输入InputSplit中解析出一个个key/value。\n\n### 2. Map阶段  \n该节点主要是将解析出的key/value交给用户编写map()函数处理，并产生一系列新的key/value。\n\n### 3. Collect收集阶段  \n在用户编写map()函数中，当数据处理完成后，一般会调用`OutputCollector.collect()`输出结果。在该函数内部，它会将生成的key/value分区（调用`Partitioner`），并写入一个环形内存缓冲区中。\n\n### 4. Spill阶段  \n即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。\n\n**溢写阶段详情**：  \n1. **排序操作**  \n   - 利用快速排序算法对缓存区内的数据进行排序  \n   - 排序方式：先按照分区编号`Partition`排序，然后按照`key`排序  \n   - 结果：数据以分区为单位聚集，且同一分区内所有数据按`key`有序  \n\n2. **写入临时文件**  \n   - 按分区编号由小到大依次写入任务工作目录下的临时文件`output/spillN.out`（N表示当前溢写次数）  \n   - 若用户设置了`Combiner`，则在写入前对每个分区的数据进行一次聚集操作  \n\n3. **元信息记录**  \n   - 将分区数据的元信息写入内存索引数据结构`SpillRecord`  \n   - 元信息包括：临时文件中的偏移量、压缩前/后数据大小  \n   - 若内存索引大小超过1MB，则将其写入文件`output/spillN.out.index`中  \n\n### 5. Merge阶段  \n当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。\n\n**合并过程**：  \n- **最终文件生成**  \n  - 所有临时文件合并成一个大文件`output/file.out`  \n  - 同时生成索引文件`output/file.out.index`  \n\n- **分区合并策略**  \n  - 以分区为单位进行合并  \n  - 采用多轮递归合并方式：  \n    1. 每轮合并`mapreduce.task.io.sort.factor`（默认10）个文件  \n    2. 产生的文件重新加入待合并列表  \n    3. 对文件排序后重复上述过程，直到生成一个大文件  \n\n- **优化目的**  \n  - 避免同时打开大量文件  \n  - 减少读取大量小文件产生的随机读取开销  ","source":"_posts/MapTask工作机制/MapTask工作机制.md","raw":"---\ntitle: Hadoop基础之MapTask工作机制\ndate: 2025-03-05 20:42:22\nupdated: 2025-03-05 20:42:22\ntags: \n - hadoop\ncategories: \n - 技术\n - hadoop\nkeywords: \n - MapTask工作机制\ndescription: MapTask工作机制流程\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n\n# MapTask工作机制\nhttps://www.cnblogs.com/shihongpin/p/18419934\n![MapTask工作机制](./MapTask工作机制/MapTask工作机制.jpg)\n### 0. 准备阶段\nsubmit提交前先获取分片大小`computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M`\n根据分片大小**虚拟拆分**文件，不会实际拆分hdfs中存储的文件\n准备jar包、xml文件和切片信息提交到yarn\nMrAppMaster根据切片信息计算maptask数量\n\n### 1. Read阶段  \nMapTask通过InputFormat获得的RecordReader，从输入InputSplit中解析出一个个key/value。\n\n### 2. Map阶段  \n该节点主要是将解析出的key/value交给用户编写map()函数处理，并产生一系列新的key/value。\n\n### 3. Collect收集阶段  \n在用户编写map()函数中，当数据处理完成后，一般会调用`OutputCollector.collect()`输出结果。在该函数内部，它会将生成的key/value分区（调用`Partitioner`），并写入一个环形内存缓冲区中。\n\n### 4. Spill阶段  \n即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。\n\n**溢写阶段详情**：  \n1. **排序操作**  \n   - 利用快速排序算法对缓存区内的数据进行排序  \n   - 排序方式：先按照分区编号`Partition`排序，然后按照`key`排序  \n   - 结果：数据以分区为单位聚集，且同一分区内所有数据按`key`有序  \n\n2. **写入临时文件**  \n   - 按分区编号由小到大依次写入任务工作目录下的临时文件`output/spillN.out`（N表示当前溢写次数）  \n   - 若用户设置了`Combiner`，则在写入前对每个分区的数据进行一次聚集操作  \n\n3. **元信息记录**  \n   - 将分区数据的元信息写入内存索引数据结构`SpillRecord`  \n   - 元信息包括：临时文件中的偏移量、压缩前/后数据大小  \n   - 若内存索引大小超过1MB，则将其写入文件`output/spillN.out.index`中  \n\n### 5. Merge阶段  \n当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。\n\n**合并过程**：  \n- **最终文件生成**  \n  - 所有临时文件合并成一个大文件`output/file.out`  \n  - 同时生成索引文件`output/file.out.index`  \n\n- **分区合并策略**  \n  - 以分区为单位进行合并  \n  - 采用多轮递归合并方式：  \n    1. 每轮合并`mapreduce.task.io.sort.factor`（默认10）个文件  \n    2. 产生的文件重新加入待合并列表  \n    3. 对文件排序后重复上述过程，直到生成一个大文件  \n\n- **优化目的**  \n  - 避免同时打开大量文件  \n  - 减少读取大量小文件产生的随机读取开销  ","slug":"MapTask工作机制/MapTask工作机制","published":1,"layout":"post","photos":[],"_id":"cmctwyvap0006x4gr6ttf716j","content":"<h1 id=\"MapTask工作机制\"><a href=\"#MapTask工作机制\" class=\"headerlink\" title=\"MapTask工作机制\"></a>MapTask工作机制</h1><p><a href=\"https://www.cnblogs.com/shihongpin/p/18419934\">https://www.cnblogs.com/shihongpin/p/18419934</a><br><img src=\"/liudacxz5/liudacxz5.github/MapTask%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.jpg\" alt=\"MapTask工作机制\"></p>\n<h3 id=\"0-准备阶段\"><a href=\"#0-准备阶段\" class=\"headerlink\" title=\"0. 准备阶段\"></a>0. 准备阶段</h3><p>submit提交前先获取分片大小<code>computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M</code><br>根据分片大小<strong>虚拟拆分</strong>文件，不会实际拆分hdfs中存储的文件<br>准备jar包、xml文件和切片信息提交到yarn<br>MrAppMaster根据切片信息计算maptask数量</p>\n<h3 id=\"1-Read阶段\"><a href=\"#1-Read阶段\" class=\"headerlink\" title=\"1. Read阶段\"></a>1. Read阶段</h3><p>MapTask通过InputFormat获得的RecordReader，从输入InputSplit中解析出一个个key&#x2F;value。</p>\n<h3 id=\"2-Map阶段\"><a href=\"#2-Map阶段\" class=\"headerlink\" title=\"2. Map阶段\"></a>2. Map阶段</h3><p>该节点主要是将解析出的key&#x2F;value交给用户编写map()函数处理，并产生一系列新的key&#x2F;value。</p>\n<h3 id=\"3-Collect收集阶段\"><a href=\"#3-Collect收集阶段\" class=\"headerlink\" title=\"3. Collect收集阶段\"></a>3. Collect收集阶段</h3><p>在用户编写map()函数中，当数据处理完成后，一般会调用<code>OutputCollector.collect()</code>输出结果。在该函数内部，它会将生成的key&#x2F;value分区（调用<code>Partitioner</code>），并写入一个环形内存缓冲区中。</p>\n<h3 id=\"4-Spill阶段\"><a href=\"#4-Spill阶段\" class=\"headerlink\" title=\"4. Spill阶段\"></a>4. Spill阶段</h3><p>即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</p>\n<p><strong>溢写阶段详情</strong>：  </p>\n<ol>\n<li><p><strong>排序操作</strong>  </p>\n<ul>\n<li>利用快速排序算法对缓存区内的数据进行排序  </li>\n<li>排序方式：先按照分区编号<code>Partition</code>排序，然后按照<code>key</code>排序  </li>\n<li>结果：数据以分区为单位聚集，且同一分区内所有数据按<code>key</code>有序</li>\n</ul>\n</li>\n<li><p><strong>写入临时文件</strong>  </p>\n<ul>\n<li>按分区编号由小到大依次写入任务工作目录下的临时文件<code>output/spillN.out</code>（N表示当前溢写次数）  </li>\n<li>若用户设置了<code>Combiner</code>，则在写入前对每个分区的数据进行一次聚集操作</li>\n</ul>\n</li>\n<li><p><strong>元信息记录</strong>  </p>\n<ul>\n<li>将分区数据的元信息写入内存索引数据结构<code>SpillRecord</code>  </li>\n<li>元信息包括：临时文件中的偏移量、压缩前&#x2F;后数据大小  </li>\n<li>若内存索引大小超过1MB，则将其写入文件<code>output/spillN.out.index</code>中</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-Merge阶段\"><a href=\"#5-Merge阶段\" class=\"headerlink\" title=\"5. Merge阶段\"></a>5. Merge阶段</h3><p>当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</p>\n<p><strong>合并过程</strong>：  </p>\n<ul>\n<li><p><strong>最终文件生成</strong>  </p>\n<ul>\n<li>所有临时文件合并成一个大文件<code>output/file.out</code>  </li>\n<li>同时生成索引文件<code>output/file.out.index</code></li>\n</ul>\n</li>\n<li><p><strong>分区合并策略</strong>  </p>\n<ul>\n<li>以分区为单位进行合并  </li>\n<li>采用多轮递归合并方式：  <ol>\n<li>每轮合并<code>mapreduce.task.io.sort.factor</code>（默认10）个文件  </li>\n<li>产生的文件重新加入待合并列表  </li>\n<li>对文件排序后重复上述过程，直到生成一个大文件</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p><strong>优化目的</strong>  </p>\n<ul>\n<li>避免同时打开大量文件  </li>\n<li>减少读取大量小文件产生的随机读取开销</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"MapTask工作机制\"><a href=\"#MapTask工作机制\" class=\"headerlink\" title=\"MapTask工作机制\"></a>MapTask工作机制</h1><p><a href=\"https://www.cnblogs.com/shihongpin/p/18419934\">https://www.cnblogs.com/shihongpin/p/18419934</a><br><img src=\"/liudacxz5/liudacxz5.github/MapTask%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.jpg\" alt=\"MapTask工作机制\"></p>\n<h3 id=\"0-准备阶段\"><a href=\"#0-准备阶段\" class=\"headerlink\" title=\"0. 准备阶段\"></a>0. 准备阶段</h3><p>submit提交前先获取分片大小<code>computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M</code><br>根据分片大小<strong>虚拟拆分</strong>文件，不会实际拆分hdfs中存储的文件<br>准备jar包、xml文件和切片信息提交到yarn<br>MrAppMaster根据切片信息计算maptask数量</p>\n<h3 id=\"1-Read阶段\"><a href=\"#1-Read阶段\" class=\"headerlink\" title=\"1. Read阶段\"></a>1. Read阶段</h3><p>MapTask通过InputFormat获得的RecordReader，从输入InputSplit中解析出一个个key&#x2F;value。</p>\n<h3 id=\"2-Map阶段\"><a href=\"#2-Map阶段\" class=\"headerlink\" title=\"2. Map阶段\"></a>2. Map阶段</h3><p>该节点主要是将解析出的key&#x2F;value交给用户编写map()函数处理，并产生一系列新的key&#x2F;value。</p>\n<h3 id=\"3-Collect收集阶段\"><a href=\"#3-Collect收集阶段\" class=\"headerlink\" title=\"3. Collect收集阶段\"></a>3. Collect收集阶段</h3><p>在用户编写map()函数中，当数据处理完成后，一般会调用<code>OutputCollector.collect()</code>输出结果。在该函数内部，它会将生成的key&#x2F;value分区（调用<code>Partitioner</code>），并写入一个环形内存缓冲区中。</p>\n<h3 id=\"4-Spill阶段\"><a href=\"#4-Spill阶段\" class=\"headerlink\" title=\"4. Spill阶段\"></a>4. Spill阶段</h3><p>即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</p>\n<p><strong>溢写阶段详情</strong>：  </p>\n<ol>\n<li><p><strong>排序操作</strong>  </p>\n<ul>\n<li>利用快速排序算法对缓存区内的数据进行排序  </li>\n<li>排序方式：先按照分区编号<code>Partition</code>排序，然后按照<code>key</code>排序  </li>\n<li>结果：数据以分区为单位聚集，且同一分区内所有数据按<code>key</code>有序</li>\n</ul>\n</li>\n<li><p><strong>写入临时文件</strong>  </p>\n<ul>\n<li>按分区编号由小到大依次写入任务工作目录下的临时文件<code>output/spillN.out</code>（N表示当前溢写次数）  </li>\n<li>若用户设置了<code>Combiner</code>，则在写入前对每个分区的数据进行一次聚集操作</li>\n</ul>\n</li>\n<li><p><strong>元信息记录</strong>  </p>\n<ul>\n<li>将分区数据的元信息写入内存索引数据结构<code>SpillRecord</code>  </li>\n<li>元信息包括：临时文件中的偏移量、压缩前&#x2F;后数据大小  </li>\n<li>若内存索引大小超过1MB，则将其写入文件<code>output/spillN.out.index</code>中</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-Merge阶段\"><a href=\"#5-Merge阶段\" class=\"headerlink\" title=\"5. Merge阶段\"></a>5. Merge阶段</h3><p>当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</p>\n<p><strong>合并过程</strong>：  </p>\n<ul>\n<li><p><strong>最终文件生成</strong>  </p>\n<ul>\n<li>所有临时文件合并成一个大文件<code>output/file.out</code>  </li>\n<li>同时生成索引文件<code>output/file.out.index</code></li>\n</ul>\n</li>\n<li><p><strong>分区合并策略</strong>  </p>\n<ul>\n<li>以分区为单位进行合并  </li>\n<li>采用多轮递归合并方式：  <ol>\n<li>每轮合并<code>mapreduce.task.io.sort.factor</code>（默认10）个文件  </li>\n<li>产生的文件重新加入待合并列表  </li>\n<li>对文件排序后重复上述过程，直到生成一个大文件</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p><strong>优化目的</strong>  </p>\n<ul>\n<li>避免同时打开大量文件  </li>\n<li>减少读取大量小文件产生的随机读取开销</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Spring 框架简介","date":"2025-03-05T12:42:22.000Z","updated":"2025-03-05T12:42:22.000Z","keywords":["Spring简介"],"description":"简要介绍了Spring框架的特性","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"\nSpring 框架是一个开源的、轻量级的、综合性的 Java 开发框架，广泛应用于企业级应用开发。其核心特点如下：\n\n---\n\n### 1. **控制反转（IoC）与依赖注入（DI）**\n   - **IoC（Inversion of Control）**：将对象的创建和管理权交给 Spring 容器，开发者无需手动管理对象生命周期。\n   - **DI（Dependency Injection）**：通过构造器、Setter 方法或注解自动注入依赖，实现组件间的松耦合。\n\n---\n\n### 2. **面向切面编程（AOP）**\n   - 通过动态代理技术，将横切关注点（如日志、事务、安全）与业务逻辑分离，提升代码复用性和可维护性。\n   - 支持通过注解（如 `@Aspect`）或 XML 配置实现切面。\n\n---\n\n### 3. **模块化设计**\n   - Spring 框架按功能划分为多个模块（如 Core、AOP、DAO、Web、Test），开发者可按需选择，避免冗余依赖。\n   - 核心模块：\n     - **Spring Core**：IoC 容器和基础支持。\n     - **Spring MVC**：基于 MVC 模式的 Web 框架。\n     - **Spring Data**：统一数据访问接口（支持 JDBC、JPA、NoSQL）。\n     - **Spring Security**：认证与授权框架。\n     - **Spring Boot**：快速构建独立应用的脚手架。\n\n---\n\n### 4. **声明式事务管理**\n   - 通过 `@Transactional` 注解或 XML 配置实现事务管理，无需编写繁琐的 `try-catch` 代码。\n   - 支持多种事务策略（如本地事务、分布式事务）。\n\n---\n\n### 5. **简化数据访问**\n   - 提供 `JdbcTemplate` 简化 JDBC 操作。\n   - 集成主流 ORM 框架（如 Hibernate、MyBatis），通过 `@Repository` 注解管理数据访问层。\n\n---\n\n### 6. **灵活的 Web 开发支持**\n   - **Spring MVC**：基于 Servlet API 的 Web 框架，支持 RESTful API 开发。\n   - **Spring WebFlux**：响应式编程模型，适用于高并发场景（如微服务）。\n\n---\n\n### 7. **强大的测试支持**\n   - 提供 `Spring Test` 模块，支持单元测试和集成测试。\n   - 结合 Mock 对象（如 `MockMvc`）模拟 HTTP 请求，简化 Web 层测试。\n\n---\n\n### 8. **与第三方框架无缝集成**\n   - 兼容性极强，支持整合 Hibernate、JPA、Kafka、Redis、Quartz 等主流技术栈。\n   - 提供模板类（如 `RedisTemplate`）简化 API 调用。\n\n---\n\n### 9. **Spring Boot 的快速开发**\n   - **约定优于配置**：自动配置（Auto-configuration）减少 XML 配置。\n   - **内嵌服务器**：支持 Tomcat、Jetty，无需部署 WAR 包。\n   - **Actuator**：提供应用监控和管理端点。\n\n---\n\n### 10. **微服务与云原生支持**\n   - **Spring Cloud**：提供服务发现（Eureka）、配置中心（Config）、熔断器（Hystrix）等微服务组件。\n   - **Spring Cloud Native**：支持容器化部署（Docker、Kubernetes）。\n\n---\n\n### 11. **非侵入式设计**\n   - Spring 的 POJO（Plain Old Java Object）编程模型，业务代码不依赖框架接口，保持轻量级。\n\n---\n\n### 12. **活跃的生态系统**\n   - 庞大的社区和文档支持，持续更新迭代（如 Spring 5 引入响应式编程）。\n   - 丰富的扩展项目（如 Spring Batch、Spring Integration）。\n\n---\n\n### 总结\nSpring 框架通过 **松耦合、模块化、高扩展性** 的设计，解决了企业级开发的复杂性，成为 Java 生态中最流行的框架之一。其衍生项目（如 Spring Boot、Spring Cloud）进一步简化了现代应用开发，覆盖从单体架构到微服务、云原生的全场景需求。","source":"_posts/Spring/Spring.md","raw":"---\ntitle: Spring 框架简介\ndate: 2025-03-05 20:42:22\nupdated: 2025-03-05 20:42:22\ntags: \n - Spring\ncategories: \n - 技术\n - Spring\nkeywords: \n - Spring简介\ndescription: 简要介绍了Spring框架的特性\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n\nSpring 框架是一个开源的、轻量级的、综合性的 Java 开发框架，广泛应用于企业级应用开发。其核心特点如下：\n\n---\n\n### 1. **控制反转（IoC）与依赖注入（DI）**\n   - **IoC（Inversion of Control）**：将对象的创建和管理权交给 Spring 容器，开发者无需手动管理对象生命周期。\n   - **DI（Dependency Injection）**：通过构造器、Setter 方法或注解自动注入依赖，实现组件间的松耦合。\n\n---\n\n### 2. **面向切面编程（AOP）**\n   - 通过动态代理技术，将横切关注点（如日志、事务、安全）与业务逻辑分离，提升代码复用性和可维护性。\n   - 支持通过注解（如 `@Aspect`）或 XML 配置实现切面。\n\n---\n\n### 3. **模块化设计**\n   - Spring 框架按功能划分为多个模块（如 Core、AOP、DAO、Web、Test），开发者可按需选择，避免冗余依赖。\n   - 核心模块：\n     - **Spring Core**：IoC 容器和基础支持。\n     - **Spring MVC**：基于 MVC 模式的 Web 框架。\n     - **Spring Data**：统一数据访问接口（支持 JDBC、JPA、NoSQL）。\n     - **Spring Security**：认证与授权框架。\n     - **Spring Boot**：快速构建独立应用的脚手架。\n\n---\n\n### 4. **声明式事务管理**\n   - 通过 `@Transactional` 注解或 XML 配置实现事务管理，无需编写繁琐的 `try-catch` 代码。\n   - 支持多种事务策略（如本地事务、分布式事务）。\n\n---\n\n### 5. **简化数据访问**\n   - 提供 `JdbcTemplate` 简化 JDBC 操作。\n   - 集成主流 ORM 框架（如 Hibernate、MyBatis），通过 `@Repository` 注解管理数据访问层。\n\n---\n\n### 6. **灵活的 Web 开发支持**\n   - **Spring MVC**：基于 Servlet API 的 Web 框架，支持 RESTful API 开发。\n   - **Spring WebFlux**：响应式编程模型，适用于高并发场景（如微服务）。\n\n---\n\n### 7. **强大的测试支持**\n   - 提供 `Spring Test` 模块，支持单元测试和集成测试。\n   - 结合 Mock 对象（如 `MockMvc`）模拟 HTTP 请求，简化 Web 层测试。\n\n---\n\n### 8. **与第三方框架无缝集成**\n   - 兼容性极强，支持整合 Hibernate、JPA、Kafka、Redis、Quartz 等主流技术栈。\n   - 提供模板类（如 `RedisTemplate`）简化 API 调用。\n\n---\n\n### 9. **Spring Boot 的快速开发**\n   - **约定优于配置**：自动配置（Auto-configuration）减少 XML 配置。\n   - **内嵌服务器**：支持 Tomcat、Jetty，无需部署 WAR 包。\n   - **Actuator**：提供应用监控和管理端点。\n\n---\n\n### 10. **微服务与云原生支持**\n   - **Spring Cloud**：提供服务发现（Eureka）、配置中心（Config）、熔断器（Hystrix）等微服务组件。\n   - **Spring Cloud Native**：支持容器化部署（Docker、Kubernetes）。\n\n---\n\n### 11. **非侵入式设计**\n   - Spring 的 POJO（Plain Old Java Object）编程模型，业务代码不依赖框架接口，保持轻量级。\n\n---\n\n### 12. **活跃的生态系统**\n   - 庞大的社区和文档支持，持续更新迭代（如 Spring 5 引入响应式编程）。\n   - 丰富的扩展项目（如 Spring Batch、Spring Integration）。\n\n---\n\n### 总结\nSpring 框架通过 **松耦合、模块化、高扩展性** 的设计，解决了企业级开发的复杂性，成为 Java 生态中最流行的框架之一。其衍生项目（如 Spring Boot、Spring Cloud）进一步简化了现代应用开发，覆盖从单体架构到微服务、云原生的全场景需求。","slug":"Spring/Spring","published":1,"layout":"post","photos":[],"_id":"cmctwyvas0009x4gr0vakbtpp","content":"<p>Spring 框架是一个开源的、轻量级的、综合性的 Java 开发框架，广泛应用于企业级应用开发。其核心特点如下：</p>\n<hr>\n<h3 id=\"1-控制反转（IoC）与依赖注入（DI）\"><a href=\"#1-控制反转（IoC）与依赖注入（DI）\" class=\"headerlink\" title=\"1. 控制反转（IoC）与依赖注入（DI）\"></a>1. <strong>控制反转（IoC）与依赖注入（DI）</strong></h3><ul>\n<li><strong>IoC（Inversion of Control）</strong>：将对象的创建和管理权交给 Spring 容器，开发者无需手动管理对象生命周期。</li>\n<li><strong>DI（Dependency Injection）</strong>：通过构造器、Setter 方法或注解自动注入依赖，实现组件间的松耦合。</li>\n</ul>\n<hr>\n<h3 id=\"2-面向切面编程（AOP）\"><a href=\"#2-面向切面编程（AOP）\" class=\"headerlink\" title=\"2. 面向切面编程（AOP）\"></a>2. <strong>面向切面编程（AOP）</strong></h3><ul>\n<li>通过动态代理技术，将横切关注点（如日志、事务、安全）与业务逻辑分离，提升代码复用性和可维护性。</li>\n<li>支持通过注解（如 <code>@Aspect</code>）或 XML 配置实现切面。</li>\n</ul>\n<hr>\n<h3 id=\"3-模块化设计\"><a href=\"#3-模块化设计\" class=\"headerlink\" title=\"3. 模块化设计\"></a>3. <strong>模块化设计</strong></h3><ul>\n<li>Spring 框架按功能划分为多个模块（如 Core、AOP、DAO、Web、Test），开发者可按需选择，避免冗余依赖。</li>\n<li>核心模块：<ul>\n<li><strong>Spring Core</strong>：IoC 容器和基础支持。</li>\n<li><strong>Spring MVC</strong>：基于 MVC 模式的 Web 框架。</li>\n<li><strong>Spring Data</strong>：统一数据访问接口（支持 JDBC、JPA、NoSQL）。</li>\n<li><strong>Spring Security</strong>：认证与授权框架。</li>\n<li><strong>Spring Boot</strong>：快速构建独立应用的脚手架。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-声明式事务管理\"><a href=\"#4-声明式事务管理\" class=\"headerlink\" title=\"4. 声明式事务管理\"></a>4. <strong>声明式事务管理</strong></h3><ul>\n<li>通过 <code>@Transactional</code> 注解或 XML 配置实现事务管理，无需编写繁琐的 <code>try-catch</code> 代码。</li>\n<li>支持多种事务策略（如本地事务、分布式事务）。</li>\n</ul>\n<hr>\n<h3 id=\"5-简化数据访问\"><a href=\"#5-简化数据访问\" class=\"headerlink\" title=\"5. 简化数据访问\"></a>5. <strong>简化数据访问</strong></h3><ul>\n<li>提供 <code>JdbcTemplate</code> 简化 JDBC 操作。</li>\n<li>集成主流 ORM 框架（如 Hibernate、MyBatis），通过 <code>@Repository</code> 注解管理数据访问层。</li>\n</ul>\n<hr>\n<h3 id=\"6-灵活的-Web-开发支持\"><a href=\"#6-灵活的-Web-开发支持\" class=\"headerlink\" title=\"6. 灵活的 Web 开发支持\"></a>6. <strong>灵活的 Web 开发支持</strong></h3><ul>\n<li><strong>Spring MVC</strong>：基于 Servlet API 的 Web 框架，支持 RESTful API 开发。</li>\n<li><strong>Spring WebFlux</strong>：响应式编程模型，适用于高并发场景（如微服务）。</li>\n</ul>\n<hr>\n<h3 id=\"7-强大的测试支持\"><a href=\"#7-强大的测试支持\" class=\"headerlink\" title=\"7. 强大的测试支持\"></a>7. <strong>强大的测试支持</strong></h3><ul>\n<li>提供 <code>Spring Test</code> 模块，支持单元测试和集成测试。</li>\n<li>结合 Mock 对象（如 <code>MockMvc</code>）模拟 HTTP 请求，简化 Web 层测试。</li>\n</ul>\n<hr>\n<h3 id=\"8-与第三方框架无缝集成\"><a href=\"#8-与第三方框架无缝集成\" class=\"headerlink\" title=\"8. 与第三方框架无缝集成\"></a>8. <strong>与第三方框架无缝集成</strong></h3><ul>\n<li>兼容性极强，支持整合 Hibernate、JPA、Kafka、Redis、Quartz 等主流技术栈。</li>\n<li>提供模板类（如 <code>RedisTemplate</code>）简化 API 调用。</li>\n</ul>\n<hr>\n<h3 id=\"9-Spring-Boot-的快速开发\"><a href=\"#9-Spring-Boot-的快速开发\" class=\"headerlink\" title=\"9. Spring Boot 的快速开发\"></a>9. <strong>Spring Boot 的快速开发</strong></h3><ul>\n<li><strong>约定优于配置</strong>：自动配置（Auto-configuration）减少 XML 配置。</li>\n<li><strong>内嵌服务器</strong>：支持 Tomcat、Jetty，无需部署 WAR 包。</li>\n<li><strong>Actuator</strong>：提供应用监控和管理端点。</li>\n</ul>\n<hr>\n<h3 id=\"10-微服务与云原生支持\"><a href=\"#10-微服务与云原生支持\" class=\"headerlink\" title=\"10. 微服务与云原生支持\"></a>10. <strong>微服务与云原生支持</strong></h3><ul>\n<li><strong>Spring Cloud</strong>：提供服务发现（Eureka）、配置中心（Config）、熔断器（Hystrix）等微服务组件。</li>\n<li><strong>Spring Cloud Native</strong>：支持容器化部署（Docker、Kubernetes）。</li>\n</ul>\n<hr>\n<h3 id=\"11-非侵入式设计\"><a href=\"#11-非侵入式设计\" class=\"headerlink\" title=\"11. 非侵入式设计\"></a>11. <strong>非侵入式设计</strong></h3><ul>\n<li>Spring 的 POJO（Plain Old Java Object）编程模型，业务代码不依赖框架接口，保持轻量级。</li>\n</ul>\n<hr>\n<h3 id=\"12-活跃的生态系统\"><a href=\"#12-活跃的生态系统\" class=\"headerlink\" title=\"12. 活跃的生态系统\"></a>12. <strong>活跃的生态系统</strong></h3><ul>\n<li>庞大的社区和文档支持，持续更新迭代（如 Spring 5 引入响应式编程）。</li>\n<li>丰富的扩展项目（如 Spring Batch、Spring Integration）。</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Spring 框架通过 <strong>松耦合、模块化、高扩展性</strong> 的设计，解决了企业级开发的复杂性，成为 Java 生态中最流行的框架之一。其衍生项目（如 Spring Boot、Spring Cloud）进一步简化了现代应用开发，覆盖从单体架构到微服务、云原生的全场景需求。</p>\n","excerpt":"","more":"<p>Spring 框架是一个开源的、轻量级的、综合性的 Java 开发框架，广泛应用于企业级应用开发。其核心特点如下：</p>\n<hr>\n<h3 id=\"1-控制反转（IoC）与依赖注入（DI）\"><a href=\"#1-控制反转（IoC）与依赖注入（DI）\" class=\"headerlink\" title=\"1. 控制反转（IoC）与依赖注入（DI）\"></a>1. <strong>控制反转（IoC）与依赖注入（DI）</strong></h3><ul>\n<li><strong>IoC（Inversion of Control）</strong>：将对象的创建和管理权交给 Spring 容器，开发者无需手动管理对象生命周期。</li>\n<li><strong>DI（Dependency Injection）</strong>：通过构造器、Setter 方法或注解自动注入依赖，实现组件间的松耦合。</li>\n</ul>\n<hr>\n<h3 id=\"2-面向切面编程（AOP）\"><a href=\"#2-面向切面编程（AOP）\" class=\"headerlink\" title=\"2. 面向切面编程（AOP）\"></a>2. <strong>面向切面编程（AOP）</strong></h3><ul>\n<li>通过动态代理技术，将横切关注点（如日志、事务、安全）与业务逻辑分离，提升代码复用性和可维护性。</li>\n<li>支持通过注解（如 <code>@Aspect</code>）或 XML 配置实现切面。</li>\n</ul>\n<hr>\n<h3 id=\"3-模块化设计\"><a href=\"#3-模块化设计\" class=\"headerlink\" title=\"3. 模块化设计\"></a>3. <strong>模块化设计</strong></h3><ul>\n<li>Spring 框架按功能划分为多个模块（如 Core、AOP、DAO、Web、Test），开发者可按需选择，避免冗余依赖。</li>\n<li>核心模块：<ul>\n<li><strong>Spring Core</strong>：IoC 容器和基础支持。</li>\n<li><strong>Spring MVC</strong>：基于 MVC 模式的 Web 框架。</li>\n<li><strong>Spring Data</strong>：统一数据访问接口（支持 JDBC、JPA、NoSQL）。</li>\n<li><strong>Spring Security</strong>：认证与授权框架。</li>\n<li><strong>Spring Boot</strong>：快速构建独立应用的脚手架。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-声明式事务管理\"><a href=\"#4-声明式事务管理\" class=\"headerlink\" title=\"4. 声明式事务管理\"></a>4. <strong>声明式事务管理</strong></h3><ul>\n<li>通过 <code>@Transactional</code> 注解或 XML 配置实现事务管理，无需编写繁琐的 <code>try-catch</code> 代码。</li>\n<li>支持多种事务策略（如本地事务、分布式事务）。</li>\n</ul>\n<hr>\n<h3 id=\"5-简化数据访问\"><a href=\"#5-简化数据访问\" class=\"headerlink\" title=\"5. 简化数据访问\"></a>5. <strong>简化数据访问</strong></h3><ul>\n<li>提供 <code>JdbcTemplate</code> 简化 JDBC 操作。</li>\n<li>集成主流 ORM 框架（如 Hibernate、MyBatis），通过 <code>@Repository</code> 注解管理数据访问层。</li>\n</ul>\n<hr>\n<h3 id=\"6-灵活的-Web-开发支持\"><a href=\"#6-灵活的-Web-开发支持\" class=\"headerlink\" title=\"6. 灵活的 Web 开发支持\"></a>6. <strong>灵活的 Web 开发支持</strong></h3><ul>\n<li><strong>Spring MVC</strong>：基于 Servlet API 的 Web 框架，支持 RESTful API 开发。</li>\n<li><strong>Spring WebFlux</strong>：响应式编程模型，适用于高并发场景（如微服务）。</li>\n</ul>\n<hr>\n<h3 id=\"7-强大的测试支持\"><a href=\"#7-强大的测试支持\" class=\"headerlink\" title=\"7. 强大的测试支持\"></a>7. <strong>强大的测试支持</strong></h3><ul>\n<li>提供 <code>Spring Test</code> 模块，支持单元测试和集成测试。</li>\n<li>结合 Mock 对象（如 <code>MockMvc</code>）模拟 HTTP 请求，简化 Web 层测试。</li>\n</ul>\n<hr>\n<h3 id=\"8-与第三方框架无缝集成\"><a href=\"#8-与第三方框架无缝集成\" class=\"headerlink\" title=\"8. 与第三方框架无缝集成\"></a>8. <strong>与第三方框架无缝集成</strong></h3><ul>\n<li>兼容性极强，支持整合 Hibernate、JPA、Kafka、Redis、Quartz 等主流技术栈。</li>\n<li>提供模板类（如 <code>RedisTemplate</code>）简化 API 调用。</li>\n</ul>\n<hr>\n<h3 id=\"9-Spring-Boot-的快速开发\"><a href=\"#9-Spring-Boot-的快速开发\" class=\"headerlink\" title=\"9. Spring Boot 的快速开发\"></a>9. <strong>Spring Boot 的快速开发</strong></h3><ul>\n<li><strong>约定优于配置</strong>：自动配置（Auto-configuration）减少 XML 配置。</li>\n<li><strong>内嵌服务器</strong>：支持 Tomcat、Jetty，无需部署 WAR 包。</li>\n<li><strong>Actuator</strong>：提供应用监控和管理端点。</li>\n</ul>\n<hr>\n<h3 id=\"10-微服务与云原生支持\"><a href=\"#10-微服务与云原生支持\" class=\"headerlink\" title=\"10. 微服务与云原生支持\"></a>10. <strong>微服务与云原生支持</strong></h3><ul>\n<li><strong>Spring Cloud</strong>：提供服务发现（Eureka）、配置中心（Config）、熔断器（Hystrix）等微服务组件。</li>\n<li><strong>Spring Cloud Native</strong>：支持容器化部署（Docker、Kubernetes）。</li>\n</ul>\n<hr>\n<h3 id=\"11-非侵入式设计\"><a href=\"#11-非侵入式设计\" class=\"headerlink\" title=\"11. 非侵入式设计\"></a>11. <strong>非侵入式设计</strong></h3><ul>\n<li>Spring 的 POJO（Plain Old Java Object）编程模型，业务代码不依赖框架接口，保持轻量级。</li>\n</ul>\n<hr>\n<h3 id=\"12-活跃的生态系统\"><a href=\"#12-活跃的生态系统\" class=\"headerlink\" title=\"12. 活跃的生态系统\"></a>12. <strong>活跃的生态系统</strong></h3><ul>\n<li>庞大的社区和文档支持，持续更新迭代（如 Spring 5 引入响应式编程）。</li>\n<li>丰富的扩展项目（如 Spring Batch、Spring Integration）。</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Spring 框架通过 <strong>松耦合、模块化、高扩展性</strong> 的设计，解决了企业级开发的复杂性，成为 Java 生态中最流行的框架之一。其衍生项目（如 Spring Boot、Spring Cloud）进一步简化了现代应用开发，覆盖从单体架构到微服务、云原生的全场景需求。</p>\n"},{"title":"flask+layui基础项目架构","date":"2025-04-05T07:16:54.000Z","updated":"2025-04-05T07:16:54.000Z","keywords":["flask","layui"],"description":"简述了docker容器的重启策略","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"## **Flask** + **Layui** 基础项目架构\n**Flask**（后端）和 **Layui**（前端UI框架）的典型项目结构设计，兼顾模块化和可维护性：\n\n---\n\n### **项目结构示例**\n\n```bash\n/my_flask_layui_project\n├── app/                  # Flask核心代码\n│   ├── __init__.py       # 应用工厂\n│   ├── routes/           # 路由（使用蓝图）\n│   │   ├── home.py       # 首页路由\n│   │   ├── user.py       # 用户管理路由\n│   │   └── api.py        # 数据接口API（供Layui表格/表单调用）\n│   ├── static/           # 静态资源\n│   │   ├── layui/        # Layui框架文件（从官网下载的完整包）\n│   │   │   ├── css/\n│   │   │   ├── js/\n│   │   │   └── fonts/\n│   │   ├── css/          # 自定义CSS\n│   │   │   └── style.css\n│   │   └── js/           # 自定义JavaScript\n│   │       └── main.js\n│   ├── templates/        # Jinja2模板\n│   │   ├── layout.html   # 基础模板（引入Layui）\n│   │   ├── home/         # 页面模块\n│   │   │   └── index.html\n│   │   └── user/\n│   │       ├── list.html # 用户列表（使用Layui表格）\n│   │       └── edit.html # 用户编辑（使用Layui表单）\n│   ├── models.py         # 数据库模型\n│   └── config.py         # 配置文件\n│\n├── tests/                # 单元测试\n├── venv/                 # 虚拟环境\n├── requirements.txt      # 依赖列表\n└── run.py                # 启动脚本\n```\n\n---\n\n### **关键文件说明**\n\n#### **1. Flask相关**\n- **`app/__init__.py`**：应用工厂，初始化Flask实例并注册蓝图。\n  ```python\n  from flask import Flask\n  from .config import Config\n\n  def create_app():\n      app = Flask(__name__)\n      app.config.from_object(Config)\n\n      # 注册蓝图\n      from .routes.home import home_bp\n      from .routes.user import user_bp\n      from .routes.api import api_bp\n      app.register_blueprint(home_bp)\n      app.register_blueprint(user_bp, url_prefix='/user')\n      app.register_blueprint(api_bp, url_prefix='/api')\n\n      return app\n  ```\n\n- **`routes/api.py`**：提供Layui组件需要的数据接口。\n  ```python\n  from flask import Blueprint, jsonify\n  api_bp = Blueprint('api', __name__)\n\n  @api_bp.route('/user/list')\n  def user_list():\n      # 返回Layui表格要求的格式：{ \"code\":0, \"msg\":\"\", \"count\":100, \"data\":[...] }\n      data = [{\"id\":1, \"username\":\"admin\"}, ...]\n      return jsonify(code=0, msg=\"success\", count=len(data), data=data)\n  ```\n\n---\n\n#### **2. Layui相关**\n- **`static/layui/`**：存放Layui官方库（需从[官网](https://www.layuiweb.com/)下载完整包）。\n- **`templates/layout.html`**：基础模板，统一引入Layui资源。\n  ```html\n  <!DOCTYPE html>\n  <html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{% block title %}{% endblock %}</title>\n    <!-- 引入 jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <!-- 引入Layui CSS -->\n    <link rel=\"stylesheet\" href=\"../static/layui/css/layui.css\">\n    <!-- 引入Layui JS -->\n    <script src=\"../static/layui/layui.js\"></script>\n</head>\n<body>\n{% block content %}{% endblock %}\n\n</body>\n  </html>\n  ```\n\n- **`templates/user/list.html`**：使用Layui表格的页面。\n  ```html\n  {% extends \"layout.html\" %}\n  {% block title %}用户列表{% endblock %}\n  {% block content %}\n  <div class=\"layui-card\">\n      <div class=\"layui-card-body\">\n          <table id=\"userTable\" lay-filter=\"userTable\"></table>\n      </div>\n  </div>\n  <script>\n      layui.table.render({\n          elem: '#userTable',\n          cols: [[\n              {field: 'id', title: 'ID'},\n              {field: 'username', title: '用户名'}\n          ]]\n      });\n  </script>\n  {% endblock %}\n  ```\n\n---\n\n### **前后端交互示例**\n1. **Layui表格数据加载**：通过Flask的`/api/user/list`接口返回符合Layui格式的JSON数据。\n2. **表单提交**：使用Layui的`form.on('submit')`监听事件，通过AJAX调用Flask接口。\n3. **静态资源管理**：所有Layui文件通过`static/layui/`目录统一管理，模板中用`url_for`动态生成路径。\n\n---\n\n### **最佳实践**\n1. **模块化开发**：使用Flask蓝图拆分功能（如用户管理、API模块）。\n2. **前后端分离**：API接口返回JSON数据，前端Layui负责渲染。\n3. **版本控制**：将Layui库文件锁定特定版本（如`static/layui-v2.8.11/`）。\n4. **生产优化**：\n   - 使用Nginx托管静态文件（减少Flask负担）。\n   - 通过`FLASK_ENV=production`禁用调试模式。\n\n---\n\n此结构清晰划分了前后端职责，适合中小型项目快速开发。如需扩展，可进一步添加`utils`（工具类）、`middlewares`（中间件）等目录。","source":"_posts/flask-layui基础项目架构/flask-layui基础项目架构.md","raw":"---\ntitle: flask+layui基础项目架构\ndate: 2025-04-05 15:16:54\nupdated: 2025-04-05 15:16:54\ntags: \n - flask \n - layui\ncategories: \n - 技术\n - flask\nkeywords: \n - flask\n - layui\ndescription: 简述了docker容器的重启策略\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n## **Flask** + **Layui** 基础项目架构\n**Flask**（后端）和 **Layui**（前端UI框架）的典型项目结构设计，兼顾模块化和可维护性：\n\n---\n\n### **项目结构示例**\n\n```bash\n/my_flask_layui_project\n├── app/                  # Flask核心代码\n│   ├── __init__.py       # 应用工厂\n│   ├── routes/           # 路由（使用蓝图）\n│   │   ├── home.py       # 首页路由\n│   │   ├── user.py       # 用户管理路由\n│   │   └── api.py        # 数据接口API（供Layui表格/表单调用）\n│   ├── static/           # 静态资源\n│   │   ├── layui/        # Layui框架文件（从官网下载的完整包）\n│   │   │   ├── css/\n│   │   │   ├── js/\n│   │   │   └── fonts/\n│   │   ├── css/          # 自定义CSS\n│   │   │   └── style.css\n│   │   └── js/           # 自定义JavaScript\n│   │       └── main.js\n│   ├── templates/        # Jinja2模板\n│   │   ├── layout.html   # 基础模板（引入Layui）\n│   │   ├── home/         # 页面模块\n│   │   │   └── index.html\n│   │   └── user/\n│   │       ├── list.html # 用户列表（使用Layui表格）\n│   │       └── edit.html # 用户编辑（使用Layui表单）\n│   ├── models.py         # 数据库模型\n│   └── config.py         # 配置文件\n│\n├── tests/                # 单元测试\n├── venv/                 # 虚拟环境\n├── requirements.txt      # 依赖列表\n└── run.py                # 启动脚本\n```\n\n---\n\n### **关键文件说明**\n\n#### **1. Flask相关**\n- **`app/__init__.py`**：应用工厂，初始化Flask实例并注册蓝图。\n  ```python\n  from flask import Flask\n  from .config import Config\n\n  def create_app():\n      app = Flask(__name__)\n      app.config.from_object(Config)\n\n      # 注册蓝图\n      from .routes.home import home_bp\n      from .routes.user import user_bp\n      from .routes.api import api_bp\n      app.register_blueprint(home_bp)\n      app.register_blueprint(user_bp, url_prefix='/user')\n      app.register_blueprint(api_bp, url_prefix='/api')\n\n      return app\n  ```\n\n- **`routes/api.py`**：提供Layui组件需要的数据接口。\n  ```python\n  from flask import Blueprint, jsonify\n  api_bp = Blueprint('api', __name__)\n\n  @api_bp.route('/user/list')\n  def user_list():\n      # 返回Layui表格要求的格式：{ \"code\":0, \"msg\":\"\", \"count\":100, \"data\":[...] }\n      data = [{\"id\":1, \"username\":\"admin\"}, ...]\n      return jsonify(code=0, msg=\"success\", count=len(data), data=data)\n  ```\n\n---\n\n#### **2. Layui相关**\n- **`static/layui/`**：存放Layui官方库（需从[官网](https://www.layuiweb.com/)下载完整包）。\n- **`templates/layout.html`**：基础模板，统一引入Layui资源。\n  ```html\n  <!DOCTYPE html>\n  <html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{% block title %}{% endblock %}</title>\n    <!-- 引入 jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <!-- 引入Layui CSS -->\n    <link rel=\"stylesheet\" href=\"../static/layui/css/layui.css\">\n    <!-- 引入Layui JS -->\n    <script src=\"../static/layui/layui.js\"></script>\n</head>\n<body>\n{% block content %}{% endblock %}\n\n</body>\n  </html>\n  ```\n\n- **`templates/user/list.html`**：使用Layui表格的页面。\n  ```html\n  {% extends \"layout.html\" %}\n  {% block title %}用户列表{% endblock %}\n  {% block content %}\n  <div class=\"layui-card\">\n      <div class=\"layui-card-body\">\n          <table id=\"userTable\" lay-filter=\"userTable\"></table>\n      </div>\n  </div>\n  <script>\n      layui.table.render({\n          elem: '#userTable',\n          cols: [[\n              {field: 'id', title: 'ID'},\n              {field: 'username', title: '用户名'}\n          ]]\n      });\n  </script>\n  {% endblock %}\n  ```\n\n---\n\n### **前后端交互示例**\n1. **Layui表格数据加载**：通过Flask的`/api/user/list`接口返回符合Layui格式的JSON数据。\n2. **表单提交**：使用Layui的`form.on('submit')`监听事件，通过AJAX调用Flask接口。\n3. **静态资源管理**：所有Layui文件通过`static/layui/`目录统一管理，模板中用`url_for`动态生成路径。\n\n---\n\n### **最佳实践**\n1. **模块化开发**：使用Flask蓝图拆分功能（如用户管理、API模块）。\n2. **前后端分离**：API接口返回JSON数据，前端Layui负责渲染。\n3. **版本控制**：将Layui库文件锁定特定版本（如`static/layui-v2.8.11/`）。\n4. **生产优化**：\n   - 使用Nginx托管静态文件（减少Flask负担）。\n   - 通过`FLASK_ENV=production`禁用调试模式。\n\n---\n\n此结构清晰划分了前后端职责，适合中小型项目快速开发。如需扩展，可进一步添加`utils`（工具类）、`middlewares`（中间件）等目录。","slug":"flask-layui基础项目架构/flask-layui基础项目架构","published":1,"layout":"post","photos":[],"_id":"cmctwyvas000ax4grcof2ddle","content":"<h2 id=\"Flask-Layui-基础项目架构\"><a href=\"#Flask-Layui-基础项目架构\" class=\"headerlink\" title=\"Flask + Layui 基础项目架构\"></a><strong>Flask</strong> + <strong>Layui</strong> 基础项目架构</h2><p><strong>Flask</strong>（后端）和 <strong>Layui</strong>（前端UI框架）的典型项目结构设计，兼顾模块化和可维护性：</p>\n<hr>\n<h3 id=\"项目结构示例\"><a href=\"#项目结构示例\" class=\"headerlink\" title=\"项目结构示例\"></a><strong>项目结构示例</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/my_flask_layui_project</span><br><span class=\"line\">├── app/                  <span class=\"comment\"># Flask核心代码</span></span><br><span class=\"line\">│   ├── __init__.py       <span class=\"comment\"># 应用工厂</span></span><br><span class=\"line\">│   ├── routes/           <span class=\"comment\"># 路由（使用蓝图）</span></span><br><span class=\"line\">│   │   ├── home.py       <span class=\"comment\"># 首页路由</span></span><br><span class=\"line\">│   │   ├── user.py       <span class=\"comment\"># 用户管理路由</span></span><br><span class=\"line\">│   │   └── api.py        <span class=\"comment\"># 数据接口API（供Layui表格/表单调用）</span></span><br><span class=\"line\">│   ├── static/           <span class=\"comment\"># 静态资源</span></span><br><span class=\"line\">│   │   ├── layui/        <span class=\"comment\"># Layui框架文件（从官网下载的完整包）</span></span><br><span class=\"line\">│   │   │   ├── css/</span><br><span class=\"line\">│   │   │   ├── js/</span><br><span class=\"line\">│   │   │   └── fonts/</span><br><span class=\"line\">│   │   ├── css/          <span class=\"comment\"># 自定义CSS</span></span><br><span class=\"line\">│   │   │   └── style.css</span><br><span class=\"line\">│   │   └── js/           <span class=\"comment\"># 自定义JavaScript</span></span><br><span class=\"line\">│   │       └── main.js</span><br><span class=\"line\">│   ├── templates/        <span class=\"comment\"># Jinja2模板</span></span><br><span class=\"line\">│   │   ├── layout.html   <span class=\"comment\"># 基础模板（引入Layui）</span></span><br><span class=\"line\">│   │   ├── home/         <span class=\"comment\"># 页面模块</span></span><br><span class=\"line\">│   │   │   └── index.html</span><br><span class=\"line\">│   │   └── user/</span><br><span class=\"line\">│   │       ├── list.html <span class=\"comment\"># 用户列表（使用Layui表格）</span></span><br><span class=\"line\">│   │       └── edit.html <span class=\"comment\"># 用户编辑（使用Layui表单）</span></span><br><span class=\"line\">│   ├── models.py         <span class=\"comment\"># 数据库模型</span></span><br><span class=\"line\">│   └── config.py         <span class=\"comment\"># 配置文件</span></span><br><span class=\"line\">│</span><br><span class=\"line\">├── tests/                <span class=\"comment\"># 单元测试</span></span><br><span class=\"line\">├── venv/                 <span class=\"comment\"># 虚拟环境</span></span><br><span class=\"line\">├── requirements.txt      <span class=\"comment\"># 依赖列表</span></span><br><span class=\"line\">└── run.py                <span class=\"comment\"># 启动脚本</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键文件说明\"><a href=\"#关键文件说明\" class=\"headerlink\" title=\"关键文件说明\"></a><strong>关键文件说明</strong></h3><h4 id=\"1-Flask相关\"><a href=\"#1-Flask相关\" class=\"headerlink\" title=\"1. Flask相关\"></a><strong>1. Flask相关</strong></h4><ul>\n<li><p>**<code>app/__init__.py</code>**：应用工厂，初始化Flask实例并注册蓝图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> .config <span class=\"keyword\">import</span> Config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_app</span>():</span><br><span class=\"line\">    app = Flask(__name__)</span><br><span class=\"line\">    app.config.from_object(Config)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 注册蓝图</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> .routes.home <span class=\"keyword\">import</span> home_bp</span><br><span class=\"line\">    <span class=\"keyword\">from</span> .routes.user <span class=\"keyword\">import</span> user_bp</span><br><span class=\"line\">    <span class=\"keyword\">from</span> .routes.api <span class=\"keyword\">import</span> api_bp</span><br><span class=\"line\">    app.register_blueprint(home_bp)</span><br><span class=\"line\">    app.register_blueprint(user_bp, url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\">    app.register_blueprint(api_bp, url_prefix=<span class=\"string\">&#x27;/api&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>routes/api.py</code>**：提供Layui组件需要的数据接口。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint, jsonify</span><br><span class=\"line\">api_bp = Blueprint(<span class=\"string\">&#x27;api&#x27;</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@api_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/user/list&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">user_list</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 返回Layui表格要求的格式：&#123; &quot;code&quot;:0, &quot;msg&quot;:&quot;&quot;, &quot;count&quot;:100, &quot;data&quot;:[...] &#125;</span></span><br><span class=\"line\">    data = [&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">1</span>, <span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;admin&quot;</span>&#125;, ...]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(code=<span class=\"number\">0</span>, msg=<span class=\"string\">&quot;success&quot;</span>, count=<span class=\"built_in\">len</span>(data), data=data)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h4 id=\"2-Layui相关\"><a href=\"#2-Layui相关\" class=\"headerlink\" title=\"2. Layui相关\"></a><strong>2. Layui相关</strong></h4><ul>\n<li><p>**<code>static/layui/</code>**：存放Layui官方库（需从<a href=\"https://www.layuiweb.com/\">官网</a>下载完整包）。</p>\n</li>\n<li><p>**<code>templates/layout.html</code>**：基础模板，统一引入Layui资源。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入 jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入Layui CSS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../static/layui/css/layui.css&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入Layui JS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../static/layui/layui.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>templates/user/list.html</code>**：使用Layui表格的页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class=\"line\">&#123;% block title %&#125;用户列表&#123;% endblock %&#125;</span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;layui-card&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userTable&quot;</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">&quot;userTable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    layui.<span class=\"property\">table</span>.<span class=\"title function_\">render</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">elem</span>: <span class=\"string\">&#x27;#userTable&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">cols</span>: [[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;<span class=\"attr\">field</span>: <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;ID&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;<span class=\"attr\">field</span>: <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;用户名&#x27;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"前后端交互示例\"><a href=\"#前后端交互示例\" class=\"headerlink\" title=\"前后端交互示例\"></a><strong>前后端交互示例</strong></h3><ol>\n<li><strong>Layui表格数据加载</strong>：通过Flask的<code>/api/user/list</code>接口返回符合Layui格式的JSON数据。</li>\n<li><strong>表单提交</strong>：使用Layui的<code>form.on(&#39;submit&#39;)</code>监听事件，通过AJAX调用Flask接口。</li>\n<li><strong>静态资源管理</strong>：所有Layui文件通过<code>static/layui/</code>目录统一管理，模板中用<code>url_for</code>动态生成路径。</li>\n</ol>\n<hr>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a><strong>最佳实践</strong></h3><ol>\n<li><strong>模块化开发</strong>：使用Flask蓝图拆分功能（如用户管理、API模块）。</li>\n<li><strong>前后端分离</strong>：API接口返回JSON数据，前端Layui负责渲染。</li>\n<li><strong>版本控制</strong>：将Layui库文件锁定特定版本（如<code>static/layui-v2.8.11/</code>）。</li>\n<li><strong>生产优化</strong>：<ul>\n<li>使用Nginx托管静态文件（减少Flask负担）。</li>\n<li>通过<code>FLASK_ENV=production</code>禁用调试模式。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>此结构清晰划分了前后端职责，适合中小型项目快速开发。如需扩展，可进一步添加<code>utils</code>（工具类）、<code>middlewares</code>（中间件）等目录。</p>\n","excerpt":"","more":"<h2 id=\"Flask-Layui-基础项目架构\"><a href=\"#Flask-Layui-基础项目架构\" class=\"headerlink\" title=\"Flask + Layui 基础项目架构\"></a><strong>Flask</strong> + <strong>Layui</strong> 基础项目架构</h2><p><strong>Flask</strong>（后端）和 <strong>Layui</strong>（前端UI框架）的典型项目结构设计，兼顾模块化和可维护性：</p>\n<hr>\n<h3 id=\"项目结构示例\"><a href=\"#项目结构示例\" class=\"headerlink\" title=\"项目结构示例\"></a><strong>项目结构示例</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/my_flask_layui_project</span><br><span class=\"line\">├── app/                  <span class=\"comment\"># Flask核心代码</span></span><br><span class=\"line\">│   ├── __init__.py       <span class=\"comment\"># 应用工厂</span></span><br><span class=\"line\">│   ├── routes/           <span class=\"comment\"># 路由（使用蓝图）</span></span><br><span class=\"line\">│   │   ├── home.py       <span class=\"comment\"># 首页路由</span></span><br><span class=\"line\">│   │   ├── user.py       <span class=\"comment\"># 用户管理路由</span></span><br><span class=\"line\">│   │   └── api.py        <span class=\"comment\"># 数据接口API（供Layui表格/表单调用）</span></span><br><span class=\"line\">│   ├── static/           <span class=\"comment\"># 静态资源</span></span><br><span class=\"line\">│   │   ├── layui/        <span class=\"comment\"># Layui框架文件（从官网下载的完整包）</span></span><br><span class=\"line\">│   │   │   ├── css/</span><br><span class=\"line\">│   │   │   ├── js/</span><br><span class=\"line\">│   │   │   └── fonts/</span><br><span class=\"line\">│   │   ├── css/          <span class=\"comment\"># 自定义CSS</span></span><br><span class=\"line\">│   │   │   └── style.css</span><br><span class=\"line\">│   │   └── js/           <span class=\"comment\"># 自定义JavaScript</span></span><br><span class=\"line\">│   │       └── main.js</span><br><span class=\"line\">│   ├── templates/        <span class=\"comment\"># Jinja2模板</span></span><br><span class=\"line\">│   │   ├── layout.html   <span class=\"comment\"># 基础模板（引入Layui）</span></span><br><span class=\"line\">│   │   ├── home/         <span class=\"comment\"># 页面模块</span></span><br><span class=\"line\">│   │   │   └── index.html</span><br><span class=\"line\">│   │   └── user/</span><br><span class=\"line\">│   │       ├── list.html <span class=\"comment\"># 用户列表（使用Layui表格）</span></span><br><span class=\"line\">│   │       └── edit.html <span class=\"comment\"># 用户编辑（使用Layui表单）</span></span><br><span class=\"line\">│   ├── models.py         <span class=\"comment\"># 数据库模型</span></span><br><span class=\"line\">│   └── config.py         <span class=\"comment\"># 配置文件</span></span><br><span class=\"line\">│</span><br><span class=\"line\">├── tests/                <span class=\"comment\"># 单元测试</span></span><br><span class=\"line\">├── venv/                 <span class=\"comment\"># 虚拟环境</span></span><br><span class=\"line\">├── requirements.txt      <span class=\"comment\"># 依赖列表</span></span><br><span class=\"line\">└── run.py                <span class=\"comment\"># 启动脚本</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键文件说明\"><a href=\"#关键文件说明\" class=\"headerlink\" title=\"关键文件说明\"></a><strong>关键文件说明</strong></h3><h4 id=\"1-Flask相关\"><a href=\"#1-Flask相关\" class=\"headerlink\" title=\"1. Flask相关\"></a><strong>1. Flask相关</strong></h4><ul>\n<li><p>**<code>app/__init__.py</code>**：应用工厂，初始化Flask实例并注册蓝图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> .config <span class=\"keyword\">import</span> Config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_app</span>():</span><br><span class=\"line\">    app = Flask(__name__)</span><br><span class=\"line\">    app.config.from_object(Config)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 注册蓝图</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> .routes.home <span class=\"keyword\">import</span> home_bp</span><br><span class=\"line\">    <span class=\"keyword\">from</span> .routes.user <span class=\"keyword\">import</span> user_bp</span><br><span class=\"line\">    <span class=\"keyword\">from</span> .routes.api <span class=\"keyword\">import</span> api_bp</span><br><span class=\"line\">    app.register_blueprint(home_bp)</span><br><span class=\"line\">    app.register_blueprint(user_bp, url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\">    app.register_blueprint(api_bp, url_prefix=<span class=\"string\">&#x27;/api&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>routes/api.py</code>**：提供Layui组件需要的数据接口。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint, jsonify</span><br><span class=\"line\">api_bp = Blueprint(<span class=\"string\">&#x27;api&#x27;</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@api_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/user/list&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">user_list</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 返回Layui表格要求的格式：&#123; &quot;code&quot;:0, &quot;msg&quot;:&quot;&quot;, &quot;count&quot;:100, &quot;data&quot;:[...] &#125;</span></span><br><span class=\"line\">    data = [&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">1</span>, <span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;admin&quot;</span>&#125;, ...]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(code=<span class=\"number\">0</span>, msg=<span class=\"string\">&quot;success&quot;</span>, count=<span class=\"built_in\">len</span>(data), data=data)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h4 id=\"2-Layui相关\"><a href=\"#2-Layui相关\" class=\"headerlink\" title=\"2. Layui相关\"></a><strong>2. Layui相关</strong></h4><ul>\n<li><p>**<code>static/layui/</code>**：存放Layui官方库（需从<a href=\"https://www.layuiweb.com/\">官网</a>下载完整包）。</p>\n</li>\n<li><p>**<code>templates/layout.html</code>**：基础模板，统一引入Layui资源。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入 jQuery --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入Layui CSS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../static/layui/css/layui.css&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入Layui JS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../static/layui/layui.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>templates/user/list.html</code>**：使用Layui表格的页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class=\"line\">&#123;% block title %&#125;用户列表&#123;% endblock %&#125;</span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;layui-card&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userTable&quot;</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">&quot;userTable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    layui.<span class=\"property\">table</span>.<span class=\"title function_\">render</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">elem</span>: <span class=\"string\">&#x27;#userTable&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">cols</span>: [[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;<span class=\"attr\">field</span>: <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;ID&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;<span class=\"attr\">field</span>: <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;用户名&#x27;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"前后端交互示例\"><a href=\"#前后端交互示例\" class=\"headerlink\" title=\"前后端交互示例\"></a><strong>前后端交互示例</strong></h3><ol>\n<li><strong>Layui表格数据加载</strong>：通过Flask的<code>/api/user/list</code>接口返回符合Layui格式的JSON数据。</li>\n<li><strong>表单提交</strong>：使用Layui的<code>form.on(&#39;submit&#39;)</code>监听事件，通过AJAX调用Flask接口。</li>\n<li><strong>静态资源管理</strong>：所有Layui文件通过<code>static/layui/</code>目录统一管理，模板中用<code>url_for</code>动态生成路径。</li>\n</ol>\n<hr>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a><strong>最佳实践</strong></h3><ol>\n<li><strong>模块化开发</strong>：使用Flask蓝图拆分功能（如用户管理、API模块）。</li>\n<li><strong>前后端分离</strong>：API接口返回JSON数据，前端Layui负责渲染。</li>\n<li><strong>版本控制</strong>：将Layui库文件锁定特定版本（如<code>static/layui-v2.8.11/</code>）。</li>\n<li><strong>生产优化</strong>：<ul>\n<li>使用Nginx托管静态文件（减少Flask负担）。</li>\n<li>通过<code>FLASK_ENV=production</code>禁用调试模式。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>此结构清晰划分了前后端职责，适合中小型项目快速开发。如需扩展，可进一步添加<code>utils</code>（工具类）、<code>middlewares</code>（中间件）等目录。</p>\n"},{"title":"docker四种重启方式","date":"2025-03-13T10:46:37.000Z","updated":"2025-03-13T10:46:37.000Z","keywords":["docker","reboot"],"description":"简述了docker容器的重启策略","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"## Docker容器的重启策略\nDocker 容器的重启策略用于控制容器在退出或发生故障时的自动重启行为。通过合理配置重启策略，可以提高服务的可靠性。以下是 Docker 支持的四种重启策略及其详细说明：\n\n---\n\n### **1. 重启策略类型**\n#### **`no`（默认策略）**\n- **行为**：容器不会自动重启。\n- **适用场景**：临时任务或需要手动控制的容器。\n- **示例**：\n  ```bash\n  docker run --restart=no my-image\n  ```\n\n#### **`on-failure[:max-retries]`**\n- **行为**：仅当容器以**非零退出码**退出时自动重启（例如程序崩溃或错误）。可选的 `max-retries` 指定最大重启次数。\n- **适用场景**：需要容错但避免无限重启的服务。\n- **示例**：\n  ```bash\n  docker run --restart=on-failure:5 my-image  # 最多重启5次\n  ```\n\n#### **`always`**\n- **行为**：无论退出码是什么（包括手动停止 `docker stop`），容器都会自动重启。如果被手动停止，当 Docker 守护进程重启时，容器会再次启动。\n- **适用场景**：需要持续运行的关键服务（需注意手动停止后仍会重启）。\n- **示例**：\n  ```bash\n  docker run --restart=always my-image\n  ```\n\n#### **`unless-stopped`**\n- **行为**：容器自动重启，除非**被显式停止**（`docker stop`）。即使 Docker 守护进程重启，之前手动停止的容器也不会启动。\n- **适用场景**：长期运行的服务，允许手动停止后保持停止状态。\n- **示例**：\n  ```bash\n  docker run --restart=unless-stopped my-image\n  ```\n\n---\n\n### **2. 配置方法**\n#### **命令行 (`docker run`)**\n```bash\ndocker run --restart=<策略> my-image\n```\n\n#### **Docker Compose (`docker-compose.yml`)**\n```yaml\nservices:\n  my-service:\n    image: my-image\n    restart: unless-stopped  # 可选值：no, always, on-failure, unless-stopped\n```\n\n---\n\n### **3. 查看重启策略**\n使用 `docker inspect` 检查容器的当前策略：\n```bash\ndocker inspect -f '{{ .HostConfig.RestartPolicy.Name }}' <容器名>\n```\n\n---\n\n### **4. 注意事项**\n- **重启延迟**：Docker 使用**指数退避算法**（Exponential Backoff）延迟重启，避免频繁重启消耗资源。\n- **守护进程重启**：`always` 和 `unless-stopped` 策略的容器会在 Docker 守护进程（如系统重启后）重新启动时自动运行。\n- **手动停止优先级**：`docker stop` 会停止容器并绕过 `always` 策略，但 `unless-stopped` 会记住停止状态。\n- **退出码处理**：`on-failure` 仅对非零退出码生效，正常退出（退出码0）不会触发重启。\n\n---\n\n### **5. 生产环境建议**\n- **关键服务**：优先使用 `unless-stopped`，兼顾高可用性和手动控制。\n- **任务队列/定时任务**：使用 `on-failure` 限制重启次数，避免任务无限重试。\n- **临时容器**：保持默认的 `no` 策略。\n\n通过合理选择重启策略，可以有效平衡服务的稳定性和资源管理。","source":"_posts/docker四种重启方式/docker四种重启方式.md","raw":"---\ntitle: docker四种重启方式\ndate: 2025-03-13 18:46:37\nupdated: 2025-03-13 18:46:37\ntags: \n - docker\ncategories: \n - 技术\n - docker\nkeywords: \n - docker\n - reboot\ndescription: 简述了docker容器的重启策略\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n## Docker容器的重启策略\nDocker 容器的重启策略用于控制容器在退出或发生故障时的自动重启行为。通过合理配置重启策略，可以提高服务的可靠性。以下是 Docker 支持的四种重启策略及其详细说明：\n\n---\n\n### **1. 重启策略类型**\n#### **`no`（默认策略）**\n- **行为**：容器不会自动重启。\n- **适用场景**：临时任务或需要手动控制的容器。\n- **示例**：\n  ```bash\n  docker run --restart=no my-image\n  ```\n\n#### **`on-failure[:max-retries]`**\n- **行为**：仅当容器以**非零退出码**退出时自动重启（例如程序崩溃或错误）。可选的 `max-retries` 指定最大重启次数。\n- **适用场景**：需要容错但避免无限重启的服务。\n- **示例**：\n  ```bash\n  docker run --restart=on-failure:5 my-image  # 最多重启5次\n  ```\n\n#### **`always`**\n- **行为**：无论退出码是什么（包括手动停止 `docker stop`），容器都会自动重启。如果被手动停止，当 Docker 守护进程重启时，容器会再次启动。\n- **适用场景**：需要持续运行的关键服务（需注意手动停止后仍会重启）。\n- **示例**：\n  ```bash\n  docker run --restart=always my-image\n  ```\n\n#### **`unless-stopped`**\n- **行为**：容器自动重启，除非**被显式停止**（`docker stop`）。即使 Docker 守护进程重启，之前手动停止的容器也不会启动。\n- **适用场景**：长期运行的服务，允许手动停止后保持停止状态。\n- **示例**：\n  ```bash\n  docker run --restart=unless-stopped my-image\n  ```\n\n---\n\n### **2. 配置方法**\n#### **命令行 (`docker run`)**\n```bash\ndocker run --restart=<策略> my-image\n```\n\n#### **Docker Compose (`docker-compose.yml`)**\n```yaml\nservices:\n  my-service:\n    image: my-image\n    restart: unless-stopped  # 可选值：no, always, on-failure, unless-stopped\n```\n\n---\n\n### **3. 查看重启策略**\n使用 `docker inspect` 检查容器的当前策略：\n```bash\ndocker inspect -f '{{ .HostConfig.RestartPolicy.Name }}' <容器名>\n```\n\n---\n\n### **4. 注意事项**\n- **重启延迟**：Docker 使用**指数退避算法**（Exponential Backoff）延迟重启，避免频繁重启消耗资源。\n- **守护进程重启**：`always` 和 `unless-stopped` 策略的容器会在 Docker 守护进程（如系统重启后）重新启动时自动运行。\n- **手动停止优先级**：`docker stop` 会停止容器并绕过 `always` 策略，但 `unless-stopped` 会记住停止状态。\n- **退出码处理**：`on-failure` 仅对非零退出码生效，正常退出（退出码0）不会触发重启。\n\n---\n\n### **5. 生产环境建议**\n- **关键服务**：优先使用 `unless-stopped`，兼顾高可用性和手动控制。\n- **任务队列/定时任务**：使用 `on-failure` 限制重启次数，避免任务无限重试。\n- **临时容器**：保持默认的 `no` 策略。\n\n通过合理选择重启策略，可以有效平衡服务的稳定性和资源管理。","slug":"docker四种重启方式/docker四种重启方式","published":1,"layout":"post","photos":[],"_id":"cmctwyvat000bx4gr223o0dii","content":"<h2 id=\"Docker容器的重启策略\"><a href=\"#Docker容器的重启策略\" class=\"headerlink\" title=\"Docker容器的重启策略\"></a>Docker容器的重启策略</h2><p>Docker 容器的重启策略用于控制容器在退出或发生故障时的自动重启行为。通过合理配置重启策略，可以提高服务的可靠性。以下是 Docker 支持的四种重启策略及其详细说明：</p>\n<hr>\n<h3 id=\"1-重启策略类型\"><a href=\"#1-重启策略类型\" class=\"headerlink\" title=\"1. 重启策略类型\"></a><strong>1. 重启策略类型</strong></h3><h4 id=\"no（默认策略）\"><a href=\"#no（默认策略）\" class=\"headerlink\" title=\"no（默认策略）\"></a><strong><code>no</code>（默认策略）</strong></h4><ul>\n<li><strong>行为</strong>：容器不会自动重启。</li>\n<li><strong>适用场景</strong>：临时任务或需要手动控制的容器。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=no my-image</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"on-failure-max-retries\"><a href=\"#on-failure-max-retries\" class=\"headerlink\" title=\"on-failure[:max-retries]\"></a><strong><code>on-failure[:max-retries]</code></strong></h4><ul>\n<li><strong>行为</strong>：仅当容器以<strong>非零退出码</strong>退出时自动重启（例如程序崩溃或错误）。可选的 <code>max-retries</code> 指定最大重启次数。</li>\n<li><strong>适用场景</strong>：需要容错但避免无限重启的服务。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=on-failure:5 my-image  <span class=\"comment\"># 最多重启5次</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"always\"><a href=\"#always\" class=\"headerlink\" title=\"always\"></a><strong><code>always</code></strong></h4><ul>\n<li><strong>行为</strong>：无论退出码是什么（包括手动停止 <code>docker stop</code>），容器都会自动重启。如果被手动停止，当 Docker 守护进程重启时，容器会再次启动。</li>\n<li><strong>适用场景</strong>：需要持续运行的关键服务（需注意手动停止后仍会重启）。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=always my-image</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"unless-stopped\"><a href=\"#unless-stopped\" class=\"headerlink\" title=\"unless-stopped\"></a><strong><code>unless-stopped</code></strong></h4><ul>\n<li><strong>行为</strong>：容器自动重启，除非<strong>被显式停止</strong>（<code>docker stop</code>）。即使 Docker 守护进程重启，之前手动停止的容器也不会启动。</li>\n<li><strong>适用场景</strong>：长期运行的服务，允许手动停止后保持停止状态。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped my-image</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"2-配置方法\"><a href=\"#2-配置方法\" class=\"headerlink\" title=\"2. 配置方法\"></a><strong>2. 配置方法</strong></h3><h4 id=\"命令行-docker-run\"><a href=\"#命令行-docker-run\" class=\"headerlink\" title=\"命令行 (docker run)\"></a><strong>命令行 (<code>docker run</code>)</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=&lt;策略&gt; my-image</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-Compose-docker-compose-yml\"><a href=\"#Docker-Compose-docker-compose-yml\" class=\"headerlink\" title=\"Docker Compose (docker-compose.yml)\"></a><strong>Docker Compose (<code>docker-compose.yml</code>)</strong></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">my-service:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">my-image</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span>  <span class=\"comment\"># 可选值：no, always, on-failure, unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-查看重启策略\"><a href=\"#3-查看重启策略\" class=\"headerlink\" title=\"3. 查看重启策略\"></a><strong>3. 查看重启策略</strong></h3><p>使用 <code>docker inspect</code> 检查容器的当前策略：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker inspect -f <span class=\"string\">&#x27;&#123;&#123; .HostConfig.RestartPolicy.Name &#125;&#125;&#x27;</span> &lt;容器名&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a><strong>4. 注意事项</strong></h3><ul>\n<li><strong>重启延迟</strong>：Docker 使用<strong>指数退避算法</strong>（Exponential Backoff）延迟重启，避免频繁重启消耗资源。</li>\n<li><strong>守护进程重启</strong>：<code>always</code> 和 <code>unless-stopped</code> 策略的容器会在 Docker 守护进程（如系统重启后）重新启动时自动运行。</li>\n<li><strong>手动停止优先级</strong>：<code>docker stop</code> 会停止容器并绕过 <code>always</code> 策略，但 <code>unless-stopped</code> 会记住停止状态。</li>\n<li><strong>退出码处理</strong>：<code>on-failure</code> 仅对非零退出码生效，正常退出（退出码0）不会触发重启。</li>\n</ul>\n<hr>\n<h3 id=\"5-生产环境建议\"><a href=\"#5-生产环境建议\" class=\"headerlink\" title=\"5. 生产环境建议\"></a><strong>5. 生产环境建议</strong></h3><ul>\n<li><strong>关键服务</strong>：优先使用 <code>unless-stopped</code>，兼顾高可用性和手动控制。</li>\n<li><strong>任务队列&#x2F;定时任务</strong>：使用 <code>on-failure</code> 限制重启次数，避免任务无限重试。</li>\n<li><strong>临时容器</strong>：保持默认的 <code>no</code> 策略。</li>\n</ul>\n<p>通过合理选择重启策略，可以有效平衡服务的稳定性和资源管理。</p>\n","excerpt":"","more":"<h2 id=\"Docker容器的重启策略\"><a href=\"#Docker容器的重启策略\" class=\"headerlink\" title=\"Docker容器的重启策略\"></a>Docker容器的重启策略</h2><p>Docker 容器的重启策略用于控制容器在退出或发生故障时的自动重启行为。通过合理配置重启策略，可以提高服务的可靠性。以下是 Docker 支持的四种重启策略及其详细说明：</p>\n<hr>\n<h3 id=\"1-重启策略类型\"><a href=\"#1-重启策略类型\" class=\"headerlink\" title=\"1. 重启策略类型\"></a><strong>1. 重启策略类型</strong></h3><h4 id=\"no（默认策略）\"><a href=\"#no（默认策略）\" class=\"headerlink\" title=\"no（默认策略）\"></a><strong><code>no</code>（默认策略）</strong></h4><ul>\n<li><strong>行为</strong>：容器不会自动重启。</li>\n<li><strong>适用场景</strong>：临时任务或需要手动控制的容器。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=no my-image</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"on-failure-max-retries\"><a href=\"#on-failure-max-retries\" class=\"headerlink\" title=\"on-failure[:max-retries]\"></a><strong><code>on-failure[:max-retries]</code></strong></h4><ul>\n<li><strong>行为</strong>：仅当容器以<strong>非零退出码</strong>退出时自动重启（例如程序崩溃或错误）。可选的 <code>max-retries</code> 指定最大重启次数。</li>\n<li><strong>适用场景</strong>：需要容错但避免无限重启的服务。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=on-failure:5 my-image  <span class=\"comment\"># 最多重启5次</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"always\"><a href=\"#always\" class=\"headerlink\" title=\"always\"></a><strong><code>always</code></strong></h4><ul>\n<li><strong>行为</strong>：无论退出码是什么（包括手动停止 <code>docker stop</code>），容器都会自动重启。如果被手动停止，当 Docker 守护进程重启时，容器会再次启动。</li>\n<li><strong>适用场景</strong>：需要持续运行的关键服务（需注意手动停止后仍会重启）。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=always my-image</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"unless-stopped\"><a href=\"#unless-stopped\" class=\"headerlink\" title=\"unless-stopped\"></a><strong><code>unless-stopped</code></strong></h4><ul>\n<li><strong>行为</strong>：容器自动重启，除非<strong>被显式停止</strong>（<code>docker stop</code>）。即使 Docker 守护进程重启，之前手动停止的容器也不会启动。</li>\n<li><strong>适用场景</strong>：长期运行的服务，允许手动停止后保持停止状态。</li>\n<li><strong>示例</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped my-image</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"2-配置方法\"><a href=\"#2-配置方法\" class=\"headerlink\" title=\"2. 配置方法\"></a><strong>2. 配置方法</strong></h3><h4 id=\"命令行-docker-run\"><a href=\"#命令行-docker-run\" class=\"headerlink\" title=\"命令行 (docker run)\"></a><strong>命令行 (<code>docker run</code>)</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=&lt;策略&gt; my-image</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-Compose-docker-compose-yml\"><a href=\"#Docker-Compose-docker-compose-yml\" class=\"headerlink\" title=\"Docker Compose (docker-compose.yml)\"></a><strong>Docker Compose (<code>docker-compose.yml</code>)</strong></h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">my-service:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">my-image</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span>  <span class=\"comment\"># 可选值：no, always, on-failure, unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-查看重启策略\"><a href=\"#3-查看重启策略\" class=\"headerlink\" title=\"3. 查看重启策略\"></a><strong>3. 查看重启策略</strong></h3><p>使用 <code>docker inspect</code> 检查容器的当前策略：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker inspect -f <span class=\"string\">&#x27;&#123;&#123; .HostConfig.RestartPolicy.Name &#125;&#125;&#x27;</span> &lt;容器名&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a><strong>4. 注意事项</strong></h3><ul>\n<li><strong>重启延迟</strong>：Docker 使用<strong>指数退避算法</strong>（Exponential Backoff）延迟重启，避免频繁重启消耗资源。</li>\n<li><strong>守护进程重启</strong>：<code>always</code> 和 <code>unless-stopped</code> 策略的容器会在 Docker 守护进程（如系统重启后）重新启动时自动运行。</li>\n<li><strong>手动停止优先级</strong>：<code>docker stop</code> 会停止容器并绕过 <code>always</code> 策略，但 <code>unless-stopped</code> 会记住停止状态。</li>\n<li><strong>退出码处理</strong>：<code>on-failure</code> 仅对非零退出码生效，正常退出（退出码0）不会触发重启。</li>\n</ul>\n<hr>\n<h3 id=\"5-生产环境建议\"><a href=\"#5-生产环境建议\" class=\"headerlink\" title=\"5. 生产环境建议\"></a><strong>5. 生产环境建议</strong></h3><ul>\n<li><strong>关键服务</strong>：优先使用 <code>unless-stopped</code>，兼顾高可用性和手动控制。</li>\n<li><strong>任务队列&#x2F;定时任务</strong>：使用 <code>on-failure</code> 限制重启次数，避免任务无限重试。</li>\n<li><strong>临时容器</strong>：保持默认的 <code>no</code> 策略。</li>\n</ul>\n<p>通过合理选择重启策略，可以有效平衡服务的稳定性和资源管理。</p>\n"},{"abbrlink":"","date":"2025-07-08T01:47:28.056Z","description":"一个vb脚本，可以将excel数据转为insert语句","keywords":"excel，sql","title":"将excle数据转化为INSERT语句","updated":"2025-07-08T02:25:49.669Z","_content":"# 将excle数据转化为INSERT语句\n\n修改tableName为完整表名即可，支持mysql，要求第一行为表字段名称，后续列为数据\n\n如果sheet页名字不为Sheet1,修改`Set ws = ThisWorkbook.Sheets(\"Sheet1\")`中Sheets中参数\n\n```basic\nSub GenerateMultiRowInsert()\n    Dim ws As Worksheet\n    Dim tableName As String\n    Dim lastRow As Long, lastCol As Integer\n    Dim headers() As String\n    Dim i As Long, j As Integer\n    Dim sql As String, valueStr As String\n    Dim fieldList As String\n    Dim outputCol As Integer\n    Dim dataValue As String\n  \n    ' 设置MySQL表名\n    tableName = \"db_name.tb_name\" ' 修改为你的表名\n  \n    ' 获取工作表\n    Set ws = ThisWorkbook.Sheets(\"Sheet1\")\n  \n    ' 获取数据范围\n    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row\n    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column\n  \n    ' 确定输出列（最后一列+1）\n    outputCol = lastCol + 1\n  \n    ' 设置输出列标题\n    ws.Cells(1, outputCol).Value = \"INSERT Part\"\n    ws.Cells(1, outputCol).EntireColumn.AutoFit\n  \n    ' 读取表头\n    ReDim headers(1 To lastCol)\n    For j = 1 To lastCol\n        headers(j) = ws.Cells(1, j).Value\n    Next j\n  \n    ' 构建字段列表\n    fieldList = \"\"\n    For j = 1 To lastCol\n        fieldList = fieldList & IIf(j > 1, \", \", \"\") & \"`\" & headers(j) & \"`\"\n    Next j\n  \n    ' 处理每一行数据\n    For i = 2 To lastRow\n        ' 构建该行数据值的字符串\n        valueStr = \"\"\n        For j = 1 To lastCol\n            ' 获取单元格值\n            dataValue = CStr(ws.Cells(i, j).Value)\n  \n            ' 处理特殊字符：移除运算符前的反引号（如果存在）\n            If Left(dataValue, 1) = \"`\" And Len(dataValue) > 1 Then\n                dataValue = Mid(dataValue, 2)\n            End If\n  \n            ' 处理特殊值和数据类型\n            If UCase(dataValue) = \"CURRENT_TIMESTAMP\" Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"CURRENT_TIMESTAMP\"\n            ElseIf IsNumeric(dataValue) And Not IsDate(dataValue) Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & dataValue\n            ElseIf IsDate(dataValue) Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"'\" & Format(dataValue, \"yyyy-mm-dd hh:nn:ss\") & \"'\"\n            ElseIf IsEmpty(dataValue) Or dataValue = \"\" Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"NULL\"\n            Else\n                ' 转义单引号\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"'\" & Replace(dataValue, \"'\", \"''\") & \"'\"\n            End If\n        Next j\n  \n        ' 根据行号生成不同的部分\n        If i = 2 Then\n            ' 第一行数据：完整的INSERT开头\n            sql = \"INSERT INTO \" & tableName & \" (\" & fieldList & \") VALUES (\" & valueStr & \")\"\n        Else\n            ' 后续行：以逗号开头\n            sql = \",(\" & valueStr & \")\"\n        End If\n  \n        ' 如果是最后一行，添加分号\n        If i = lastRow Then\n            sql = sql & \";\"\n        End If\n  \n        ' 写入当前行的输出列\n        ws.Cells(i, outputCol).Value = sql\n    Next i\n  \n    ' 自动调整列宽\n    ws.Columns(outputCol).AutoFit\n  \n    MsgBox \"生成完成！\" & vbCrLf & _\n           \"请复制第\" & outputCol & \"列（从第2行到第\" & lastRow & \"行）的内容，得到完整的INSERT语句。\", vbInformation\nEnd Sub\n\n\n\n\n```\n","source":"_posts/excel数据转insert语句/excel数据转insert语句.md","raw":"---\nabbrlink: ''\ncategories:\n- - 开发心得\ndate: '2025-07-08T09:47:28.056069+08:00'\ndescription: 一个vb脚本，可以将excel数据转为insert语句\nkeywords: excel，sql\ntags:\n- excel\n- sql\n- 开发心得\ntitle: 将excle数据转化为INSERT语句\nupdated: '2025-07-08T10:25:49.669+08:00'\n---\n# 将excle数据转化为INSERT语句\n\n修改tableName为完整表名即可，支持mysql，要求第一行为表字段名称，后续列为数据\n\n如果sheet页名字不为Sheet1,修改`Set ws = ThisWorkbook.Sheets(\"Sheet1\")`中Sheets中参数\n\n```basic\nSub GenerateMultiRowInsert()\n    Dim ws As Worksheet\n    Dim tableName As String\n    Dim lastRow As Long, lastCol As Integer\n    Dim headers() As String\n    Dim i As Long, j As Integer\n    Dim sql As String, valueStr As String\n    Dim fieldList As String\n    Dim outputCol As Integer\n    Dim dataValue As String\n  \n    ' 设置MySQL表名\n    tableName = \"db_name.tb_name\" ' 修改为你的表名\n  \n    ' 获取工作表\n    Set ws = ThisWorkbook.Sheets(\"Sheet1\")\n  \n    ' 获取数据范围\n    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row\n    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column\n  \n    ' 确定输出列（最后一列+1）\n    outputCol = lastCol + 1\n  \n    ' 设置输出列标题\n    ws.Cells(1, outputCol).Value = \"INSERT Part\"\n    ws.Cells(1, outputCol).EntireColumn.AutoFit\n  \n    ' 读取表头\n    ReDim headers(1 To lastCol)\n    For j = 1 To lastCol\n        headers(j) = ws.Cells(1, j).Value\n    Next j\n  \n    ' 构建字段列表\n    fieldList = \"\"\n    For j = 1 To lastCol\n        fieldList = fieldList & IIf(j > 1, \", \", \"\") & \"`\" & headers(j) & \"`\"\n    Next j\n  \n    ' 处理每一行数据\n    For i = 2 To lastRow\n        ' 构建该行数据值的字符串\n        valueStr = \"\"\n        For j = 1 To lastCol\n            ' 获取单元格值\n            dataValue = CStr(ws.Cells(i, j).Value)\n  \n            ' 处理特殊字符：移除运算符前的反引号（如果存在）\n            If Left(dataValue, 1) = \"`\" And Len(dataValue) > 1 Then\n                dataValue = Mid(dataValue, 2)\n            End If\n  \n            ' 处理特殊值和数据类型\n            If UCase(dataValue) = \"CURRENT_TIMESTAMP\" Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"CURRENT_TIMESTAMP\"\n            ElseIf IsNumeric(dataValue) And Not IsDate(dataValue) Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & dataValue\n            ElseIf IsDate(dataValue) Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"'\" & Format(dataValue, \"yyyy-mm-dd hh:nn:ss\") & \"'\"\n            ElseIf IsEmpty(dataValue) Or dataValue = \"\" Then\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"NULL\"\n            Else\n                ' 转义单引号\n                valueStr = valueStr & IIf(j > 1, \", \", \"\") & \"'\" & Replace(dataValue, \"'\", \"''\") & \"'\"\n            End If\n        Next j\n  \n        ' 根据行号生成不同的部分\n        If i = 2 Then\n            ' 第一行数据：完整的INSERT开头\n            sql = \"INSERT INTO \" & tableName & \" (\" & fieldList & \") VALUES (\" & valueStr & \")\"\n        Else\n            ' 后续行：以逗号开头\n            sql = \",(\" & valueStr & \")\"\n        End If\n  \n        ' 如果是最后一行，添加分号\n        If i = lastRow Then\n            sql = sql & \";\"\n        End If\n  \n        ' 写入当前行的输出列\n        ws.Cells(i, outputCol).Value = sql\n    Next i\n  \n    ' 自动调整列宽\n    ws.Columns(outputCol).AutoFit\n  \n    MsgBox \"生成完成！\" & vbCrLf & _\n           \"请复制第\" & outputCol & \"列（从第2行到第\" & lastRow & \"行）的内容，得到完整的INSERT语句。\", vbInformation\nEnd Sub\n\n\n\n\n```\n","slug":"excel数据转insert语句/excel数据转insert语句","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvau000fx4graqi10olf","content":"<h1 id=\"将excle数据转化为INSERT语句\"><a href=\"#将excle数据转化为INSERT语句\" class=\"headerlink\" title=\"将excle数据转化为INSERT语句\"></a>将excle数据转化为INSERT语句</h1><p>修改tableName为完整表名即可，支持mysql，要求第一行为表字段名称，后续列为数据</p>\n<p>如果sheet页名字不为Sheet1,修改<code>Set ws = ThisWorkbook.Sheets(&quot;Sheet1&quot;)</code>中Sheets中参数</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sub GenerateMultiRowInsert()</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> ws As Worksheet</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> tableName As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> lastRow As Long, lastCol As Integer</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> headers() As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> i As Long, j As Integer</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> sql As String, valueStr As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> fieldList As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> outputCol As Integer</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> dataValue As String</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 设置MySQL表名</span></span><br><span class=\"line\">    tableName = <span class=\"string\">&quot;db_name.tb_name&quot;</span> <span class=\"comment\">&#x27; 修改为你的表名</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 获取工作表</span></span><br><span class=\"line\">    Set ws = ThisWorkbook.Sheets(<span class=\"string\">&quot;Sheet1&quot;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 获取数据范围</span></span><br><span class=\"line\">    lastRow = ws.Cells(ws.Rows.Count, <span class=\"number\">1</span>).<span class=\"keyword\">End</span>(xlUp).Row</span><br><span class=\"line\">    lastCol = ws.Cells(<span class=\"number\">1</span>, ws.Columns.Count).<span class=\"keyword\">End</span>(xlToLeft).Column</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 确定输出列（最后一列+1）</span></span><br><span class=\"line\">    outputCol = lastCol + <span class=\"number\">1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 设置输出列标题</span></span><br><span class=\"line\">    ws.Cells(<span class=\"number\">1</span>, outputCol).Value = <span class=\"string\">&quot;INSERT Part&quot;</span></span><br><span class=\"line\">    ws.Cells(<span class=\"number\">1</span>, outputCol).EntireColumn.AutoFit</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 读取表头</span></span><br><span class=\"line\">    ReDim headers(<span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol)</span><br><span class=\"line\">    <span class=\"keyword\">For</span> j = <span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol</span><br><span class=\"line\">        headers(j) = ws.Cells(<span class=\"number\">1</span>, j).Value</span><br><span class=\"line\">    <span class=\"keyword\">Next</span> j</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 构建字段列表</span></span><br><span class=\"line\">    fieldList = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">For</span> j = <span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol</span><br><span class=\"line\">        fieldList = fieldList &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;`&quot;</span> &amp; headers(j) &amp; <span class=\"string\">&quot;`&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">Next</span> j</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 处理每一行数据</span></span><br><span class=\"line\">    <span class=\"keyword\">For</span> i = <span class=\"number\">2</span> <span class=\"keyword\">To</span> lastRow</span><br><span class=\"line\">        <span class=\"comment\">&#x27; 构建该行数据值的字符串</span></span><br><span class=\"line\">        valueStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">For</span> j = <span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol</span><br><span class=\"line\">            <span class=\"comment\">&#x27; 获取单元格值</span></span><br><span class=\"line\">            dataValue = CStr(ws.Cells(i, j).Value)</span><br><span class=\"line\">  </span><br><span class=\"line\">            <span class=\"comment\">&#x27; 处理特殊字符：移除运算符前的反引号（如果存在）</span></span><br><span class=\"line\">            <span class=\"keyword\">If</span> Left(dataValue, <span class=\"number\">1</span>) = <span class=\"string\">&quot;`&quot;</span> <span class=\"keyword\">And</span> <span class=\"keyword\">Len</span>(dataValue) &gt; <span class=\"number\">1</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">                dataValue = Mid(dataValue, <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">  </span><br><span class=\"line\">            <span class=\"comment\">&#x27; 处理特殊值和数据类型</span></span><br><span class=\"line\">            <span class=\"keyword\">If</span> UCase(dataValue) = <span class=\"string\">&quot;CURRENT_TIMESTAMP&quot;</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;CURRENT_TIMESTAMP&quot;</span></span><br><span class=\"line\">            ElseIf IsNumeric(dataValue) <span class=\"keyword\">And</span> <span class=\"keyword\">Not</span> IsDate(dataValue) <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; dataValue</span><br><span class=\"line\">            ElseIf IsDate(dataValue) <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span> &amp; Format(dataValue, <span class=\"string\">&quot;yyyy-mm-dd hh:nn:ss&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span></span><br><span class=\"line\">            ElseIf IsEmpty(dataValue) <span class=\"keyword\">Or</span> dataValue = <span class=\"string\">&quot;&quot;</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;NULL&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">Else</span></span><br><span class=\"line\">                <span class=\"comment\">&#x27; 转义单引号</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span> &amp; Replace(dataValue, <span class=\"string\">&quot;&#x27;&quot;</span>, <span class=\"string\">&quot;&#x27;&#x27;&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">        <span class=\"keyword\">Next</span> j</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">&#x27; 根据行号生成不同的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">If</span> i = <span class=\"number\">2</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">            <span class=\"comment\">&#x27; 第一行数据：完整的INSERT开头</span></span><br><span class=\"line\">            sql = <span class=\"string\">&quot;INSERT INTO &quot;</span> &amp; tableName &amp; <span class=\"string\">&quot; (&quot;</span> &amp; fieldList &amp; <span class=\"string\">&quot;) VALUES (&quot;</span> &amp; valueStr &amp; <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">Else</span></span><br><span class=\"line\">            <span class=\"comment\">&#x27; 后续行：以逗号开头</span></span><br><span class=\"line\">            sql = <span class=\"string\">&quot;,(&quot;</span> &amp; valueStr &amp; <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">&#x27; 如果是最后一行，添加分号</span></span><br><span class=\"line\">        <span class=\"keyword\">If</span> i = lastRow <span class=\"keyword\">Then</span></span><br><span class=\"line\">            sql = sql &amp; <span class=\"string\">&quot;;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">&#x27; 写入当前行的输出列</span></span><br><span class=\"line\">        ws.Cells(i, outputCol).Value = sql</span><br><span class=\"line\">    <span class=\"keyword\">Next</span> i</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 自动调整列宽</span></span><br><span class=\"line\">    ws.Columns(outputCol).AutoFit</span><br><span class=\"line\">  </span><br><span class=\"line\">    MsgBox <span class=\"string\">&quot;生成完成！&quot;</span> &amp; vbCrLf &amp; _</span><br><span class=\"line\">           <span class=\"string\">&quot;请复制第&quot;</span> &amp; outputCol &amp; <span class=\"string\">&quot;列（从第2行到第&quot;</span> &amp; lastRow &amp; <span class=\"string\">&quot;行）的内容，得到完整的INSERT语句。&quot;</span>, vbInformation</span><br><span class=\"line\"><span class=\"keyword\">End</span> Sub</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"将excle数据转化为INSERT语句\"><a href=\"#将excle数据转化为INSERT语句\" class=\"headerlink\" title=\"将excle数据转化为INSERT语句\"></a>将excle数据转化为INSERT语句</h1><p>修改tableName为完整表名即可，支持mysql，要求第一行为表字段名称，后续列为数据</p>\n<p>如果sheet页名字不为Sheet1,修改<code>Set ws = ThisWorkbook.Sheets(&quot;Sheet1&quot;)</code>中Sheets中参数</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sub GenerateMultiRowInsert()</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> ws As Worksheet</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> tableName As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> lastRow As Long, lastCol As Integer</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> headers() As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> i As Long, j As Integer</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> sql As String, valueStr As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> fieldList As String</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> outputCol As Integer</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> dataValue As String</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 设置MySQL表名</span></span><br><span class=\"line\">    tableName = <span class=\"string\">&quot;db_name.tb_name&quot;</span> <span class=\"comment\">&#x27; 修改为你的表名</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 获取工作表</span></span><br><span class=\"line\">    Set ws = ThisWorkbook.Sheets(<span class=\"string\">&quot;Sheet1&quot;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 获取数据范围</span></span><br><span class=\"line\">    lastRow = ws.Cells(ws.Rows.Count, <span class=\"number\">1</span>).<span class=\"keyword\">End</span>(xlUp).Row</span><br><span class=\"line\">    lastCol = ws.Cells(<span class=\"number\">1</span>, ws.Columns.Count).<span class=\"keyword\">End</span>(xlToLeft).Column</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 确定输出列（最后一列+1）</span></span><br><span class=\"line\">    outputCol = lastCol + <span class=\"number\">1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 设置输出列标题</span></span><br><span class=\"line\">    ws.Cells(<span class=\"number\">1</span>, outputCol).Value = <span class=\"string\">&quot;INSERT Part&quot;</span></span><br><span class=\"line\">    ws.Cells(<span class=\"number\">1</span>, outputCol).EntireColumn.AutoFit</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 读取表头</span></span><br><span class=\"line\">    ReDim headers(<span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol)</span><br><span class=\"line\">    <span class=\"keyword\">For</span> j = <span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol</span><br><span class=\"line\">        headers(j) = ws.Cells(<span class=\"number\">1</span>, j).Value</span><br><span class=\"line\">    <span class=\"keyword\">Next</span> j</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 构建字段列表</span></span><br><span class=\"line\">    fieldList = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">For</span> j = <span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol</span><br><span class=\"line\">        fieldList = fieldList &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;`&quot;</span> &amp; headers(j) &amp; <span class=\"string\">&quot;`&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">Next</span> j</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 处理每一行数据</span></span><br><span class=\"line\">    <span class=\"keyword\">For</span> i = <span class=\"number\">2</span> <span class=\"keyword\">To</span> lastRow</span><br><span class=\"line\">        <span class=\"comment\">&#x27; 构建该行数据值的字符串</span></span><br><span class=\"line\">        valueStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">For</span> j = <span class=\"number\">1</span> <span class=\"keyword\">To</span> lastCol</span><br><span class=\"line\">            <span class=\"comment\">&#x27; 获取单元格值</span></span><br><span class=\"line\">            dataValue = CStr(ws.Cells(i, j).Value)</span><br><span class=\"line\">  </span><br><span class=\"line\">            <span class=\"comment\">&#x27; 处理特殊字符：移除运算符前的反引号（如果存在）</span></span><br><span class=\"line\">            <span class=\"keyword\">If</span> Left(dataValue, <span class=\"number\">1</span>) = <span class=\"string\">&quot;`&quot;</span> <span class=\"keyword\">And</span> <span class=\"keyword\">Len</span>(dataValue) &gt; <span class=\"number\">1</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">                dataValue = Mid(dataValue, <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">  </span><br><span class=\"line\">            <span class=\"comment\">&#x27; 处理特殊值和数据类型</span></span><br><span class=\"line\">            <span class=\"keyword\">If</span> UCase(dataValue) = <span class=\"string\">&quot;CURRENT_TIMESTAMP&quot;</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;CURRENT_TIMESTAMP&quot;</span></span><br><span class=\"line\">            ElseIf IsNumeric(dataValue) <span class=\"keyword\">And</span> <span class=\"keyword\">Not</span> IsDate(dataValue) <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; dataValue</span><br><span class=\"line\">            ElseIf IsDate(dataValue) <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span> &amp; Format(dataValue, <span class=\"string\">&quot;yyyy-mm-dd hh:nn:ss&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span></span><br><span class=\"line\">            ElseIf IsEmpty(dataValue) <span class=\"keyword\">Or</span> dataValue = <span class=\"string\">&quot;&quot;</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;NULL&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">Else</span></span><br><span class=\"line\">                <span class=\"comment\">&#x27; 转义单引号</span></span><br><span class=\"line\">                valueStr = valueStr &amp; IIf(j &gt; <span class=\"number\">1</span>, <span class=\"string\">&quot;, &quot;</span>, <span class=\"string\">&quot;&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span> &amp; Replace(dataValue, <span class=\"string\">&quot;&#x27;&quot;</span>, <span class=\"string\">&quot;&#x27;&#x27;&quot;</span>) &amp; <span class=\"string\">&quot;&#x27;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">        <span class=\"keyword\">Next</span> j</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">&#x27; 根据行号生成不同的部分</span></span><br><span class=\"line\">        <span class=\"keyword\">If</span> i = <span class=\"number\">2</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">            <span class=\"comment\">&#x27; 第一行数据：完整的INSERT开头</span></span><br><span class=\"line\">            sql = <span class=\"string\">&quot;INSERT INTO &quot;</span> &amp; tableName &amp; <span class=\"string\">&quot; (&quot;</span> &amp; fieldList &amp; <span class=\"string\">&quot;) VALUES (&quot;</span> &amp; valueStr &amp; <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">Else</span></span><br><span class=\"line\">            <span class=\"comment\">&#x27; 后续行：以逗号开头</span></span><br><span class=\"line\">            sql = <span class=\"string\">&quot;,(&quot;</span> &amp; valueStr &amp; <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">&#x27; 如果是最后一行，添加分号</span></span><br><span class=\"line\">        <span class=\"keyword\">If</span> i = lastRow <span class=\"keyword\">Then</span></span><br><span class=\"line\">            sql = sql &amp; <span class=\"string\">&quot;;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">&#x27; 写入当前行的输出列</span></span><br><span class=\"line\">        ws.Cells(i, outputCol).Value = sql</span><br><span class=\"line\">    <span class=\"keyword\">Next</span> i</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 自动调整列宽</span></span><br><span class=\"line\">    ws.Columns(outputCol).AutoFit</span><br><span class=\"line\">  </span><br><span class=\"line\">    MsgBox <span class=\"string\">&quot;生成完成！&quot;</span> &amp; vbCrLf &amp; _</span><br><span class=\"line\">           <span class=\"string\">&quot;请复制第&quot;</span> &amp; outputCol &amp; <span class=\"string\">&quot;列（从第2行到第&quot;</span> &amp; lastRow &amp; <span class=\"string\">&quot;行）的内容，得到完整的INSERT语句。&quot;</span>, vbInformation</span><br><span class=\"line\"><span class=\"keyword\">End</span> Sub</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"flask中config.py文件编写指南","date":"2025-04-05T07:50:35.000Z","updated":"2025-04-05T07:50:35.000Z","keywords":["flask","config"],"description":"flask中config.py文件编写指南","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"在 Flask 项目中，`config.py` 文件用于集中管理应用的配置参数（如数据库连接、密钥、调试模式等）。以下是一个典型的配置文件的编写方式和最佳实践：\n\n---\n\n### **1. 基础 `config.py` 示例**\n```python\n# config.py\nimport os\nfrom dotenv import load_dotenv  # 可选：用于加载.env文件\n\n# 加载.env文件（如果存在）\nload_dotenv()\n\nclass Config:\n    # 基础配置（通用配置）\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-default-secret-key'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False  # 禁用SQLAlchemy事件系统（推荐关闭）\n    DEBUG = False  # 默认关闭调试模式\n\nclass DevelopmentConfig(Config):\n    # 开发环境配置\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(os.path.dirname(__file__), 'data-dev.sqlite')\n\nclass TestingConfig(Config):\n    # 测试环境配置\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or 'sqlite:///:memory:'\n\nclass ProductionConfig(Config):\n    # 生产环境配置\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(os.path.dirname(__file__), 'data.sqlite')\n\n# 配置类映射（便于动态选择）\nconfig = {\n    'development': DevelopmentConfig,\n    'testing': TestingConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n```\n\n---\n\n### **2. 关键配置项说明**\n#### **a. 必须配置项**\n- **`SECRET_KEY`**：用于加密会话、CSRF令牌等敏感操作。\n  ```python\n  SECRET_KEY = os.environ.get('SECRET_KEY') or 'hardcoded-fallback-key'  # 优先从环境变量读取\n  ```\n  - **生产环境中务必使用环境变量**，避免硬编码密钥！\n\n#### **b. 数据库配置**\n- **`SQLALCHEMY_DATABASE_URI`**：数据库连接字符串。\n  ```python\n  # 示例：\n  # PostgreSQL: postgresql://user:password@localhost/mydb\n  # MySQL: mysql+pymysql://user:password@localhost/mydb\n  # SQLite: sqlite:///absolute/path/to/db.sqlite\n  SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')\n  ```\n\n#### **c. 调试与安全**\n- **`DEBUG`**：开发时设为 `True`，生产环境必须设为 `False`。\n- **`TESTING`**：单元测试时启用，会禁用某些安全检查。\n\n---\n\n### **3. 环境变量与敏感信息**\n#### **a. 使用 `.env` 文件（推荐）**\n1. 安装 `python-dotenv`：\n   ```bash\n   pip install python-dotenv\n   ```\n2. 在项目根目录创建 `.env` 文件（**不要提交到版本控制**）：\n   ```bash\n   SECRET_KEY=your-secret-key-here\n   DATABASE_URL=postgresql://user:password@localhost/prod_db\n   DEV_DATABASE_URL=sqlite:///dev.db\n   ```\n3. 在 `config.py` 中加载：\n   ```python\n   from dotenv import load_dotenv\n   load_dotenv()  # 自动加载.env文件\n   ```\n\n#### **b. 生产环境直接设置环境变量**\n```bash\n# Linux/macOS\nexport SECRET_KEY=your-secret-key\nexport DATABASE_URL=postgresql://user:password@host/db\n\n# Windows\nset SECRET_KEY=your-secret-key\nset DATABASE_URL=postgresql://user:password@host/db\n```\n\n---\n\n### **4. 在Flask应用中使用配置**\n在 `app/__init__.py` 的工厂函数中动态加载配置：\n```python\nfrom flask import Flask\nfrom config import config  # 导入config字典\n\ndef create_app(config_name='default'):\n    app = Flask(__name__)\n    \n    # 从配置类加载设置\n    app.config.from_object(config[config_name])\n    \n    # 可选：从instance文件夹加载私有配置\n    # app.config.from_pyfile('config.py', silent=True)\n    \n    return app\n```\n\n启动时指定环境（如生产环境）：\n```python\n# run.py\nfrom app import create_app\n\napp = create_app('production')\n\nif __name__ == '__main__':\n    app.run()\n```\n\n---\n\n### **5. 最佳实践**\n1. **分离不同环境的配置**：开发、测试、生产环境使用不同的数据库和参数。\n2. **敏感信息不上传**：通过 `.gitignore` 排除 `.env` 和 `instance/` 文件夹。\n3. **使用实例文件夹（Instance Folder）**：\n   - 创建 `instance` 目录（与 `app` 同级）\n   - 在 `instance/config.py` 中存放生产环境私有配置：\n     ```python\n     # instance/config.py\n     SECRET_KEY = 'production-secret-key'\n     DATABASE_URL = 'postgresql://user:password@host/db'\n     ```\n   - 加载配置：\n     ```python\n     app.config.from_pyfile('config.py', silent=True)  # silent=True表示文件不存在时不报错\n     ```\n\n---\n\n### **6. 完整配置示例**\n```python\n# config.py\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-fallback-key'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    MAIL_SERVER = os.environ.get('MAIL_SERVER', 'smtp.googlemail.com')\n    MAIL_PORT = int(os.environ.get('MAIL_PORT', '587'))\n    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']\n    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')\n    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DB_URL') or \\\n        'sqlite:///' + os.path.join(basedir, 'dev.db')\n\nclass ProductionConfig(Config):\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(basedir, 'prod.db')\n\nconfig = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n```\n\n---\n\n通过这种方式，你可以轻松管理不同环境的配置，同时确保敏感信息的安全性。","source":"_posts/flask中config-py文件编写指南/flask中config-py文件编写指南.md","raw":"---\ntitle: flask中config.py文件编写指南\ndate: 2025-04-05 15:50:35\nupdated: 2025-04-05 15:50:35\ntags: \n - flask \n - config\ncategories: \n - 技术\n - flask\nkeywords:  \n - flask \n - config\ndescription: flask中config.py文件编写指南\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n在 Flask 项目中，`config.py` 文件用于集中管理应用的配置参数（如数据库连接、密钥、调试模式等）。以下是一个典型的配置文件的编写方式和最佳实践：\n\n---\n\n### **1. 基础 `config.py` 示例**\n```python\n# config.py\nimport os\nfrom dotenv import load_dotenv  # 可选：用于加载.env文件\n\n# 加载.env文件（如果存在）\nload_dotenv()\n\nclass Config:\n    # 基础配置（通用配置）\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-default-secret-key'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False  # 禁用SQLAlchemy事件系统（推荐关闭）\n    DEBUG = False  # 默认关闭调试模式\n\nclass DevelopmentConfig(Config):\n    # 开发环境配置\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(os.path.dirname(__file__), 'data-dev.sqlite')\n\nclass TestingConfig(Config):\n    # 测试环境配置\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or 'sqlite:///:memory:'\n\nclass ProductionConfig(Config):\n    # 生产环境配置\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(os.path.dirname(__file__), 'data.sqlite')\n\n# 配置类映射（便于动态选择）\nconfig = {\n    'development': DevelopmentConfig,\n    'testing': TestingConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n```\n\n---\n\n### **2. 关键配置项说明**\n#### **a. 必须配置项**\n- **`SECRET_KEY`**：用于加密会话、CSRF令牌等敏感操作。\n  ```python\n  SECRET_KEY = os.environ.get('SECRET_KEY') or 'hardcoded-fallback-key'  # 优先从环境变量读取\n  ```\n  - **生产环境中务必使用环境变量**，避免硬编码密钥！\n\n#### **b. 数据库配置**\n- **`SQLALCHEMY_DATABASE_URI`**：数据库连接字符串。\n  ```python\n  # 示例：\n  # PostgreSQL: postgresql://user:password@localhost/mydb\n  # MySQL: mysql+pymysql://user:password@localhost/mydb\n  # SQLite: sqlite:///absolute/path/to/db.sqlite\n  SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')\n  ```\n\n#### **c. 调试与安全**\n- **`DEBUG`**：开发时设为 `True`，生产环境必须设为 `False`。\n- **`TESTING`**：单元测试时启用，会禁用某些安全检查。\n\n---\n\n### **3. 环境变量与敏感信息**\n#### **a. 使用 `.env` 文件（推荐）**\n1. 安装 `python-dotenv`：\n   ```bash\n   pip install python-dotenv\n   ```\n2. 在项目根目录创建 `.env` 文件（**不要提交到版本控制**）：\n   ```bash\n   SECRET_KEY=your-secret-key-here\n   DATABASE_URL=postgresql://user:password@localhost/prod_db\n   DEV_DATABASE_URL=sqlite:///dev.db\n   ```\n3. 在 `config.py` 中加载：\n   ```python\n   from dotenv import load_dotenv\n   load_dotenv()  # 自动加载.env文件\n   ```\n\n#### **b. 生产环境直接设置环境变量**\n```bash\n# Linux/macOS\nexport SECRET_KEY=your-secret-key\nexport DATABASE_URL=postgresql://user:password@host/db\n\n# Windows\nset SECRET_KEY=your-secret-key\nset DATABASE_URL=postgresql://user:password@host/db\n```\n\n---\n\n### **4. 在Flask应用中使用配置**\n在 `app/__init__.py` 的工厂函数中动态加载配置：\n```python\nfrom flask import Flask\nfrom config import config  # 导入config字典\n\ndef create_app(config_name='default'):\n    app = Flask(__name__)\n    \n    # 从配置类加载设置\n    app.config.from_object(config[config_name])\n    \n    # 可选：从instance文件夹加载私有配置\n    # app.config.from_pyfile('config.py', silent=True)\n    \n    return app\n```\n\n启动时指定环境（如生产环境）：\n```python\n# run.py\nfrom app import create_app\n\napp = create_app('production')\n\nif __name__ == '__main__':\n    app.run()\n```\n\n---\n\n### **5. 最佳实践**\n1. **分离不同环境的配置**：开发、测试、生产环境使用不同的数据库和参数。\n2. **敏感信息不上传**：通过 `.gitignore` 排除 `.env` 和 `instance/` 文件夹。\n3. **使用实例文件夹（Instance Folder）**：\n   - 创建 `instance` 目录（与 `app` 同级）\n   - 在 `instance/config.py` 中存放生产环境私有配置：\n     ```python\n     # instance/config.py\n     SECRET_KEY = 'production-secret-key'\n     DATABASE_URL = 'postgresql://user:password@host/db'\n     ```\n   - 加载配置：\n     ```python\n     app.config.from_pyfile('config.py', silent=True)  # silent=True表示文件不存在时不报错\n     ```\n\n---\n\n### **6. 完整配置示例**\n```python\n# config.py\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-fallback-key'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    MAIL_SERVER = os.environ.get('MAIL_SERVER', 'smtp.googlemail.com')\n    MAIL_PORT = int(os.environ.get('MAIL_PORT', '587'))\n    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']\n    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')\n    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DB_URL') or \\\n        'sqlite:///' + os.path.join(basedir, 'dev.db')\n\nclass ProductionConfig(Config):\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(basedir, 'prod.db')\n\nconfig = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n```\n\n---\n\n通过这种方式，你可以轻松管理不同环境的配置，同时确保敏感信息的安全性。","slug":"flask中config-py文件编写指南/flask中config-py文件编写指南","published":1,"layout":"post","photos":[],"_id":"cmctwyvav000gx4grbx2x5mkx","content":"<p>在 Flask 项目中，<code>config.py</code> 文件用于集中管理应用的配置参数（如数据库连接、密钥、调试模式等）。以下是一个典型的配置文件的编写方式和最佳实践：</p>\n<hr>\n<h3 id=\"1-基础-config-py-示例\"><a href=\"#1-基础-config-py-示例\" class=\"headerlink\" title=\"1. 基础 config.py 示例\"></a><strong>1. 基础 <code>config.py</code> 示例</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv  <span class=\"comment\"># 可选：用于加载.env文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载.env文件（如果存在）</span></span><br><span class=\"line\">load_dotenv()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Config</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 基础配置（通用配置）</span></span><br><span class=\"line\">    SECRET_KEY = os.environ.get(<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;your-default-secret-key&#x27;</span></span><br><span class=\"line\">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span>  <span class=\"comment\"># 禁用SQLAlchemy事件系统（推荐关闭）</span></span><br><span class=\"line\">    DEBUG = <span class=\"literal\">False</span>  <span class=\"comment\"># 默认关闭调试模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DevelopmentConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 开发环境配置</span></span><br><span class=\"line\">    DEBUG = <span class=\"literal\">True</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DEV_DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(os.path.dirname(__file__), <span class=\"string\">&#x27;data-dev.sqlite&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestingConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 测试环境配置</span></span><br><span class=\"line\">    TESTING = <span class=\"literal\">True</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;TEST_DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;sqlite:///:memory:&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProductionConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 生产环境配置</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(os.path.dirname(__file__), <span class=\"string\">&#x27;data.sqlite&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置类映射（便于动态选择）</span></span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;development&#x27;</span>: DevelopmentConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;testing&#x27;</span>: TestingConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;production&#x27;</span>: ProductionConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: DevelopmentConfig</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-关键配置项说明\"><a href=\"#2-关键配置项说明\" class=\"headerlink\" title=\"2. 关键配置项说明\"></a><strong>2. 关键配置项说明</strong></h3><h4 id=\"a-必须配置项\"><a href=\"#a-必须配置项\" class=\"headerlink\" title=\"a. 必须配置项\"></a><strong>a. 必须配置项</strong></h4><ul>\n<li>**<code>SECRET_KEY</code>**：用于加密会话、CSRF令牌等敏感操作。<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">SECRET_KEY = os.environ.get(<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;hardcoded-fallback-key&#x27;</span>  <span class=\"comment\"># 优先从环境变量读取</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>生产环境中务必使用环境变量</strong>，避免硬编码密钥！</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"b-数据库配置\"><a href=\"#b-数据库配置\" class=\"headerlink\" title=\"b. 数据库配置\"></a><strong>b. 数据库配置</strong></h4><ul>\n<li>**<code>SQLALCHEMY_DATABASE_URI</code>**：数据库连接字符串。<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：</span></span><br><span class=\"line\"><span class=\"comment\"># PostgreSQL: postgresql://user:password@localhost/mydb</span></span><br><span class=\"line\"><span class=\"comment\"># MySQL: mysql+pymysql://user:password@localhost/mydb</span></span><br><span class=\"line\"><span class=\"comment\"># SQLite: sqlite:///absolute/path/to/db.sqlite</span></span><br><span class=\"line\">SQLALCHEMY_DATABASE_URI = <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class=\"string\">&#x27;app.db&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"c-调试与安全\"><a href=\"#c-调试与安全\" class=\"headerlink\" title=\"c. 调试与安全\"></a><strong>c. 调试与安全</strong></h4><ul>\n<li>**<code>DEBUG</code>**：开发时设为 <code>True</code>，生产环境必须设为 <code>False</code>。</li>\n<li>**<code>TESTING</code>**：单元测试时启用，会禁用某些安全检查。</li>\n</ul>\n<hr>\n<h3 id=\"3-环境变量与敏感信息\"><a href=\"#3-环境变量与敏感信息\" class=\"headerlink\" title=\"3. 环境变量与敏感信息\"></a><strong>3. 环境变量与敏感信息</strong></h3><h4 id=\"a-使用-env-文件（推荐）\"><a href=\"#a-使用-env-文件（推荐）\" class=\"headerlink\" title=\"a. 使用 .env 文件（推荐）\"></a><strong>a. 使用 <code>.env</code> 文件（推荐）</strong></h4><ol>\n<li>安装 <code>python-dotenv</code>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install python-dotenv</span><br></pre></td></tr></table></figure></li>\n<li>在项目根目录创建 <code>.env</code> 文件（<strong>不要提交到版本控制</strong>）：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SECRET_KEY=your-secret-key-here</span><br><span class=\"line\">DATABASE_URL=postgresql://user:password@localhost/prod_db</span><br><span class=\"line\">DEV_DATABASE_URL=sqlite:///dev.db</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>config.py</code> 中加载：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv</span><br><span class=\"line\">load_dotenv()  <span class=\"comment\"># 自动加载.env文件</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"b-生产环境直接设置环境变量\"><a href=\"#b-生产环境直接设置环境变量\" class=\"headerlink\" title=\"b. 生产环境直接设置环境变量\"></a><strong>b. 生产环境直接设置环境变量</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux/macOS</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SECRET_KEY=your-secret-key</span><br><span class=\"line\"><span class=\"built_in\">export</span> DATABASE_URL=postgresql://user:password@host/db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> SECRET_KEY=your-secret-key</span><br><span class=\"line\"><span class=\"built_in\">set</span> DATABASE_URL=postgresql://user:password@host/db</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-在Flask应用中使用配置\"><a href=\"#4-在Flask应用中使用配置\" class=\"headerlink\" title=\"4. 在Flask应用中使用配置\"></a><strong>4. 在Flask应用中使用配置</strong></h3><p>在 <code>app/__init__.py</code> 的工厂函数中动态加载配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> config <span class=\"keyword\">import</span> config  <span class=\"comment\"># 导入config字典</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_app</span>(<span class=\"params\">config_name=<span class=\"string\">&#x27;default&#x27;</span></span>):</span><br><span class=\"line\">    app = Flask(__name__)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 从配置类加载设置</span></span><br><span class=\"line\">    app.config.from_object(config[config_name])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 可选：从instance文件夹加载私有配置</span></span><br><span class=\"line\">    <span class=\"comment\"># app.config.from_pyfile(&#x27;config.py&#x27;, silent=True)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> app</span><br></pre></td></tr></table></figure>\n\n<p>启动时指定环境（如生产环境）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># run.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> create_app</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app(<span class=\"string\">&#x27;production&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-最佳实践\"><a href=\"#5-最佳实践\" class=\"headerlink\" title=\"5. 最佳实践\"></a><strong>5. 最佳实践</strong></h3><ol>\n<li><strong>分离不同环境的配置</strong>：开发、测试、生产环境使用不同的数据库和参数。</li>\n<li><strong>敏感信息不上传</strong>：通过 <code>.gitignore</code> 排除 <code>.env</code> 和 <code>instance/</code> 文件夹。</li>\n<li><strong>使用实例文件夹（Instance Folder）</strong>：<ul>\n<li>创建 <code>instance</code> 目录（与 <code>app</code> 同级）</li>\n<li>在 <code>instance/config.py</code> 中存放生产环境私有配置：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># instance/config.py</span></span><br><span class=\"line\">SECRET_KEY = <span class=\"string\">&#x27;production-secret-key&#x27;</span></span><br><span class=\"line\">DATABASE_URL = <span class=\"string\">&#x27;postgresql://user:password@host/db&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>加载配置：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.config.from_pyfile(<span class=\"string\">&#x27;config.py&#x27;</span>, silent=<span class=\"literal\">True</span>)  <span class=\"comment\"># silent=True表示文件不存在时不报错</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"6-完整配置示例\"><a href=\"#6-完整配置示例\" class=\"headerlink\" title=\"6. 完整配置示例\"></a><strong>6. 完整配置示例</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv</span><br><span class=\"line\"></span><br><span class=\"line\">load_dotenv()</span><br><span class=\"line\"></span><br><span class=\"line\">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Config</span>:</span><br><span class=\"line\">    SECRET_KEY = os.environ.get(<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;dev-fallback-key&#x27;</span></span><br><span class=\"line\">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br><span class=\"line\">    MAIL_SERVER = os.environ.get(<span class=\"string\">&#x27;MAIL_SERVER&#x27;</span>, <span class=\"string\">&#x27;smtp.googlemail.com&#x27;</span>)</span><br><span class=\"line\">    MAIL_PORT = <span class=\"built_in\">int</span>(os.environ.get(<span class=\"string\">&#x27;MAIL_PORT&#x27;</span>, <span class=\"string\">&#x27;587&#x27;</span>))</span><br><span class=\"line\">    MAIL_USE_TLS = os.environ.get(<span class=\"string\">&#x27;MAIL_USE_TLS&#x27;</span>, <span class=\"string\">&#x27;true&#x27;</span>).lower() <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;on&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>]</span><br><span class=\"line\">    MAIL_USERNAME = os.environ.get(<span class=\"string\">&#x27;MAIL_USERNAME&#x27;</span>)</span><br><span class=\"line\">    MAIL_PASSWORD = os.environ.get(<span class=\"string\">&#x27;MAIL_PASSWORD&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DevelopmentConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    DEBUG = <span class=\"literal\">True</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DEV_DB_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class=\"string\">&#x27;dev.db&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProductionConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class=\"string\">&#x27;prod.db&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;development&#x27;</span>: DevelopmentConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;production&#x27;</span>: ProductionConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: DevelopmentConfig</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过这种方式，你可以轻松管理不同环境的配置，同时确保敏感信息的安全性。</p>\n","excerpt":"","more":"<p>在 Flask 项目中，<code>config.py</code> 文件用于集中管理应用的配置参数（如数据库连接、密钥、调试模式等）。以下是一个典型的配置文件的编写方式和最佳实践：</p>\n<hr>\n<h3 id=\"1-基础-config-py-示例\"><a href=\"#1-基础-config-py-示例\" class=\"headerlink\" title=\"1. 基础 config.py 示例\"></a><strong>1. 基础 <code>config.py</code> 示例</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv  <span class=\"comment\"># 可选：用于加载.env文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载.env文件（如果存在）</span></span><br><span class=\"line\">load_dotenv()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Config</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 基础配置（通用配置）</span></span><br><span class=\"line\">    SECRET_KEY = os.environ.get(<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;your-default-secret-key&#x27;</span></span><br><span class=\"line\">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span>  <span class=\"comment\"># 禁用SQLAlchemy事件系统（推荐关闭）</span></span><br><span class=\"line\">    DEBUG = <span class=\"literal\">False</span>  <span class=\"comment\"># 默认关闭调试模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DevelopmentConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 开发环境配置</span></span><br><span class=\"line\">    DEBUG = <span class=\"literal\">True</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DEV_DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(os.path.dirname(__file__), <span class=\"string\">&#x27;data-dev.sqlite&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestingConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 测试环境配置</span></span><br><span class=\"line\">    TESTING = <span class=\"literal\">True</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;TEST_DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;sqlite:///:memory:&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProductionConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 生产环境配置</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(os.path.dirname(__file__), <span class=\"string\">&#x27;data.sqlite&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置类映射（便于动态选择）</span></span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;development&#x27;</span>: DevelopmentConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;testing&#x27;</span>: TestingConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;production&#x27;</span>: ProductionConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: DevelopmentConfig</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-关键配置项说明\"><a href=\"#2-关键配置项说明\" class=\"headerlink\" title=\"2. 关键配置项说明\"></a><strong>2. 关键配置项说明</strong></h3><h4 id=\"a-必须配置项\"><a href=\"#a-必须配置项\" class=\"headerlink\" title=\"a. 必须配置项\"></a><strong>a. 必须配置项</strong></h4><ul>\n<li>**<code>SECRET_KEY</code>**：用于加密会话、CSRF令牌等敏感操作。<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">SECRET_KEY = os.environ.get(<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;hardcoded-fallback-key&#x27;</span>  <span class=\"comment\"># 优先从环境变量读取</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>生产环境中务必使用环境变量</strong>，避免硬编码密钥！</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"b-数据库配置\"><a href=\"#b-数据库配置\" class=\"headerlink\" title=\"b. 数据库配置\"></a><strong>b. 数据库配置</strong></h4><ul>\n<li>**<code>SQLALCHEMY_DATABASE_URI</code>**：数据库连接字符串。<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例：</span></span><br><span class=\"line\"><span class=\"comment\"># PostgreSQL: postgresql://user:password@localhost/mydb</span></span><br><span class=\"line\"><span class=\"comment\"># MySQL: mysql+pymysql://user:password@localhost/mydb</span></span><br><span class=\"line\"><span class=\"comment\"># SQLite: sqlite:///absolute/path/to/db.sqlite</span></span><br><span class=\"line\">SQLALCHEMY_DATABASE_URI = <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class=\"string\">&#x27;app.db&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"c-调试与安全\"><a href=\"#c-调试与安全\" class=\"headerlink\" title=\"c. 调试与安全\"></a><strong>c. 调试与安全</strong></h4><ul>\n<li>**<code>DEBUG</code>**：开发时设为 <code>True</code>，生产环境必须设为 <code>False</code>。</li>\n<li>**<code>TESTING</code>**：单元测试时启用，会禁用某些安全检查。</li>\n</ul>\n<hr>\n<h3 id=\"3-环境变量与敏感信息\"><a href=\"#3-环境变量与敏感信息\" class=\"headerlink\" title=\"3. 环境变量与敏感信息\"></a><strong>3. 环境变量与敏感信息</strong></h3><h4 id=\"a-使用-env-文件（推荐）\"><a href=\"#a-使用-env-文件（推荐）\" class=\"headerlink\" title=\"a. 使用 .env 文件（推荐）\"></a><strong>a. 使用 <code>.env</code> 文件（推荐）</strong></h4><ol>\n<li>安装 <code>python-dotenv</code>：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install python-dotenv</span><br></pre></td></tr></table></figure></li>\n<li>在项目根目录创建 <code>.env</code> 文件（<strong>不要提交到版本控制</strong>）：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SECRET_KEY=your-secret-key-here</span><br><span class=\"line\">DATABASE_URL=postgresql://user:password@localhost/prod_db</span><br><span class=\"line\">DEV_DATABASE_URL=sqlite:///dev.db</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>config.py</code> 中加载：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv</span><br><span class=\"line\">load_dotenv()  <span class=\"comment\"># 自动加载.env文件</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"b-生产环境直接设置环境变量\"><a href=\"#b-生产环境直接设置环境变量\" class=\"headerlink\" title=\"b. 生产环境直接设置环境变量\"></a><strong>b. 生产环境直接设置环境变量</strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux/macOS</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SECRET_KEY=your-secret-key</span><br><span class=\"line\"><span class=\"built_in\">export</span> DATABASE_URL=postgresql://user:password@host/db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> SECRET_KEY=your-secret-key</span><br><span class=\"line\"><span class=\"built_in\">set</span> DATABASE_URL=postgresql://user:password@host/db</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-在Flask应用中使用配置\"><a href=\"#4-在Flask应用中使用配置\" class=\"headerlink\" title=\"4. 在Flask应用中使用配置\"></a><strong>4. 在Flask应用中使用配置</strong></h3><p>在 <code>app/__init__.py</code> 的工厂函数中动态加载配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> config <span class=\"keyword\">import</span> config  <span class=\"comment\"># 导入config字典</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_app</span>(<span class=\"params\">config_name=<span class=\"string\">&#x27;default&#x27;</span></span>):</span><br><span class=\"line\">    app = Flask(__name__)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 从配置类加载设置</span></span><br><span class=\"line\">    app.config.from_object(config[config_name])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 可选：从instance文件夹加载私有配置</span></span><br><span class=\"line\">    <span class=\"comment\"># app.config.from_pyfile(&#x27;config.py&#x27;, silent=True)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> app</span><br></pre></td></tr></table></figure>\n\n<p>启动时指定环境（如生产环境）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># run.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> create_app</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app(<span class=\"string\">&#x27;production&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-最佳实践\"><a href=\"#5-最佳实践\" class=\"headerlink\" title=\"5. 最佳实践\"></a><strong>5. 最佳实践</strong></h3><ol>\n<li><strong>分离不同环境的配置</strong>：开发、测试、生产环境使用不同的数据库和参数。</li>\n<li><strong>敏感信息不上传</strong>：通过 <code>.gitignore</code> 排除 <code>.env</code> 和 <code>instance/</code> 文件夹。</li>\n<li><strong>使用实例文件夹（Instance Folder）</strong>：<ul>\n<li>创建 <code>instance</code> 目录（与 <code>app</code> 同级）</li>\n<li>在 <code>instance/config.py</code> 中存放生产环境私有配置：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># instance/config.py</span></span><br><span class=\"line\">SECRET_KEY = <span class=\"string\">&#x27;production-secret-key&#x27;</span></span><br><span class=\"line\">DATABASE_URL = <span class=\"string\">&#x27;postgresql://user:password@host/db&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>加载配置：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.config.from_pyfile(<span class=\"string\">&#x27;config.py&#x27;</span>, silent=<span class=\"literal\">True</span>)  <span class=\"comment\"># silent=True表示文件不存在时不报错</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"6-完整配置示例\"><a href=\"#6-完整配置示例\" class=\"headerlink\" title=\"6. 完整配置示例\"></a><strong>6. 完整配置示例</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv</span><br><span class=\"line\"></span><br><span class=\"line\">load_dotenv()</span><br><span class=\"line\"></span><br><span class=\"line\">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Config</span>:</span><br><span class=\"line\">    SECRET_KEY = os.environ.get(<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>) <span class=\"keyword\">or</span> <span class=\"string\">&#x27;dev-fallback-key&#x27;</span></span><br><span class=\"line\">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br><span class=\"line\">    MAIL_SERVER = os.environ.get(<span class=\"string\">&#x27;MAIL_SERVER&#x27;</span>, <span class=\"string\">&#x27;smtp.googlemail.com&#x27;</span>)</span><br><span class=\"line\">    MAIL_PORT = <span class=\"built_in\">int</span>(os.environ.get(<span class=\"string\">&#x27;MAIL_PORT&#x27;</span>, <span class=\"string\">&#x27;587&#x27;</span>))</span><br><span class=\"line\">    MAIL_USE_TLS = os.environ.get(<span class=\"string\">&#x27;MAIL_USE_TLS&#x27;</span>, <span class=\"string\">&#x27;true&#x27;</span>).lower() <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;on&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>]</span><br><span class=\"line\">    MAIL_USERNAME = os.environ.get(<span class=\"string\">&#x27;MAIL_USERNAME&#x27;</span>)</span><br><span class=\"line\">    MAIL_PASSWORD = os.environ.get(<span class=\"string\">&#x27;MAIL_PASSWORD&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DevelopmentConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    DEBUG = <span class=\"literal\">True</span></span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DEV_DB_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class=\"string\">&#x27;dev.db&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProductionConfig</span>(<span class=\"title class_ inherited__\">Config</span>):</span><br><span class=\"line\">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class=\"string\">&#x27;DATABASE_URL&#x27;</span>) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">        <span class=\"string\">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class=\"string\">&#x27;prod.db&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;development&#x27;</span>: DevelopmentConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;production&#x27;</span>: ProductionConfig,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: DevelopmentConfig</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过这种方式，你可以轻松管理不同环境的配置，同时确保敏感信息的安全性。</p>\n"},{"title":"算法基础知识","date":"2024-06-26T10:00:00.000Z","updated":"2024-06-26T10:00:00.000Z","keywords":["hexo部署"],"description":"hexo+github部署个人博客","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"# 部署环境\n## 1.安装git和node.js\n## 2.本地连接github\n### 2.1.设置username和email\n```\ngit config --global user.name \"username\"\ngit cinfig --global user.email \"email\"\n```\n### 2.2.创建ssh密钥文件\n#### 2.2.1.创建密钥\n```\nssh-keygen -t rsa -C \"email\" \n```\n#### 2.2.2.进入对应目录查看密钥：\n\nc/Users/Administrator/.ssh/id_rsa.pub\n\n#### 2.2.3.在GitHub上建立密钥\n\nSettings => SSH and GPG keys => New SSH Key  \n\n## 3.创建项目\nRepository name取名格式：用户名.github.io\n## 4.本地安装hexo\n### 4.1.安装cnpm\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n### 4.2.安装hexo\n#### 4.2.1.安装hexo-cli\n```\ncnpm install -g hexo-cli\n```\n#### 4.2.2.初始化hexo\n```\nhexo init\n```\n#### 4.2.3.配置 _config.yml\n```\ndeploy:\n  type: 'git'\n  repository: 'https://github.com/你的地址'\n  branch: 'master'\n```\n#### 4.2.4.发布到GitHub\n```\n# 安装上传工具\ncnpm install hexo-deployer-git\n# 上传到GitHub\nhexo d\n```\n### 5.上传文章\n#### 5.1.创建新文章\n```\nhexo new <title>\n```\n#### 5.2.清除旧数据\n```\nhexo clean\n```\n#### 5.3.生成新页面\n```\nhexo g\n```\n#### 5.3.文章预览\n```\nhexo s\n```\n#### 5.4.上传到GitHub\n```\nhexo d\n```","source":"_posts/hexo+github部署博客/hexo+github部署博客.md","raw":"---\ntitle: 算法基础知识\ndate: 2024-06-26 18:00:00\nupdated: 2024-06-26 18:00:00\ntags: \n - hexo\ncategories: \n - 技术\n - hexo\nkeywords: \n - hexo部署\ndescription: hexo+github部署个人博客\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n# 部署环境\n## 1.安装git和node.js\n## 2.本地连接github\n### 2.1.设置username和email\n```\ngit config --global user.name \"username\"\ngit cinfig --global user.email \"email\"\n```\n### 2.2.创建ssh密钥文件\n#### 2.2.1.创建密钥\n```\nssh-keygen -t rsa -C \"email\" \n```\n#### 2.2.2.进入对应目录查看密钥：\n\nc/Users/Administrator/.ssh/id_rsa.pub\n\n#### 2.2.3.在GitHub上建立密钥\n\nSettings => SSH and GPG keys => New SSH Key  \n\n## 3.创建项目\nRepository name取名格式：用户名.github.io\n## 4.本地安装hexo\n### 4.1.安装cnpm\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n### 4.2.安装hexo\n#### 4.2.1.安装hexo-cli\n```\ncnpm install -g hexo-cli\n```\n#### 4.2.2.初始化hexo\n```\nhexo init\n```\n#### 4.2.3.配置 _config.yml\n```\ndeploy:\n  type: 'git'\n  repository: 'https://github.com/你的地址'\n  branch: 'master'\n```\n#### 4.2.4.发布到GitHub\n```\n# 安装上传工具\ncnpm install hexo-deployer-git\n# 上传到GitHub\nhexo d\n```\n### 5.上传文章\n#### 5.1.创建新文章\n```\nhexo new <title>\n```\n#### 5.2.清除旧数据\n```\nhexo clean\n```\n#### 5.3.生成新页面\n```\nhexo g\n```\n#### 5.3.文章预览\n```\nhexo s\n```\n#### 5.4.上传到GitHub\n```\nhexo d\n```","slug":"hexo+github部署博客/hexo+github部署博客","published":1,"layout":"post","photos":[],"_id":"cmctwyvaw000jx4grd0uccjdf","content":"<h1 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h1><h2 id=\"1-安装git和node-js\"><a href=\"#1-安装git和node-js\" class=\"headerlink\" title=\"1.安装git和node.js\"></a>1.安装git和node.js</h2><h2 id=\"2-本地连接github\"><a href=\"#2-本地连接github\" class=\"headerlink\" title=\"2.本地连接github\"></a>2.本地连接github</h2><h3 id=\"2-1-设置username和email\"><a href=\"#2-1-设置username和email\" class=\"headerlink\" title=\"2.1.设置username和email\"></a>2.1.设置username和email</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;username&quot;</span><br><span class=\"line\">git cinfig --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-创建ssh密钥文件\"><a href=\"#2-2-创建ssh密钥文件\" class=\"headerlink\" title=\"2.2.创建ssh密钥文件\"></a>2.2.创建ssh密钥文件</h3><h4 id=\"2-2-1-创建密钥\"><a href=\"#2-2-1-创建密钥\" class=\"headerlink\" title=\"2.2.1.创建密钥\"></a>2.2.1.创建密钥</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;email&quot; </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-进入对应目录查看密钥：\"><a href=\"#2-2-2-进入对应目录查看密钥：\" class=\"headerlink\" title=\"2.2.2.进入对应目录查看密钥：\"></a>2.2.2.进入对应目录查看密钥：</h4><p>c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa.pub</p>\n<h4 id=\"2-2-3-在GitHub上建立密钥\"><a href=\"#2-2-3-在GitHub上建立密钥\" class=\"headerlink\" title=\"2.2.3.在GitHub上建立密钥\"></a>2.2.3.在GitHub上建立密钥</h4><p>Settings &#x3D;&gt; SSH and GPG keys &#x3D;&gt; New SSH Key  </p>\n<h2 id=\"3-创建项目\"><a href=\"#3-创建项目\" class=\"headerlink\" title=\"3.创建项目\"></a>3.创建项目</h2><p>Repository name取名格式：用户名.github.io</p>\n<h2 id=\"4-本地安装hexo\"><a href=\"#4-本地安装hexo\" class=\"headerlink\" title=\"4.本地安装hexo\"></a>4.本地安装hexo</h2><h3 id=\"4-1-安装cnpm\"><a href=\"#4-1-安装cnpm\" class=\"headerlink\" title=\"4.1.安装cnpm\"></a>4.1.安装cnpm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-安装hexo\"><a href=\"#4-2-安装hexo\" class=\"headerlink\" title=\"4.2.安装hexo\"></a>4.2.安装hexo</h3><h4 id=\"4-2-1-安装hexo-cli\"><a href=\"#4-2-1-安装hexo-cli\" class=\"headerlink\" title=\"4.2.1.安装hexo-cli\"></a>4.2.1.安装hexo-cli</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-2-初始化hexo\"><a href=\"#4-2-2-初始化hexo\" class=\"headerlink\" title=\"4.2.2.初始化hexo\"></a>4.2.2.初始化hexo</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-3-配置-config-yml\"><a href=\"#4-2-3-配置-config-yml\" class=\"headerlink\" title=\"4.2.3.配置 _config.yml\"></a>4.2.3.配置 _config.yml</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: &#x27;git&#x27;</span><br><span class=\"line\">  repository: &#x27;https://github.com/你的地址&#x27;</span><br><span class=\"line\">  branch: &#x27;master&#x27;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-4-发布到GitHub\"><a href=\"#4-2-4-发布到GitHub\" class=\"headerlink\" title=\"4.2.4.发布到GitHub\"></a>4.2.4.发布到GitHub</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装上传工具</span><br><span class=\"line\">cnpm install hexo-deployer-git</span><br><span class=\"line\"># 上传到GitHub</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-上传文章\"><a href=\"#5-上传文章\" class=\"headerlink\" title=\"5.上传文章\"></a>5.上传文章</h3><h4 id=\"5-1-创建新文章\"><a href=\"#5-1-创建新文章\" class=\"headerlink\" title=\"5.1.创建新文章\"></a>5.1.创建新文章</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-清除旧数据\"><a href=\"#5-2-清除旧数据\" class=\"headerlink\" title=\"5.2.清除旧数据\"></a>5.2.清除旧数据</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-生成新页面\"><a href=\"#5-3-生成新页面\" class=\"headerlink\" title=\"5.3.生成新页面\"></a>5.3.生成新页面</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-文章预览\"><a href=\"#5-3-文章预览\" class=\"headerlink\" title=\"5.3.文章预览\"></a>5.3.文章预览</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-4-上传到GitHub\"><a href=\"#5-4-上传到GitHub\" class=\"headerlink\" title=\"5.4.上传到GitHub\"></a>5.4.上传到GitHub</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h1><h2 id=\"1-安装git和node-js\"><a href=\"#1-安装git和node-js\" class=\"headerlink\" title=\"1.安装git和node.js\"></a>1.安装git和node.js</h2><h2 id=\"2-本地连接github\"><a href=\"#2-本地连接github\" class=\"headerlink\" title=\"2.本地连接github\"></a>2.本地连接github</h2><h3 id=\"2-1-设置username和email\"><a href=\"#2-1-设置username和email\" class=\"headerlink\" title=\"2.1.设置username和email\"></a>2.1.设置username和email</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;username&quot;</span><br><span class=\"line\">git cinfig --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-创建ssh密钥文件\"><a href=\"#2-2-创建ssh密钥文件\" class=\"headerlink\" title=\"2.2.创建ssh密钥文件\"></a>2.2.创建ssh密钥文件</h3><h4 id=\"2-2-1-创建密钥\"><a href=\"#2-2-1-创建密钥\" class=\"headerlink\" title=\"2.2.1.创建密钥\"></a>2.2.1.创建密钥</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;email&quot; </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-进入对应目录查看密钥：\"><a href=\"#2-2-2-进入对应目录查看密钥：\" class=\"headerlink\" title=\"2.2.2.进入对应目录查看密钥：\"></a>2.2.2.进入对应目录查看密钥：</h4><p>c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa.pub</p>\n<h4 id=\"2-2-3-在GitHub上建立密钥\"><a href=\"#2-2-3-在GitHub上建立密钥\" class=\"headerlink\" title=\"2.2.3.在GitHub上建立密钥\"></a>2.2.3.在GitHub上建立密钥</h4><p>Settings &#x3D;&gt; SSH and GPG keys &#x3D;&gt; New SSH Key  </p>\n<h2 id=\"3-创建项目\"><a href=\"#3-创建项目\" class=\"headerlink\" title=\"3.创建项目\"></a>3.创建项目</h2><p>Repository name取名格式：用户名.github.io</p>\n<h2 id=\"4-本地安装hexo\"><a href=\"#4-本地安装hexo\" class=\"headerlink\" title=\"4.本地安装hexo\"></a>4.本地安装hexo</h2><h3 id=\"4-1-安装cnpm\"><a href=\"#4-1-安装cnpm\" class=\"headerlink\" title=\"4.1.安装cnpm\"></a>4.1.安装cnpm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-安装hexo\"><a href=\"#4-2-安装hexo\" class=\"headerlink\" title=\"4.2.安装hexo\"></a>4.2.安装hexo</h3><h4 id=\"4-2-1-安装hexo-cli\"><a href=\"#4-2-1-安装hexo-cli\" class=\"headerlink\" title=\"4.2.1.安装hexo-cli\"></a>4.2.1.安装hexo-cli</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-2-初始化hexo\"><a href=\"#4-2-2-初始化hexo\" class=\"headerlink\" title=\"4.2.2.初始化hexo\"></a>4.2.2.初始化hexo</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-3-配置-config-yml\"><a href=\"#4-2-3-配置-config-yml\" class=\"headerlink\" title=\"4.2.3.配置 _config.yml\"></a>4.2.3.配置 _config.yml</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: &#x27;git&#x27;</span><br><span class=\"line\">  repository: &#x27;https://github.com/你的地址&#x27;</span><br><span class=\"line\">  branch: &#x27;master&#x27;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-4-发布到GitHub\"><a href=\"#4-2-4-发布到GitHub\" class=\"headerlink\" title=\"4.2.4.发布到GitHub\"></a>4.2.4.发布到GitHub</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装上传工具</span><br><span class=\"line\">cnpm install hexo-deployer-git</span><br><span class=\"line\"># 上传到GitHub</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-上传文章\"><a href=\"#5-上传文章\" class=\"headerlink\" title=\"5.上传文章\"></a>5.上传文章</h3><h4 id=\"5-1-创建新文章\"><a href=\"#5-1-创建新文章\" class=\"headerlink\" title=\"5.1.创建新文章\"></a>5.1.创建新文章</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-清除旧数据\"><a href=\"#5-2-清除旧数据\" class=\"headerlink\" title=\"5.2.清除旧数据\"></a>5.2.清除旧数据</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-生成新页面\"><a href=\"#5-3-生成新页面\" class=\"headerlink\" title=\"5.3.生成新页面\"></a>5.3.生成新页面</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-文章预览\"><a href=\"#5-3-文章预览\" class=\"headerlink\" title=\"5.3.文章预览\"></a>5.3.文章预览</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-4-上传到GitHub\"><a href=\"#5-4-上传到GitHub\" class=\"headerlink\" title=\"5.4.上传到GitHub\"></a>5.4.上传到GitHub</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>"},{"title":"oracle学习笔记-12c后的新特性cdb和pdb","date":"2025-04-12T12:29:34.000Z","updated":"2025-04-12T12:29:34.000Z","keywords":["oracle","cdb","pdb","新特性"],"description":"描述了oracle12c后新增的cdb和pdb的特性","_content":"Oracle 12c 引入了 **CDB（Container Database，容器数据库）** 和 **PDB（Pluggable Database，可插拔数据库）** 的新特性，通过多租户架构（Multitenant Environment）实现了更高效的资源管理和数据库部署。以下是其核心概念与特性的详细说明：\n\n---\n\n### **1. CDB 与 PDB 的核心概念**\n#### **CDB（容器数据库）**\n- **定义**：CDB 是一个物理数据库容器，可以承载多个逻辑上独立的 PDB。所有 PDB 共享 CDB 的硬件资源（如内存、CPU）和后台进程（如 SGA、PGA、Redo Log）。\n- **组成**：\n  - **CDB$ROOT**：根容器，存储 Oracle 提供的元数据（如 PL/SQL 包源代码）和公共用户（Common User），用于全局管理所有 PDB。\n  - **PDB$SEED**：种子容器，作为创建新 PDB 的模板，不可修改。\n  - **PDB**：用户创建的可插拔数据库，每个 PDB 独立存储业务数据，对外表现为一个完整的数据库。\n\n#### **PDB（可插拔数据库）**\n- **定义**：PDB 是逻辑上独立的数据库，可以像传统数据库一样运行，但物理上依附于 CDB。PDB 支持“热插拔”，即可以在线迁移到其他 CDB 中。\n- **特性**：\n  - **向后兼容**：PDB 的操作方式与传统数据库完全一致，支持常规的 DDL、DML 操作。\n  - **独立性**：每个 PDB 可以单独设置字符集、时区、表空间等参数。\n\n---\n\n### **2. CDB 与 PDB 的架构优势**\n1. **资源高效利用**  \n   - 多个 PDB 共享 CDB 的 SGA、PGA、Redo Log 等资源，减少硬件开销。\n   - 通过资源管理器（Resource Manager）为每个 PDB 分配 CPU 和内存的最低使用份额。\n\n2. **简化运维**  \n   - **快速克隆**：通过 `CREATE PLUGGABLE DATABASE ... FROM` 命令从现有 PDB 或种子模板快速创建新 PDB。\n   - **无缝迁移**：PDB 可导出为 XML 文件并迁移到其他 CDB，无需停机。\n\n3. **高可用性与隔离性**  \n   - PDB 可以独立启动、关闭或备份，故障隔离性更强。\n   - 支持在 CDB 级别实现统一的高可用性策略（如 Data Guard）。\n\n---\n\n### **3. 关键操作与命令**\n#### **（1）查看与切换容器**\n- **查看当前容器**：\n  ```sql\n  SHOW CON_NAME;  -- 当前容器名称\n  SELECT sys_context('userenv', 'con_name') FROM dual; \n  ```\n- **切换容器**：\n  ```sql\n  ALTER SESSION SET CONTAINER = pdb_name;  -- 切换到指定 PDB\n  ALTER SESSION SET CONTAINER = CDB$ROOT;  -- 切换回根容器\n  ```\n\n#### **（2）管理 PDB**\n- **创建 PDB**：\n  ```sql\n  CREATE PLUGGABLE DATABASE pdb1 \n    ADMIN USER admin IDENTIFIED BY password\n    FILE_NAME_CONVERT = ('/pdbseed/', '/pdb1/'); \n  ```\n- **启动/关闭 PDB**：\n  ```sql\n  ALTER PLUGGABLE DATABASE pdb1 OPEN;  -- 启动\n  ALTER PLUGGABLE DATABASE pdb1 CLOSE; -- 关闭\n  ```\n- **自动启动 PDB**：\n  ```sql\n  -- 创建触发器实现 CDB 启动时自动打开所有 PDB\n  CREATE OR REPLACE TRIGGER open_pdbs \n  AFTER STARTUP ON DATABASE \n  BEGIN \n    EXECUTE IMMEDIATE 'ALTER PLUGGABLE DATABASE ALL OPEN'; \n  END; \n  ```\n\n---\n\n### **4. 与传统架构的对比**\n| **特性**         | **传统数据库（非 CDB）**        | **CDB-PDB 架构**                |\n|------------------|--------------------------------|---------------------------------|\n| **实例与数据库关系** | 一对一或多对一（RAC）          | 一对多（一个实例管理多个 PDB）  |\n| **资源隔离**       | 独立分配资源，冗余开销大       | 共享资源，按需分配              |\n| **运维复杂度**     | 每个数据库需单独维护           | 集中管理，批量操作              |\n| **迁移灵活性**     | 需导出/导入完整数据库          | 支持 PDB 热插拔迁移             |\n\n---\n\n### **5. 应用场景**\n1. **多租户 SaaS 平台**：每个租户对应一个 PDB，实现数据隔离与资源共享。\n2. **开发与测试环境**：快速克隆生产环境的 PDB 用于测试，减少数据准备时间。\n3. **混合工作负载**：为 OLTP 和 OLAP 分配不同的 PDB，通过资源管理器优化性能。\n\n---\n\n### **6. 注意事项**\n- **权限管理**：公共用户（Common User）以 `C##` 开头，可在所有容器中操作；本地用户（Local User）仅限特定 PDB。\n- **版本兼容性**：CDB-PDB 特性需 Oracle 12c 及以上版本，且需要企业版许可。\n\n通过 CDB-PDB 架构，Oracle 12c 实现了数据库资源的灵活管理与高效利用，尤其适合需要快速扩展和简化运维的企业场景。更多操作细节可参考 Oracle 官方文档或相关技术博客。","source":"_posts/oracle学习笔记-12c后的新特性cdb和pdb/oracle学习笔记-12c后的新特性cdb和pdb.md","raw":"---\ntitle: oracle学习笔记-12c后的新特性cdb和pdb\ndate: 2025-04-12 20:29:34\nupdated: 2025-04-12 20:29:34\ntags:\n - oracle\ncategories:\n - 技术\n - oracle\nkeywords:\n - oracle\n - cdb\n - pdb\n - 新特性\ndescription: 描述了oracle12c后新增的cdb和pdb的特性\n---\nOracle 12c 引入了 **CDB（Container Database，容器数据库）** 和 **PDB（Pluggable Database，可插拔数据库）** 的新特性，通过多租户架构（Multitenant Environment）实现了更高效的资源管理和数据库部署。以下是其核心概念与特性的详细说明：\n\n---\n\n### **1. CDB 与 PDB 的核心概念**\n#### **CDB（容器数据库）**\n- **定义**：CDB 是一个物理数据库容器，可以承载多个逻辑上独立的 PDB。所有 PDB 共享 CDB 的硬件资源（如内存、CPU）和后台进程（如 SGA、PGA、Redo Log）。\n- **组成**：\n  - **CDB$ROOT**：根容器，存储 Oracle 提供的元数据（如 PL/SQL 包源代码）和公共用户（Common User），用于全局管理所有 PDB。\n  - **PDB$SEED**：种子容器，作为创建新 PDB 的模板，不可修改。\n  - **PDB**：用户创建的可插拔数据库，每个 PDB 独立存储业务数据，对外表现为一个完整的数据库。\n\n#### **PDB（可插拔数据库）**\n- **定义**：PDB 是逻辑上独立的数据库，可以像传统数据库一样运行，但物理上依附于 CDB。PDB 支持“热插拔”，即可以在线迁移到其他 CDB 中。\n- **特性**：\n  - **向后兼容**：PDB 的操作方式与传统数据库完全一致，支持常规的 DDL、DML 操作。\n  - **独立性**：每个 PDB 可以单独设置字符集、时区、表空间等参数。\n\n---\n\n### **2. CDB 与 PDB 的架构优势**\n1. **资源高效利用**  \n   - 多个 PDB 共享 CDB 的 SGA、PGA、Redo Log 等资源，减少硬件开销。\n   - 通过资源管理器（Resource Manager）为每个 PDB 分配 CPU 和内存的最低使用份额。\n\n2. **简化运维**  \n   - **快速克隆**：通过 `CREATE PLUGGABLE DATABASE ... FROM` 命令从现有 PDB 或种子模板快速创建新 PDB。\n   - **无缝迁移**：PDB 可导出为 XML 文件并迁移到其他 CDB，无需停机。\n\n3. **高可用性与隔离性**  \n   - PDB 可以独立启动、关闭或备份，故障隔离性更强。\n   - 支持在 CDB 级别实现统一的高可用性策略（如 Data Guard）。\n\n---\n\n### **3. 关键操作与命令**\n#### **（1）查看与切换容器**\n- **查看当前容器**：\n  ```sql\n  SHOW CON_NAME;  -- 当前容器名称\n  SELECT sys_context('userenv', 'con_name') FROM dual; \n  ```\n- **切换容器**：\n  ```sql\n  ALTER SESSION SET CONTAINER = pdb_name;  -- 切换到指定 PDB\n  ALTER SESSION SET CONTAINER = CDB$ROOT;  -- 切换回根容器\n  ```\n\n#### **（2）管理 PDB**\n- **创建 PDB**：\n  ```sql\n  CREATE PLUGGABLE DATABASE pdb1 \n    ADMIN USER admin IDENTIFIED BY password\n    FILE_NAME_CONVERT = ('/pdbseed/', '/pdb1/'); \n  ```\n- **启动/关闭 PDB**：\n  ```sql\n  ALTER PLUGGABLE DATABASE pdb1 OPEN;  -- 启动\n  ALTER PLUGGABLE DATABASE pdb1 CLOSE; -- 关闭\n  ```\n- **自动启动 PDB**：\n  ```sql\n  -- 创建触发器实现 CDB 启动时自动打开所有 PDB\n  CREATE OR REPLACE TRIGGER open_pdbs \n  AFTER STARTUP ON DATABASE \n  BEGIN \n    EXECUTE IMMEDIATE 'ALTER PLUGGABLE DATABASE ALL OPEN'; \n  END; \n  ```\n\n---\n\n### **4. 与传统架构的对比**\n| **特性**         | **传统数据库（非 CDB）**        | **CDB-PDB 架构**                |\n|------------------|--------------------------------|---------------------------------|\n| **实例与数据库关系** | 一对一或多对一（RAC）          | 一对多（一个实例管理多个 PDB）  |\n| **资源隔离**       | 独立分配资源，冗余开销大       | 共享资源，按需分配              |\n| **运维复杂度**     | 每个数据库需单独维护           | 集中管理，批量操作              |\n| **迁移灵活性**     | 需导出/导入完整数据库          | 支持 PDB 热插拔迁移             |\n\n---\n\n### **5. 应用场景**\n1. **多租户 SaaS 平台**：每个租户对应一个 PDB，实现数据隔离与资源共享。\n2. **开发与测试环境**：快速克隆生产环境的 PDB 用于测试，减少数据准备时间。\n3. **混合工作负载**：为 OLTP 和 OLAP 分配不同的 PDB，通过资源管理器优化性能。\n\n---\n\n### **6. 注意事项**\n- **权限管理**：公共用户（Common User）以 `C##` 开头，可在所有容器中操作；本地用户（Local User）仅限特定 PDB。\n- **版本兼容性**：CDB-PDB 特性需 Oracle 12c 及以上版本，且需要企业版许可。\n\n通过 CDB-PDB 架构，Oracle 12c 实现了数据库资源的灵活管理与高效利用，尤其适合需要快速扩展和简化运维的企业场景。更多操作细节可参考 Oracle 官方文档或相关技术博客。","slug":"oracle学习笔记-12c后的新特性cdb和pdb/oracle学习笔记-12c后的新特性cdb和pdb","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvax000lx4grffmu01sp","content":"<p>Oracle 12c 引入了 <strong>CDB（Container Database，容器数据库）</strong> 和 <strong>PDB（Pluggable Database，可插拔数据库）</strong> 的新特性，通过多租户架构（Multitenant Environment）实现了更高效的资源管理和数据库部署。以下是其核心概念与特性的详细说明：</p>\n<hr>\n<h3 id=\"1-CDB-与-PDB-的核心概念\"><a href=\"#1-CDB-与-PDB-的核心概念\" class=\"headerlink\" title=\"1. CDB 与 PDB 的核心概念\"></a><strong>1. CDB 与 PDB 的核心概念</strong></h3><h4 id=\"CDB（容器数据库）\"><a href=\"#CDB（容器数据库）\" class=\"headerlink\" title=\"CDB（容器数据库）\"></a><strong>CDB（容器数据库）</strong></h4><ul>\n<li><strong>定义</strong>：CDB 是一个物理数据库容器，可以承载多个逻辑上独立的 PDB。所有 PDB 共享 CDB 的硬件资源（如内存、CPU）和后台进程（如 SGA、PGA、Redo Log）。</li>\n<li><strong>组成</strong>：<ul>\n<li><strong>CDB$ROOT</strong>：根容器，存储 Oracle 提供的元数据（如 PL&#x2F;SQL 包源代码）和公共用户（Common User），用于全局管理所有 PDB。</li>\n<li><strong>PDB$SEED</strong>：种子容器，作为创建新 PDB 的模板，不可修改。</li>\n<li><strong>PDB</strong>：用户创建的可插拔数据库，每个 PDB 独立存储业务数据，对外表现为一个完整的数据库。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"PDB（可插拔数据库）\"><a href=\"#PDB（可插拔数据库）\" class=\"headerlink\" title=\"PDB（可插拔数据库）\"></a><strong>PDB（可插拔数据库）</strong></h4><ul>\n<li><strong>定义</strong>：PDB 是逻辑上独立的数据库，可以像传统数据库一样运行，但物理上依附于 CDB。PDB 支持“热插拔”，即可以在线迁移到其他 CDB 中。</li>\n<li><strong>特性</strong>：<ul>\n<li><strong>向后兼容</strong>：PDB 的操作方式与传统数据库完全一致，支持常规的 DDL、DML 操作。</li>\n<li><strong>独立性</strong>：每个 PDB 可以单独设置字符集、时区、表空间等参数。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-CDB-与-PDB-的架构优势\"><a href=\"#2-CDB-与-PDB-的架构优势\" class=\"headerlink\" title=\"2. CDB 与 PDB 的架构优势\"></a><strong>2. CDB 与 PDB 的架构优势</strong></h3><ol>\n<li><p><strong>资源高效利用</strong>  </p>\n<ul>\n<li>多个 PDB 共享 CDB 的 SGA、PGA、Redo Log 等资源，减少硬件开销。</li>\n<li>通过资源管理器（Resource Manager）为每个 PDB 分配 CPU 和内存的最低使用份额。</li>\n</ul>\n</li>\n<li><p><strong>简化运维</strong>  </p>\n<ul>\n<li><strong>快速克隆</strong>：通过 <code>CREATE PLUGGABLE DATABASE ... FROM</code> 命令从现有 PDB 或种子模板快速创建新 PDB。</li>\n<li><strong>无缝迁移</strong>：PDB 可导出为 XML 文件并迁移到其他 CDB，无需停机。</li>\n</ul>\n</li>\n<li><p><strong>高可用性与隔离性</strong>  </p>\n<ul>\n<li>PDB 可以独立启动、关闭或备份，故障隔离性更强。</li>\n<li>支持在 CDB 级别实现统一的高可用性策略（如 Data Guard）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-关键操作与命令\"><a href=\"#3-关键操作与命令\" class=\"headerlink\" title=\"3. 关键操作与命令\"></a><strong>3. 关键操作与命令</strong></h3><h4 id=\"（1）查看与切换容器\"><a href=\"#（1）查看与切换容器\" class=\"headerlink\" title=\"（1）查看与切换容器\"></a><strong>（1）查看与切换容器</strong></h4><ul>\n<li><strong>查看当前容器</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> CON_NAME;  <span class=\"comment\">-- 当前容器名称</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sys_context(<span class=\"string\">&#x27;userenv&#x27;</span>, <span class=\"string\">&#x27;con_name&#x27;</span>) <span class=\"keyword\">FROM</span> dual; </span><br></pre></td></tr></table></figure></li>\n<li><strong>切换容器</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> SESSION <span class=\"keyword\">SET</span> CONTAINER <span class=\"operator\">=</span> pdb_name;  <span class=\"comment\">-- 切换到指定 PDB</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> SESSION <span class=\"keyword\">SET</span> CONTAINER <span class=\"operator\">=</span> CDB$ROOT;  <span class=\"comment\">-- 切换回根容器</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"（2）管理-PDB\"><a href=\"#（2）管理-PDB\" class=\"headerlink\" title=\"（2）管理 PDB\"></a><strong>（2）管理 PDB</strong></h4><ul>\n<li><strong>创建 PDB</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> PLUGGABLE DATABASE pdb1 </span><br><span class=\"line\">  ADMIN <span class=\"keyword\">USER</span> admin IDENTIFIED <span class=\"keyword\">BY</span> password</span><br><span class=\"line\">  FILE_NAME_CONVERT <span class=\"operator\">=</span> (<span class=\"string\">&#x27;/pdbseed/&#x27;</span>, <span class=\"string\">&#x27;/pdb1/&#x27;</span>); </span><br></pre></td></tr></table></figure></li>\n<li><strong>启动&#x2F;关闭 PDB</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> PLUGGABLE DATABASE pdb1 <span class=\"keyword\">OPEN</span>;  <span class=\"comment\">-- 启动</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> PLUGGABLE DATABASE pdb1 <span class=\"keyword\">CLOSE</span>; <span class=\"comment\">-- 关闭</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>自动启动 PDB</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建触发器实现 CDB 启动时自动打开所有 PDB</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> open_pdbs </span><br><span class=\"line\">AFTER STARTUP <span class=\"keyword\">ON</span> DATABASE </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">  <span class=\"keyword\">EXECUTE</span> IMMEDIATE <span class=\"string\">&#x27;ALTER PLUGGABLE DATABASE ALL OPEN&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">END</span>; </span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"4-与传统架构的对比\"><a href=\"#4-与传统架构的对比\" class=\"headerlink\" title=\"4. 与传统架构的对比\"></a><strong>4. 与传统架构的对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>传统数据库（非 CDB）</strong></th>\n<th><strong>CDB-PDB 架构</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>实例与数据库关系</strong></td>\n<td>一对一或多对一（RAC）</td>\n<td>一对多（一个实例管理多个 PDB）</td>\n</tr>\n<tr>\n<td><strong>资源隔离</strong></td>\n<td>独立分配资源，冗余开销大</td>\n<td>共享资源，按需分配</td>\n</tr>\n<tr>\n<td><strong>运维复杂度</strong></td>\n<td>每个数据库需单独维护</td>\n<td>集中管理，批量操作</td>\n</tr>\n<tr>\n<td><strong>迁移灵活性</strong></td>\n<td>需导出&#x2F;导入完整数据库</td>\n<td>支持 PDB 热插拔迁移</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5. 应用场景\"></a><strong>5. 应用场景</strong></h3><ol>\n<li><strong>多租户 SaaS 平台</strong>：每个租户对应一个 PDB，实现数据隔离与资源共享。</li>\n<li><strong>开发与测试环境</strong>：快速克隆生产环境的 PDB 用于测试，减少数据准备时间。</li>\n<li><strong>混合工作负载</strong>：为 OLTP 和 OLAP 分配不同的 PDB，通过资源管理器优化性能。</li>\n</ol>\n<hr>\n<h3 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a><strong>6. 注意事项</strong></h3><ul>\n<li><strong>权限管理</strong>：公共用户（Common User）以 <code>C##</code> 开头，可在所有容器中操作；本地用户（Local User）仅限特定 PDB。</li>\n<li><strong>版本兼容性</strong>：CDB-PDB 特性需 Oracle 12c 及以上版本，且需要企业版许可。</li>\n</ul>\n<p>通过 CDB-PDB 架构，Oracle 12c 实现了数据库资源的灵活管理与高效利用，尤其适合需要快速扩展和简化运维的企业场景。更多操作细节可参考 Oracle 官方文档或相关技术博客。</p>\n","excerpt":"","more":"<p>Oracle 12c 引入了 <strong>CDB（Container Database，容器数据库）</strong> 和 <strong>PDB（Pluggable Database，可插拔数据库）</strong> 的新特性，通过多租户架构（Multitenant Environment）实现了更高效的资源管理和数据库部署。以下是其核心概念与特性的详细说明：</p>\n<hr>\n<h3 id=\"1-CDB-与-PDB-的核心概念\"><a href=\"#1-CDB-与-PDB-的核心概念\" class=\"headerlink\" title=\"1. CDB 与 PDB 的核心概念\"></a><strong>1. CDB 与 PDB 的核心概念</strong></h3><h4 id=\"CDB（容器数据库）\"><a href=\"#CDB（容器数据库）\" class=\"headerlink\" title=\"CDB（容器数据库）\"></a><strong>CDB（容器数据库）</strong></h4><ul>\n<li><strong>定义</strong>：CDB 是一个物理数据库容器，可以承载多个逻辑上独立的 PDB。所有 PDB 共享 CDB 的硬件资源（如内存、CPU）和后台进程（如 SGA、PGA、Redo Log）。</li>\n<li><strong>组成</strong>：<ul>\n<li><strong>CDB$ROOT</strong>：根容器，存储 Oracle 提供的元数据（如 PL&#x2F;SQL 包源代码）和公共用户（Common User），用于全局管理所有 PDB。</li>\n<li><strong>PDB$SEED</strong>：种子容器，作为创建新 PDB 的模板，不可修改。</li>\n<li><strong>PDB</strong>：用户创建的可插拔数据库，每个 PDB 独立存储业务数据，对外表现为一个完整的数据库。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"PDB（可插拔数据库）\"><a href=\"#PDB（可插拔数据库）\" class=\"headerlink\" title=\"PDB（可插拔数据库）\"></a><strong>PDB（可插拔数据库）</strong></h4><ul>\n<li><strong>定义</strong>：PDB 是逻辑上独立的数据库，可以像传统数据库一样运行，但物理上依附于 CDB。PDB 支持“热插拔”，即可以在线迁移到其他 CDB 中。</li>\n<li><strong>特性</strong>：<ul>\n<li><strong>向后兼容</strong>：PDB 的操作方式与传统数据库完全一致，支持常规的 DDL、DML 操作。</li>\n<li><strong>独立性</strong>：每个 PDB 可以单独设置字符集、时区、表空间等参数。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-CDB-与-PDB-的架构优势\"><a href=\"#2-CDB-与-PDB-的架构优势\" class=\"headerlink\" title=\"2. CDB 与 PDB 的架构优势\"></a><strong>2. CDB 与 PDB 的架构优势</strong></h3><ol>\n<li><p><strong>资源高效利用</strong>  </p>\n<ul>\n<li>多个 PDB 共享 CDB 的 SGA、PGA、Redo Log 等资源，减少硬件开销。</li>\n<li>通过资源管理器（Resource Manager）为每个 PDB 分配 CPU 和内存的最低使用份额。</li>\n</ul>\n</li>\n<li><p><strong>简化运维</strong>  </p>\n<ul>\n<li><strong>快速克隆</strong>：通过 <code>CREATE PLUGGABLE DATABASE ... FROM</code> 命令从现有 PDB 或种子模板快速创建新 PDB。</li>\n<li><strong>无缝迁移</strong>：PDB 可导出为 XML 文件并迁移到其他 CDB，无需停机。</li>\n</ul>\n</li>\n<li><p><strong>高可用性与隔离性</strong>  </p>\n<ul>\n<li>PDB 可以独立启动、关闭或备份，故障隔离性更强。</li>\n<li>支持在 CDB 级别实现统一的高可用性策略（如 Data Guard）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-关键操作与命令\"><a href=\"#3-关键操作与命令\" class=\"headerlink\" title=\"3. 关键操作与命令\"></a><strong>3. 关键操作与命令</strong></h3><h4 id=\"（1）查看与切换容器\"><a href=\"#（1）查看与切换容器\" class=\"headerlink\" title=\"（1）查看与切换容器\"></a><strong>（1）查看与切换容器</strong></h4><ul>\n<li><strong>查看当前容器</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> CON_NAME;  <span class=\"comment\">-- 当前容器名称</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sys_context(<span class=\"string\">&#x27;userenv&#x27;</span>, <span class=\"string\">&#x27;con_name&#x27;</span>) <span class=\"keyword\">FROM</span> dual; </span><br></pre></td></tr></table></figure></li>\n<li><strong>切换容器</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> SESSION <span class=\"keyword\">SET</span> CONTAINER <span class=\"operator\">=</span> pdb_name;  <span class=\"comment\">-- 切换到指定 PDB</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> SESSION <span class=\"keyword\">SET</span> CONTAINER <span class=\"operator\">=</span> CDB$ROOT;  <span class=\"comment\">-- 切换回根容器</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"（2）管理-PDB\"><a href=\"#（2）管理-PDB\" class=\"headerlink\" title=\"（2）管理 PDB\"></a><strong>（2）管理 PDB</strong></h4><ul>\n<li><strong>创建 PDB</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> PLUGGABLE DATABASE pdb1 </span><br><span class=\"line\">  ADMIN <span class=\"keyword\">USER</span> admin IDENTIFIED <span class=\"keyword\">BY</span> password</span><br><span class=\"line\">  FILE_NAME_CONVERT <span class=\"operator\">=</span> (<span class=\"string\">&#x27;/pdbseed/&#x27;</span>, <span class=\"string\">&#x27;/pdb1/&#x27;</span>); </span><br></pre></td></tr></table></figure></li>\n<li><strong>启动&#x2F;关闭 PDB</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> PLUGGABLE DATABASE pdb1 <span class=\"keyword\">OPEN</span>;  <span class=\"comment\">-- 启动</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> PLUGGABLE DATABASE pdb1 <span class=\"keyword\">CLOSE</span>; <span class=\"comment\">-- 关闭</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>自动启动 PDB</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建触发器实现 CDB 启动时自动打开所有 PDB</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">TRIGGER</span> open_pdbs </span><br><span class=\"line\">AFTER STARTUP <span class=\"keyword\">ON</span> DATABASE </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">  <span class=\"keyword\">EXECUTE</span> IMMEDIATE <span class=\"string\">&#x27;ALTER PLUGGABLE DATABASE ALL OPEN&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">END</span>; </span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"4-与传统架构的对比\"><a href=\"#4-与传统架构的对比\" class=\"headerlink\" title=\"4. 与传统架构的对比\"></a><strong>4. 与传统架构的对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>传统数据库（非 CDB）</strong></th>\n<th><strong>CDB-PDB 架构</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>实例与数据库关系</strong></td>\n<td>一对一或多对一（RAC）</td>\n<td>一对多（一个实例管理多个 PDB）</td>\n</tr>\n<tr>\n<td><strong>资源隔离</strong></td>\n<td>独立分配资源，冗余开销大</td>\n<td>共享资源，按需分配</td>\n</tr>\n<tr>\n<td><strong>运维复杂度</strong></td>\n<td>每个数据库需单独维护</td>\n<td>集中管理，批量操作</td>\n</tr>\n<tr>\n<td><strong>迁移灵活性</strong></td>\n<td>需导出&#x2F;导入完整数据库</td>\n<td>支持 PDB 热插拔迁移</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5. 应用场景\"></a><strong>5. 应用场景</strong></h3><ol>\n<li><strong>多租户 SaaS 平台</strong>：每个租户对应一个 PDB，实现数据隔离与资源共享。</li>\n<li><strong>开发与测试环境</strong>：快速克隆生产环境的 PDB 用于测试，减少数据准备时间。</li>\n<li><strong>混合工作负载</strong>：为 OLTP 和 OLAP 分配不同的 PDB，通过资源管理器优化性能。</li>\n</ol>\n<hr>\n<h3 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a><strong>6. 注意事项</strong></h3><ul>\n<li><strong>权限管理</strong>：公共用户（Common User）以 <code>C##</code> 开头，可在所有容器中操作；本地用户（Local User）仅限特定 PDB。</li>\n<li><strong>版本兼容性</strong>：CDB-PDB 特性需 Oracle 12c 及以上版本，且需要企业版许可。</li>\n</ul>\n<p>通过 CDB-PDB 架构，Oracle 12c 实现了数据库资源的灵活管理与高效利用，尤其适合需要快速扩展和简化运维的企业场景。更多操作细节可参考 Oracle 官方文档或相关技术博客。</p>\n"},{"title":"oracle学习笔记-索引组织表和堆组织表","date":"2025-04-13T08:51:13.000Z","updated":"2025-04-13T08:51:13.000Z","keywords":["oracle","索引组织表","堆组织表"],"description":null,"_content":"在Oracle数据库中，**索引组织表（Index-Organized Table, IOT）**和**堆组织表（Heap-Organized Table）**是两种不同的表存储结构，它们在数据存储方式、性能优化和适用场景上有显著区别。以下是它们的核心定义、差异及适用场景：\n\n---\n\n### **1. 堆组织表（Heap-Organized Table）**\n- **定义**：  \n  堆组织表是Oracle默认的表类型，数据以**无序堆（Heap）**的方式存储。新插入的行会被放置在表中第一个可用的空闲空间中，物理存储顺序与逻辑主键顺序无关。\n- **存储结构**：\n  - 数据行存储在**数据段（Data Segment）**中，由数据块组成。\n  - 主键通过额外的**B树索引**维护，索引存储键值与对应行的物理地址（ROWID）。\n- **特点**：\n  - **插入高效**：新数据直接写入空闲块，无需维护排序。\n  - **全表扫描快**：适合需要频繁全表扫描的场景。\n  - **主键查询依赖索引**：需通过索引定位ROWID再访问数据块。\n- **适用场景**：\n  - 频繁插入、删除或更新非主键字段的表。\n  - 需要全表扫描或随机访问数据的场景。\n  - 主键查询比例较低的表。\n\n**示例**：\n```sql\n-- 创建堆组织表（默认）\nCREATE TABLE heap_table (\n  id NUMBER PRIMARY KEY,\n  name VARCHAR2(50),\n  created_date DATE\n);\n```\n\n---\n\n### **2. 索引组织表（Index-Organized Table, IOT）**\n- **定义**：  \n  索引组织表将数据**直接存储在索引结构中**（通常是主键索引），数据按主键值排序存储，表与主键索引合二为一。\n- **存储结构**：\n  - 数据行存储在**索引段（Index Segment）**中，按主键顺序物理排序。\n  - 没有独立的ROWID，主键直接指向数据行的位置。\n- **特点**：\n  - **主键查询极快**：数据与索引一体化，减少I/O次数。\n  - **空间利用率高**：无需额外存储ROWID。\n  - **插入成本较高**：需维护索引排序，可能引发索引分裂。\n  - **支持溢出区（Overflow）**：当行数据过大时，非主键列可存储到溢出区。\n- **适用场景**：\n  - 以主键查询为主（如高频的精确查询或范围查询）。\n  - 数据按主键顺序频繁访问（如时间序列数据）。\n  - 需要减少存储空间的场景。\n\n**示例**：\n```sql\n-- 创建索引组织表（必须指定主键）\nCREATE TABLE iot_table (\n  id NUMBER PRIMARY KEY,\n  name VARCHAR2(50),\n  created_date DATE\n)\nORGANIZATION INDEX  -- 指定为索引组织表\nINCLUDING created_date  -- 可选：指定溢出列\nOVERFLOW TABLESPACE users;  -- 溢出区存储位置\n```\n\n---\n\n### **3. 核心区别对比**\n| **特性**                | **堆组织表**                          | **索引组织表（IOT）**                |\n|-------------------------|-------------------------------------|-------------------------------------|\n| **存储方式**            | 数据无序存储在数据段                | 数据按主键顺序存储在索引段          |\n| **主键索引**            | 独立B树索引，存储键值和ROWID        | 主键索引即表结构，键值直接关联数据  |\n| **ROWID**               | 有独立ROWID定位数据                 | 无ROWID，数据位置由主键决定         |\n| **插入性能**            | 高效（直接写入空闲块）              | 较慢（需维护索引排序）              |\n| **主键查询性能**        | 需通过索引二次查找                  | 直接定位数据，无需二次I/O           |\n| **全表扫描性能**        | 更高效                              | 较慢（需按主键顺序扫描）            |\n| **空间占用**            | 需要额外存储索引和ROWID             | 更节省空间（索引与数据合一）        |\n| **溢出区支持**          | 不支持                              | 支持（存储非主键大字段）            |\n| **适用场景**            | 频繁DML、全表扫描为主               | 主键查询为主、按主键范围扫描        |\n\n---\n\n### **4. 如何选择？**\n- **选择堆组织表**：\n  - 需要频繁插入、更新或删除数据。\n  - 查询模式多样（如非主键列查询、全表扫描）。\n  - 无明确主键或主键查询比例低。\n\n- **选择索引组织表**：\n  - 主键查询占主导（如OLTP系统的主键检索）。\n  - 数据按主键顺序访问（如时间序列、范围查询）。\n  - 需要减少存储冗余（如避免重复存储索引和数据）。\n\n---\n\n### **5. 示例场景**\n1. **堆组织表适用场景**：  \n   - 日志表：频繁插入，按时间范围查询，偶尔全表分析。\n   - 用户评论表：非主键字段（如用户ID）查询较多。\n\n2. **索引组织表适用场景**：  \n   - 用户账户表：通过用户ID（主键）快速查询账户信息。\n   - 订单表：按订单号（主键）高频检索订单详情。\n\n---\n\n### **6. 注意事项**\n- **IOT必须定义主键**：否则无法创建。\n- **溢出区管理**：若IOT的某些列较大，需通过`OVERFLOW`指定溢出存储位置。\n- **二级索引**：IOT的二级索引使用逻辑ROWID（主键值+物理猜测），可能需重建。\n\n---\n\n通过合理选择堆组织表或索引组织表，可以显著优化Oracle数据库的存储效率和查询性能。理解两者的差异，结合实际业务需求，是设计高效表结构的关键！","source":"_posts/oracle学习笔记-索引组织表和堆组织表/oracle学习笔记-索引组织表和堆组织表.md","raw":"---\ntitle: oracle学习笔记-索引组织表和堆组织表\ndate: 2025-04-13 16:51:13\nupdated: 2025-04-13 16:51:13\ntags:\n - oracle\ncategories:\n - 技术\n - oracle\nkeywords:\n - oracle\n - 索引组织表\n - 堆组织表\ndescription:\n---\n在Oracle数据库中，**索引组织表（Index-Organized Table, IOT）**和**堆组织表（Heap-Organized Table）**是两种不同的表存储结构，它们在数据存储方式、性能优化和适用场景上有显著区别。以下是它们的核心定义、差异及适用场景：\n\n---\n\n### **1. 堆组织表（Heap-Organized Table）**\n- **定义**：  \n  堆组织表是Oracle默认的表类型，数据以**无序堆（Heap）**的方式存储。新插入的行会被放置在表中第一个可用的空闲空间中，物理存储顺序与逻辑主键顺序无关。\n- **存储结构**：\n  - 数据行存储在**数据段（Data Segment）**中，由数据块组成。\n  - 主键通过额外的**B树索引**维护，索引存储键值与对应行的物理地址（ROWID）。\n- **特点**：\n  - **插入高效**：新数据直接写入空闲块，无需维护排序。\n  - **全表扫描快**：适合需要频繁全表扫描的场景。\n  - **主键查询依赖索引**：需通过索引定位ROWID再访问数据块。\n- **适用场景**：\n  - 频繁插入、删除或更新非主键字段的表。\n  - 需要全表扫描或随机访问数据的场景。\n  - 主键查询比例较低的表。\n\n**示例**：\n```sql\n-- 创建堆组织表（默认）\nCREATE TABLE heap_table (\n  id NUMBER PRIMARY KEY,\n  name VARCHAR2(50),\n  created_date DATE\n);\n```\n\n---\n\n### **2. 索引组织表（Index-Organized Table, IOT）**\n- **定义**：  \n  索引组织表将数据**直接存储在索引结构中**（通常是主键索引），数据按主键值排序存储，表与主键索引合二为一。\n- **存储结构**：\n  - 数据行存储在**索引段（Index Segment）**中，按主键顺序物理排序。\n  - 没有独立的ROWID，主键直接指向数据行的位置。\n- **特点**：\n  - **主键查询极快**：数据与索引一体化，减少I/O次数。\n  - **空间利用率高**：无需额外存储ROWID。\n  - **插入成本较高**：需维护索引排序，可能引发索引分裂。\n  - **支持溢出区（Overflow）**：当行数据过大时，非主键列可存储到溢出区。\n- **适用场景**：\n  - 以主键查询为主（如高频的精确查询或范围查询）。\n  - 数据按主键顺序频繁访问（如时间序列数据）。\n  - 需要减少存储空间的场景。\n\n**示例**：\n```sql\n-- 创建索引组织表（必须指定主键）\nCREATE TABLE iot_table (\n  id NUMBER PRIMARY KEY,\n  name VARCHAR2(50),\n  created_date DATE\n)\nORGANIZATION INDEX  -- 指定为索引组织表\nINCLUDING created_date  -- 可选：指定溢出列\nOVERFLOW TABLESPACE users;  -- 溢出区存储位置\n```\n\n---\n\n### **3. 核心区别对比**\n| **特性**                | **堆组织表**                          | **索引组织表（IOT）**                |\n|-------------------------|-------------------------------------|-------------------------------------|\n| **存储方式**            | 数据无序存储在数据段                | 数据按主键顺序存储在索引段          |\n| **主键索引**            | 独立B树索引，存储键值和ROWID        | 主键索引即表结构，键值直接关联数据  |\n| **ROWID**               | 有独立ROWID定位数据                 | 无ROWID，数据位置由主键决定         |\n| **插入性能**            | 高效（直接写入空闲块）              | 较慢（需维护索引排序）              |\n| **主键查询性能**        | 需通过索引二次查找                  | 直接定位数据，无需二次I/O           |\n| **全表扫描性能**        | 更高效                              | 较慢（需按主键顺序扫描）            |\n| **空间占用**            | 需要额外存储索引和ROWID             | 更节省空间（索引与数据合一）        |\n| **溢出区支持**          | 不支持                              | 支持（存储非主键大字段）            |\n| **适用场景**            | 频繁DML、全表扫描为主               | 主键查询为主、按主键范围扫描        |\n\n---\n\n### **4. 如何选择？**\n- **选择堆组织表**：\n  - 需要频繁插入、更新或删除数据。\n  - 查询模式多样（如非主键列查询、全表扫描）。\n  - 无明确主键或主键查询比例低。\n\n- **选择索引组织表**：\n  - 主键查询占主导（如OLTP系统的主键检索）。\n  - 数据按主键顺序访问（如时间序列、范围查询）。\n  - 需要减少存储冗余（如避免重复存储索引和数据）。\n\n---\n\n### **5. 示例场景**\n1. **堆组织表适用场景**：  \n   - 日志表：频繁插入，按时间范围查询，偶尔全表分析。\n   - 用户评论表：非主键字段（如用户ID）查询较多。\n\n2. **索引组织表适用场景**：  \n   - 用户账户表：通过用户ID（主键）快速查询账户信息。\n   - 订单表：按订单号（主键）高频检索订单详情。\n\n---\n\n### **6. 注意事项**\n- **IOT必须定义主键**：否则无法创建。\n- **溢出区管理**：若IOT的某些列较大，需通过`OVERFLOW`指定溢出存储位置。\n- **二级索引**：IOT的二级索引使用逻辑ROWID（主键值+物理猜测），可能需重建。\n\n---\n\n通过合理选择堆组织表或索引组织表，可以显著优化Oracle数据库的存储效率和查询性能。理解两者的差异，结合实际业务需求，是设计高效表结构的关键！","slug":"oracle学习笔记-索引组织表和堆组织表/oracle学习笔记-索引组织表和堆组织表","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvay000ox4grgoumg382","content":"<p>在Oracle数据库中，<strong>索引组织表（Index-Organized Table, IOT）</strong>和<strong>堆组织表（Heap-Organized Table）</strong>是两种不同的表存储结构，它们在数据存储方式、性能优化和适用场景上有显著区别。以下是它们的核心定义、差异及适用场景：</p>\n<hr>\n<h3 id=\"1-堆组织表（Heap-Organized-Table）\"><a href=\"#1-堆组织表（Heap-Organized-Table）\" class=\"headerlink\" title=\"1. 堆组织表（Heap-Organized Table）\"></a><strong>1. 堆组织表（Heap-Organized Table）</strong></h3><ul>\n<li><strong>定义</strong>：<br>堆组织表是Oracle默认的表类型，数据以<strong>无序堆（Heap）</strong>的方式存储。新插入的行会被放置在表中第一个可用的空闲空间中，物理存储顺序与逻辑主键顺序无关。</li>\n<li><strong>存储结构</strong>：<ul>\n<li>数据行存储在<strong>数据段（Data Segment）</strong>中，由数据块组成。</li>\n<li>主键通过额外的<strong>B树索引</strong>维护，索引存储键值与对应行的物理地址（ROWID）。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li><strong>插入高效</strong>：新数据直接写入空闲块，无需维护排序。</li>\n<li><strong>全表扫描快</strong>：适合需要频繁全表扫描的场景。</li>\n<li><strong>主键查询依赖索引</strong>：需通过索引定位ROWID再访问数据块。</li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：<ul>\n<li>频繁插入、删除或更新非主键字段的表。</li>\n<li>需要全表扫描或随机访问数据的场景。</li>\n<li>主键查询比例较低的表。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建堆组织表（默认）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> heap_table (</span><br><span class=\"line\">  id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>),</span><br><span class=\"line\">  created_date <span class=\"type\">DATE</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-索引组织表（Index-Organized-Table-IOT）\"><a href=\"#2-索引组织表（Index-Organized-Table-IOT）\" class=\"headerlink\" title=\"2. 索引组织表（Index-Organized Table, IOT）\"></a><strong>2. 索引组织表（Index-Organized Table, IOT）</strong></h3><ul>\n<li><strong>定义</strong>：<br>索引组织表将数据<strong>直接存储在索引结构中</strong>（通常是主键索引），数据按主键值排序存储，表与主键索引合二为一。</li>\n<li><strong>存储结构</strong>：<ul>\n<li>数据行存储在<strong>索引段（Index Segment）</strong>中，按主键顺序物理排序。</li>\n<li>没有独立的ROWID，主键直接指向数据行的位置。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li><strong>主键查询极快</strong>：数据与索引一体化，减少I&#x2F;O次数。</li>\n<li><strong>空间利用率高</strong>：无需额外存储ROWID。</li>\n<li><strong>插入成本较高</strong>：需维护索引排序，可能引发索引分裂。</li>\n<li><strong>支持溢出区（Overflow）</strong>：当行数据过大时，非主键列可存储到溢出区。</li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：<ul>\n<li>以主键查询为主（如高频的精确查询或范围查询）。</li>\n<li>数据按主键顺序频繁访问（如时间序列数据）。</li>\n<li>需要减少存储空间的场景。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建索引组织表（必须指定主键）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> iot_table (</span><br><span class=\"line\">  id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>),</span><br><span class=\"line\">  created_date <span class=\"type\">DATE</span></span><br><span class=\"line\">)</span><br><span class=\"line\">ORGANIZATION INDEX  <span class=\"comment\">-- 指定为索引组织表</span></span><br><span class=\"line\">INCLUDING created_date  <span class=\"comment\">-- 可选：指定溢出列</span></span><br><span class=\"line\">OVERFLOW TABLESPACE users;  <span class=\"comment\">-- 溢出区存储位置</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-核心区别对比\"><a href=\"#3-核心区别对比\" class=\"headerlink\" title=\"3. 核心区别对比\"></a><strong>3. 核心区别对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>堆组织表</strong></th>\n<th><strong>索引组织表（IOT）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储方式</strong></td>\n<td>数据无序存储在数据段</td>\n<td>数据按主键顺序存储在索引段</td>\n</tr>\n<tr>\n<td><strong>主键索引</strong></td>\n<td>独立B树索引，存储键值和ROWID</td>\n<td>主键索引即表结构，键值直接关联数据</td>\n</tr>\n<tr>\n<td><strong>ROWID</strong></td>\n<td>有独立ROWID定位数据</td>\n<td>无ROWID，数据位置由主键决定</td>\n</tr>\n<tr>\n<td><strong>插入性能</strong></td>\n<td>高效（直接写入空闲块）</td>\n<td>较慢（需维护索引排序）</td>\n</tr>\n<tr>\n<td><strong>主键查询性能</strong></td>\n<td>需通过索引二次查找</td>\n<td>直接定位数据，无需二次I&#x2F;O</td>\n</tr>\n<tr>\n<td><strong>全表扫描性能</strong></td>\n<td>更高效</td>\n<td>较慢（需按主键顺序扫描）</td>\n</tr>\n<tr>\n<td><strong>空间占用</strong></td>\n<td>需要额外存储索引和ROWID</td>\n<td>更节省空间（索引与数据合一）</td>\n</tr>\n<tr>\n<td><strong>溢出区支持</strong></td>\n<td>不支持</td>\n<td>支持（存储非主键大字段）</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>频繁DML、全表扫描为主</td>\n<td>主键查询为主、按主键范围扫描</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"4-如何选择？\"><a href=\"#4-如何选择？\" class=\"headerlink\" title=\"4. 如何选择？\"></a><strong>4. 如何选择？</strong></h3><ul>\n<li><p><strong>选择堆组织表</strong>：</p>\n<ul>\n<li>需要频繁插入、更新或删除数据。</li>\n<li>查询模式多样（如非主键列查询、全表扫描）。</li>\n<li>无明确主键或主键查询比例低。</li>\n</ul>\n</li>\n<li><p><strong>选择索引组织表</strong>：</p>\n<ul>\n<li>主键查询占主导（如OLTP系统的主键检索）。</li>\n<li>数据按主键顺序访问（如时间序列、范围查询）。</li>\n<li>需要减少存储冗余（如避免重复存储索引和数据）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-示例场景\"><a href=\"#5-示例场景\" class=\"headerlink\" title=\"5. 示例场景\"></a><strong>5. 示例场景</strong></h3><ol>\n<li><p><strong>堆组织表适用场景</strong>：  </p>\n<ul>\n<li>日志表：频繁插入，按时间范围查询，偶尔全表分析。</li>\n<li>用户评论表：非主键字段（如用户ID）查询较多。</li>\n</ul>\n</li>\n<li><p><strong>索引组织表适用场景</strong>：  </p>\n<ul>\n<li>用户账户表：通过用户ID（主键）快速查询账户信息。</li>\n<li>订单表：按订单号（主键）高频检索订单详情。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a><strong>6. 注意事项</strong></h3><ul>\n<li><strong>IOT必须定义主键</strong>：否则无法创建。</li>\n<li><strong>溢出区管理</strong>：若IOT的某些列较大，需通过<code>OVERFLOW</code>指定溢出存储位置。</li>\n<li><strong>二级索引</strong>：IOT的二级索引使用逻辑ROWID（主键值+物理猜测），可能需重建。</li>\n</ul>\n<hr>\n<p>通过合理选择堆组织表或索引组织表，可以显著优化Oracle数据库的存储效率和查询性能。理解两者的差异，结合实际业务需求，是设计高效表结构的关键！</p>\n","excerpt":"","more":"<p>在Oracle数据库中，<strong>索引组织表（Index-Organized Table, IOT）</strong>和<strong>堆组织表（Heap-Organized Table）</strong>是两种不同的表存储结构，它们在数据存储方式、性能优化和适用场景上有显著区别。以下是它们的核心定义、差异及适用场景：</p>\n<hr>\n<h3 id=\"1-堆组织表（Heap-Organized-Table）\"><a href=\"#1-堆组织表（Heap-Organized-Table）\" class=\"headerlink\" title=\"1. 堆组织表（Heap-Organized Table）\"></a><strong>1. 堆组织表（Heap-Organized Table）</strong></h3><ul>\n<li><strong>定义</strong>：<br>堆组织表是Oracle默认的表类型，数据以<strong>无序堆（Heap）</strong>的方式存储。新插入的行会被放置在表中第一个可用的空闲空间中，物理存储顺序与逻辑主键顺序无关。</li>\n<li><strong>存储结构</strong>：<ul>\n<li>数据行存储在<strong>数据段（Data Segment）</strong>中，由数据块组成。</li>\n<li>主键通过额外的<strong>B树索引</strong>维护，索引存储键值与对应行的物理地址（ROWID）。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li><strong>插入高效</strong>：新数据直接写入空闲块，无需维护排序。</li>\n<li><strong>全表扫描快</strong>：适合需要频繁全表扫描的场景。</li>\n<li><strong>主键查询依赖索引</strong>：需通过索引定位ROWID再访问数据块。</li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：<ul>\n<li>频繁插入、删除或更新非主键字段的表。</li>\n<li>需要全表扫描或随机访问数据的场景。</li>\n<li>主键查询比例较低的表。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建堆组织表（默认）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> heap_table (</span><br><span class=\"line\">  id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>),</span><br><span class=\"line\">  created_date <span class=\"type\">DATE</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-索引组织表（Index-Organized-Table-IOT）\"><a href=\"#2-索引组织表（Index-Organized-Table-IOT）\" class=\"headerlink\" title=\"2. 索引组织表（Index-Organized Table, IOT）\"></a><strong>2. 索引组织表（Index-Organized Table, IOT）</strong></h3><ul>\n<li><strong>定义</strong>：<br>索引组织表将数据<strong>直接存储在索引结构中</strong>（通常是主键索引），数据按主键值排序存储，表与主键索引合二为一。</li>\n<li><strong>存储结构</strong>：<ul>\n<li>数据行存储在<strong>索引段（Index Segment）</strong>中，按主键顺序物理排序。</li>\n<li>没有独立的ROWID，主键直接指向数据行的位置。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li><strong>主键查询极快</strong>：数据与索引一体化，减少I&#x2F;O次数。</li>\n<li><strong>空间利用率高</strong>：无需额外存储ROWID。</li>\n<li><strong>插入成本较高</strong>：需维护索引排序，可能引发索引分裂。</li>\n<li><strong>支持溢出区（Overflow）</strong>：当行数据过大时，非主键列可存储到溢出区。</li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：<ul>\n<li>以主键查询为主（如高频的精确查询或范围查询）。</li>\n<li>数据按主键顺序频繁访问（如时间序列数据）。</li>\n<li>需要减少存储空间的场景。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建索引组织表（必须指定主键）</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> iot_table (</span><br><span class=\"line\">  id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>),</span><br><span class=\"line\">  created_date <span class=\"type\">DATE</span></span><br><span class=\"line\">)</span><br><span class=\"line\">ORGANIZATION INDEX  <span class=\"comment\">-- 指定为索引组织表</span></span><br><span class=\"line\">INCLUDING created_date  <span class=\"comment\">-- 可选：指定溢出列</span></span><br><span class=\"line\">OVERFLOW TABLESPACE users;  <span class=\"comment\">-- 溢出区存储位置</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-核心区别对比\"><a href=\"#3-核心区别对比\" class=\"headerlink\" title=\"3. 核心区别对比\"></a><strong>3. 核心区别对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>堆组织表</strong></th>\n<th><strong>索引组织表（IOT）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储方式</strong></td>\n<td>数据无序存储在数据段</td>\n<td>数据按主键顺序存储在索引段</td>\n</tr>\n<tr>\n<td><strong>主键索引</strong></td>\n<td>独立B树索引，存储键值和ROWID</td>\n<td>主键索引即表结构，键值直接关联数据</td>\n</tr>\n<tr>\n<td><strong>ROWID</strong></td>\n<td>有独立ROWID定位数据</td>\n<td>无ROWID，数据位置由主键决定</td>\n</tr>\n<tr>\n<td><strong>插入性能</strong></td>\n<td>高效（直接写入空闲块）</td>\n<td>较慢（需维护索引排序）</td>\n</tr>\n<tr>\n<td><strong>主键查询性能</strong></td>\n<td>需通过索引二次查找</td>\n<td>直接定位数据，无需二次I&#x2F;O</td>\n</tr>\n<tr>\n<td><strong>全表扫描性能</strong></td>\n<td>更高效</td>\n<td>较慢（需按主键顺序扫描）</td>\n</tr>\n<tr>\n<td><strong>空间占用</strong></td>\n<td>需要额外存储索引和ROWID</td>\n<td>更节省空间（索引与数据合一）</td>\n</tr>\n<tr>\n<td><strong>溢出区支持</strong></td>\n<td>不支持</td>\n<td>支持（存储非主键大字段）</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>频繁DML、全表扫描为主</td>\n<td>主键查询为主、按主键范围扫描</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"4-如何选择？\"><a href=\"#4-如何选择？\" class=\"headerlink\" title=\"4. 如何选择？\"></a><strong>4. 如何选择？</strong></h3><ul>\n<li><p><strong>选择堆组织表</strong>：</p>\n<ul>\n<li>需要频繁插入、更新或删除数据。</li>\n<li>查询模式多样（如非主键列查询、全表扫描）。</li>\n<li>无明确主键或主键查询比例低。</li>\n</ul>\n</li>\n<li><p><strong>选择索引组织表</strong>：</p>\n<ul>\n<li>主键查询占主导（如OLTP系统的主键检索）。</li>\n<li>数据按主键顺序访问（如时间序列、范围查询）。</li>\n<li>需要减少存储冗余（如避免重复存储索引和数据）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-示例场景\"><a href=\"#5-示例场景\" class=\"headerlink\" title=\"5. 示例场景\"></a><strong>5. 示例场景</strong></h3><ol>\n<li><p><strong>堆组织表适用场景</strong>：  </p>\n<ul>\n<li>日志表：频繁插入，按时间范围查询，偶尔全表分析。</li>\n<li>用户评论表：非主键字段（如用户ID）查询较多。</li>\n</ul>\n</li>\n<li><p><strong>索引组织表适用场景</strong>：  </p>\n<ul>\n<li>用户账户表：通过用户ID（主键）快速查询账户信息。</li>\n<li>订单表：按订单号（主键）高频检索订单详情。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a><strong>6. 注意事项</strong></h3><ul>\n<li><strong>IOT必须定义主键</strong>：否则无法创建。</li>\n<li><strong>溢出区管理</strong>：若IOT的某些列较大，需通过<code>OVERFLOW</code>指定溢出存储位置。</li>\n<li><strong>二级索引</strong>：IOT的二级索引使用逻辑ROWID（主键值+物理猜测），可能需重建。</li>\n</ul>\n<hr>\n<p>通过合理选择堆组织表或索引组织表，可以显著优化Oracle数据库的存储效率和查询性能。理解两者的差异，结合实际业务需求，是设计高效表结构的关键！</p>\n"},{"title":"oracle学习笔记-表空间、模式、表三者的关系","date":"2025-04-12T12:13:08.000Z","updated":"2025-04-12T12:13:08.000Z","keywords":["oracle","表空间","模式","表"],"description":"表空间、模式、表三者的关系","_content":"在Oracle数据库中，**表空间（Tablespace）**、**Schema（模式）**和**表（Table）**是三个核心概念，它们之间的关系可以概括为以下逻辑层次：\n\n---\n\n### **1. 表空间（Tablespace）**\n- **作用**：表空间是数据库的**物理存储逻辑单元**，用于管理数据文件的存储分配（如`.dbf`文件）。一个数据库可以有多个表空间，每个表空间包含一个或多个物理数据文件。\n- **特点**：\n  - 表空间是数据库存储的顶层逻辑结构，例如：`SYSTEM`、`USERS`、`TEMP`等。\n  - 决定数据的物理存储位置（如磁盘分配）。\n  - 可以设置表空间的属性，例如自动扩展、块大小、读写权限等。\n- **典型用途**：\n  - 分离系统数据与用户数据。\n  - 优化性能（例如将频繁访问的表和索引放在高速存储的表空间中）。\n\n---\n\n### **2. Schema（模式）**\n- **作用**：Schema是数据库的**逻辑容器**，属于某个用户（User），用于组织和管理该用户拥有的所有数据库对象（如表、视图、索引等）。\n- **特点**：\n  - Schema与用户（User）一一对应。当创建用户时，Oracle会自动生成一个同名的Schema。\n  - Schema是逻辑上的命名空间，不同用户的Schema互相隔离。例如，用户`HR`的Schema名为`HR`，其表名为`HR.EMPLOYEES`。\n  - 用户需要权限才能访问其他Schema的对象（例如通过授权：`GRANT SELECT ON HR.EMPLOYEES TO SCOTT`）。\n- **典型用途**：\n  - 隔离不同用户的数据和对象。\n  - 管理权限（例如限制用户只能访问自己的Schema）。\n\n---\n\n### **3. 表（Table）**\n- **作用**：表是存储数据的**核心逻辑结构**，由行和列组成，属于某个Schema，并存储在某个表空间中。\n- **特点**：\n  - 表必须属于某个Schema，例如`HR.EMPLOYEES`。\n  - 表的物理数据存储在表空间的数据文件中。\n  - 创建表时需指定存储的表空间（默认使用用户的默认表空间）。\n- **典型用途**：存储结构化数据（如员工信息、订单记录等）。\n\n---\n\n### **三者的关系**\n1. **层级关系**：\n   - **表空间**（物理存储） → **Schema**（逻辑容器） → **表**（具体数据）。\n2. **依赖关系**：\n   - 用户（User）创建后自动拥有一个同名的Schema。\n   - 用户创建表时，表会存储在其Schema下，并占用所属表空间的物理存储。\n3. **权限管理**：\n   - 用户需要表空间的**配额（Quota）**才能在其中存储数据。\n   - 用户需要权限才能访问其他Schema中的表。\n```\n数据库(Database)\n│\n├── 表空间1(Tablespace1) → 物理文件1.dbf\n│   │\n│   ├── SchemaA(用户A)\n│   │   ├── 表1\n│   │   └── 表2\n│   │\n│   └── SchemaB(用户B)\n│       ├── 表1 (与SchemaA的表1同名)\n│       └── 表3\n│\n└── 表空间2(Tablespace2) → 物理文件2.dbf\n    │\n    └── SchemaA(用户A)\n        ├── 表4 (同一用户/Schema的表可以在不同表空间)\n        └── 表5\n```\n---\n\n### **示例**\n```sql\n-- 1. 创建表空间\nCREATE TABLESPACE my_tbs \nDATAFILE '/u01/oracle/data/my_tbs01.dbf' SIZE 100M;\n\n-- 2. 创建用户并指定默认表空间\nCREATE USER hr IDENTIFIED BY password\nDEFAULT TABLESPACE my_tbs\nQUOTA UNLIMITED ON my_tbs;\n\n-- 3. 用户hr在Schema中创建表\nCREATE TABLE hr.employees (\n    id NUMBER PRIMARY KEY,\n    name VARCHAR2(50)\n);\n```\n- **结果**：\n  - 表`employees`属于Schema `HR`。\n  - 表数据物理存储在表空间`my_tbs`对应的数据文件中。\n  - 用户`HR`对表空间`my_tbs`有无限配额。\n\n---\n\n### **总结**\n- **表空间**：管理物理存储（数据文件）。\n- **Schema**：管理逻辑对象（表、视图等），与用户绑定。\n- **表**：存储具体数据，属于某个Schema，并占用表空间的物理存储。\n\n通过这种分层设计，Oracle实现了**物理存储与逻辑结构的分离**，以及**权限与对象的隔离**。","source":"_posts/oracle学习笔记-表空间、模式、表三者的关系/oracle学习笔记-表空间、模式、表三者的关系.md","raw":"---\ntitle: oracle学习笔记-表空间、模式、表三者的关系\ndate: 2025-04-12 20:13:08\nupdated: 2025-04-12 20:13:08\ntags: \n - oracle\ncategories:\n - 技术\n - oracle\nkeywords:\n - oracle\n - 表空间\n - 模式\n - 表\ndescription: 表空间、模式、表三者的关系\n---\n在Oracle数据库中，**表空间（Tablespace）**、**Schema（模式）**和**表（Table）**是三个核心概念，它们之间的关系可以概括为以下逻辑层次：\n\n---\n\n### **1. 表空间（Tablespace）**\n- **作用**：表空间是数据库的**物理存储逻辑单元**，用于管理数据文件的存储分配（如`.dbf`文件）。一个数据库可以有多个表空间，每个表空间包含一个或多个物理数据文件。\n- **特点**：\n  - 表空间是数据库存储的顶层逻辑结构，例如：`SYSTEM`、`USERS`、`TEMP`等。\n  - 决定数据的物理存储位置（如磁盘分配）。\n  - 可以设置表空间的属性，例如自动扩展、块大小、读写权限等。\n- **典型用途**：\n  - 分离系统数据与用户数据。\n  - 优化性能（例如将频繁访问的表和索引放在高速存储的表空间中）。\n\n---\n\n### **2. Schema（模式）**\n- **作用**：Schema是数据库的**逻辑容器**，属于某个用户（User），用于组织和管理该用户拥有的所有数据库对象（如表、视图、索引等）。\n- **特点**：\n  - Schema与用户（User）一一对应。当创建用户时，Oracle会自动生成一个同名的Schema。\n  - Schema是逻辑上的命名空间，不同用户的Schema互相隔离。例如，用户`HR`的Schema名为`HR`，其表名为`HR.EMPLOYEES`。\n  - 用户需要权限才能访问其他Schema的对象（例如通过授权：`GRANT SELECT ON HR.EMPLOYEES TO SCOTT`）。\n- **典型用途**：\n  - 隔离不同用户的数据和对象。\n  - 管理权限（例如限制用户只能访问自己的Schema）。\n\n---\n\n### **3. 表（Table）**\n- **作用**：表是存储数据的**核心逻辑结构**，由行和列组成，属于某个Schema，并存储在某个表空间中。\n- **特点**：\n  - 表必须属于某个Schema，例如`HR.EMPLOYEES`。\n  - 表的物理数据存储在表空间的数据文件中。\n  - 创建表时需指定存储的表空间（默认使用用户的默认表空间）。\n- **典型用途**：存储结构化数据（如员工信息、订单记录等）。\n\n---\n\n### **三者的关系**\n1. **层级关系**：\n   - **表空间**（物理存储） → **Schema**（逻辑容器） → **表**（具体数据）。\n2. **依赖关系**：\n   - 用户（User）创建后自动拥有一个同名的Schema。\n   - 用户创建表时，表会存储在其Schema下，并占用所属表空间的物理存储。\n3. **权限管理**：\n   - 用户需要表空间的**配额（Quota）**才能在其中存储数据。\n   - 用户需要权限才能访问其他Schema中的表。\n```\n数据库(Database)\n│\n├── 表空间1(Tablespace1) → 物理文件1.dbf\n│   │\n│   ├── SchemaA(用户A)\n│   │   ├── 表1\n│   │   └── 表2\n│   │\n│   └── SchemaB(用户B)\n│       ├── 表1 (与SchemaA的表1同名)\n│       └── 表3\n│\n└── 表空间2(Tablespace2) → 物理文件2.dbf\n    │\n    └── SchemaA(用户A)\n        ├── 表4 (同一用户/Schema的表可以在不同表空间)\n        └── 表5\n```\n---\n\n### **示例**\n```sql\n-- 1. 创建表空间\nCREATE TABLESPACE my_tbs \nDATAFILE '/u01/oracle/data/my_tbs01.dbf' SIZE 100M;\n\n-- 2. 创建用户并指定默认表空间\nCREATE USER hr IDENTIFIED BY password\nDEFAULT TABLESPACE my_tbs\nQUOTA UNLIMITED ON my_tbs;\n\n-- 3. 用户hr在Schema中创建表\nCREATE TABLE hr.employees (\n    id NUMBER PRIMARY KEY,\n    name VARCHAR2(50)\n);\n```\n- **结果**：\n  - 表`employees`属于Schema `HR`。\n  - 表数据物理存储在表空间`my_tbs`对应的数据文件中。\n  - 用户`HR`对表空间`my_tbs`有无限配额。\n\n---\n\n### **总结**\n- **表空间**：管理物理存储（数据文件）。\n- **Schema**：管理逻辑对象（表、视图等），与用户绑定。\n- **表**：存储具体数据，属于某个Schema，并占用表空间的物理存储。\n\n通过这种分层设计，Oracle实现了**物理存储与逻辑结构的分离**，以及**权限与对象的隔离**。","slug":"oracle学习笔记-表空间、模式、表三者的关系/oracle学习笔记-表空间、模式、表三者的关系","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvay000qx4grh0ab1rm3","content":"<p>在Oracle数据库中，<strong>表空间（Tablespace）</strong>、<strong>Schema（模式）</strong>和<strong>表（Table）</strong>是三个核心概念，它们之间的关系可以概括为以下逻辑层次：</p>\n<hr>\n<h3 id=\"1-表空间（Tablespace）\"><a href=\"#1-表空间（Tablespace）\" class=\"headerlink\" title=\"1. 表空间（Tablespace）\"></a><strong>1. 表空间（Tablespace）</strong></h3><ul>\n<li><strong>作用</strong>：表空间是数据库的<strong>物理存储逻辑单元</strong>，用于管理数据文件的存储分配（如<code>.dbf</code>文件）。一个数据库可以有多个表空间，每个表空间包含一个或多个物理数据文件。</li>\n<li><strong>特点</strong>：<ul>\n<li>表空间是数据库存储的顶层逻辑结构，例如：<code>SYSTEM</code>、<code>USERS</code>、<code>TEMP</code>等。</li>\n<li>决定数据的物理存储位置（如磁盘分配）。</li>\n<li>可以设置表空间的属性，例如自动扩展、块大小、读写权限等。</li>\n</ul>\n</li>\n<li><strong>典型用途</strong>：<ul>\n<li>分离系统数据与用户数据。</li>\n<li>优化性能（例如将频繁访问的表和索引放在高速存储的表空间中）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-Schema（模式）\"><a href=\"#2-Schema（模式）\" class=\"headerlink\" title=\"2. Schema（模式）\"></a><strong>2. Schema（模式）</strong></h3><ul>\n<li><strong>作用</strong>：Schema是数据库的<strong>逻辑容器</strong>，属于某个用户（User），用于组织和管理该用户拥有的所有数据库对象（如表、视图、索引等）。</li>\n<li><strong>特点</strong>：<ul>\n<li>Schema与用户（User）一一对应。当创建用户时，Oracle会自动生成一个同名的Schema。</li>\n<li>Schema是逻辑上的命名空间，不同用户的Schema互相隔离。例如，用户<code>HR</code>的Schema名为<code>HR</code>，其表名为<code>HR.EMPLOYEES</code>。</li>\n<li>用户需要权限才能访问其他Schema的对象（例如通过授权：<code>GRANT SELECT ON HR.EMPLOYEES TO SCOTT</code>）。</li>\n</ul>\n</li>\n<li><strong>典型用途</strong>：<ul>\n<li>隔离不同用户的数据和对象。</li>\n<li>管理权限（例如限制用户只能访问自己的Schema）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-表（Table）\"><a href=\"#3-表（Table）\" class=\"headerlink\" title=\"3. 表（Table）\"></a><strong>3. 表（Table）</strong></h3><ul>\n<li><strong>作用</strong>：表是存储数据的<strong>核心逻辑结构</strong>，由行和列组成，属于某个Schema，并存储在某个表空间中。</li>\n<li><strong>特点</strong>：<ul>\n<li>表必须属于某个Schema，例如<code>HR.EMPLOYEES</code>。</li>\n<li>表的物理数据存储在表空间的数据文件中。</li>\n<li>创建表时需指定存储的表空间（默认使用用户的默认表空间）。</li>\n</ul>\n</li>\n<li><strong>典型用途</strong>：存储结构化数据（如员工信息、订单记录等）。</li>\n</ul>\n<hr>\n<h3 id=\"三者的关系\"><a href=\"#三者的关系\" class=\"headerlink\" title=\"三者的关系\"></a><strong>三者的关系</strong></h3><ol>\n<li><strong>层级关系</strong>：<ul>\n<li><strong>表空间</strong>（物理存储） → <strong>Schema</strong>（逻辑容器） → <strong>表</strong>（具体数据）。</li>\n</ul>\n</li>\n<li><strong>依赖关系</strong>：<ul>\n<li>用户（User）创建后自动拥有一个同名的Schema。</li>\n<li>用户创建表时，表会存储在其Schema下，并占用所属表空间的物理存储。</li>\n</ul>\n</li>\n<li><strong>权限管理</strong>：<ul>\n<li>用户需要表空间的<strong>配额（Quota）</strong>才能在其中存储数据。</li>\n<li>用户需要权限才能访问其他Schema中的表。<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">数据库(Database)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 表空间1(Tablespace1) → 物理文件1.dbf</span><br><span class=\"line\">│   │</span><br><span class=\"line\">│   ├── SchemaA(用户A)</span><br><span class=\"line\">│   │   ├── 表1</span><br><span class=\"line\">│   │   └── 表2</span><br><span class=\"line\">│   │</span><br><span class=\"line\">│   └── SchemaB(用户B)</span><br><span class=\"line\">│       ├── 表1 (与SchemaA的表1同名)</span><br><span class=\"line\">│       └── 表3</span><br><span class=\"line\">│</span><br><span class=\"line\">└── 表空间2(Tablespace2) → 物理文件2.dbf</span><br><span class=\"line\">    │</span><br><span class=\"line\">    └── SchemaA(用户A)</span><br><span class=\"line\">        ├── 表4 (同一用户/Schema的表可以在不同表空间)</span><br><span class=\"line\">        └── 表5</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 创建表空间</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>SPACE my_tbs </span><br><span class=\"line\">DATAFILE <span class=\"string\">&#x27;/u01/oracle/data/my_tbs01.dbf&#x27;</span> SIZE <span class=\"number\">100</span>M;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. 创建用户并指定默认表空间</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> hr IDENTIFIED <span class=\"keyword\">BY</span> password</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> TABLESPACE my_tbs</span><br><span class=\"line\">QUOTA UNLIMITED <span class=\"keyword\">ON</span> my_tbs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3. 用户hr在Schema中创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> hr.employees (</span><br><span class=\"line\">    id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>结果</strong>：<ul>\n<li>表<code>employees</code>属于Schema <code>HR</code>。</li>\n<li>表数据物理存储在表空间<code>my_tbs</code>对应的数据文件中。</li>\n<li>用户<code>HR</code>对表空间<code>my_tbs</code>有无限配额。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong>表空间</strong>：管理物理存储（数据文件）。</li>\n<li><strong>Schema</strong>：管理逻辑对象（表、视图等），与用户绑定。</li>\n<li><strong>表</strong>：存储具体数据，属于某个Schema，并占用表空间的物理存储。</li>\n</ul>\n<p>通过这种分层设计，Oracle实现了<strong>物理存储与逻辑结构的分离</strong>，以及<strong>权限与对象的隔离</strong>。</p>\n","excerpt":"","more":"<p>在Oracle数据库中，<strong>表空间（Tablespace）</strong>、<strong>Schema（模式）</strong>和<strong>表（Table）</strong>是三个核心概念，它们之间的关系可以概括为以下逻辑层次：</p>\n<hr>\n<h3 id=\"1-表空间（Tablespace）\"><a href=\"#1-表空间（Tablespace）\" class=\"headerlink\" title=\"1. 表空间（Tablespace）\"></a><strong>1. 表空间（Tablespace）</strong></h3><ul>\n<li><strong>作用</strong>：表空间是数据库的<strong>物理存储逻辑单元</strong>，用于管理数据文件的存储分配（如<code>.dbf</code>文件）。一个数据库可以有多个表空间，每个表空间包含一个或多个物理数据文件。</li>\n<li><strong>特点</strong>：<ul>\n<li>表空间是数据库存储的顶层逻辑结构，例如：<code>SYSTEM</code>、<code>USERS</code>、<code>TEMP</code>等。</li>\n<li>决定数据的物理存储位置（如磁盘分配）。</li>\n<li>可以设置表空间的属性，例如自动扩展、块大小、读写权限等。</li>\n</ul>\n</li>\n<li><strong>典型用途</strong>：<ul>\n<li>分离系统数据与用户数据。</li>\n<li>优化性能（例如将频繁访问的表和索引放在高速存储的表空间中）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-Schema（模式）\"><a href=\"#2-Schema（模式）\" class=\"headerlink\" title=\"2. Schema（模式）\"></a><strong>2. Schema（模式）</strong></h3><ul>\n<li><strong>作用</strong>：Schema是数据库的<strong>逻辑容器</strong>，属于某个用户（User），用于组织和管理该用户拥有的所有数据库对象（如表、视图、索引等）。</li>\n<li><strong>特点</strong>：<ul>\n<li>Schema与用户（User）一一对应。当创建用户时，Oracle会自动生成一个同名的Schema。</li>\n<li>Schema是逻辑上的命名空间，不同用户的Schema互相隔离。例如，用户<code>HR</code>的Schema名为<code>HR</code>，其表名为<code>HR.EMPLOYEES</code>。</li>\n<li>用户需要权限才能访问其他Schema的对象（例如通过授权：<code>GRANT SELECT ON HR.EMPLOYEES TO SCOTT</code>）。</li>\n</ul>\n</li>\n<li><strong>典型用途</strong>：<ul>\n<li>隔离不同用户的数据和对象。</li>\n<li>管理权限（例如限制用户只能访问自己的Schema）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-表（Table）\"><a href=\"#3-表（Table）\" class=\"headerlink\" title=\"3. 表（Table）\"></a><strong>3. 表（Table）</strong></h3><ul>\n<li><strong>作用</strong>：表是存储数据的<strong>核心逻辑结构</strong>，由行和列组成，属于某个Schema，并存储在某个表空间中。</li>\n<li><strong>特点</strong>：<ul>\n<li>表必须属于某个Schema，例如<code>HR.EMPLOYEES</code>。</li>\n<li>表的物理数据存储在表空间的数据文件中。</li>\n<li>创建表时需指定存储的表空间（默认使用用户的默认表空间）。</li>\n</ul>\n</li>\n<li><strong>典型用途</strong>：存储结构化数据（如员工信息、订单记录等）。</li>\n</ul>\n<hr>\n<h3 id=\"三者的关系\"><a href=\"#三者的关系\" class=\"headerlink\" title=\"三者的关系\"></a><strong>三者的关系</strong></h3><ol>\n<li><strong>层级关系</strong>：<ul>\n<li><strong>表空间</strong>（物理存储） → <strong>Schema</strong>（逻辑容器） → <strong>表</strong>（具体数据）。</li>\n</ul>\n</li>\n<li><strong>依赖关系</strong>：<ul>\n<li>用户（User）创建后自动拥有一个同名的Schema。</li>\n<li>用户创建表时，表会存储在其Schema下，并占用所属表空间的物理存储。</li>\n</ul>\n</li>\n<li><strong>权限管理</strong>：<ul>\n<li>用户需要表空间的<strong>配额（Quota）</strong>才能在其中存储数据。</li>\n<li>用户需要权限才能访问其他Schema中的表。<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">数据库(Database)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 表空间1(Tablespace1) → 物理文件1.dbf</span><br><span class=\"line\">│   │</span><br><span class=\"line\">│   ├── SchemaA(用户A)</span><br><span class=\"line\">│   │   ├── 表1</span><br><span class=\"line\">│   │   └── 表2</span><br><span class=\"line\">│   │</span><br><span class=\"line\">│   └── SchemaB(用户B)</span><br><span class=\"line\">│       ├── 表1 (与SchemaA的表1同名)</span><br><span class=\"line\">│       └── 表3</span><br><span class=\"line\">│</span><br><span class=\"line\">└── 表空间2(Tablespace2) → 物理文件2.dbf</span><br><span class=\"line\">    │</span><br><span class=\"line\">    └── SchemaA(用户A)</span><br><span class=\"line\">        ├── 表4 (同一用户/Schema的表可以在不同表空间)</span><br><span class=\"line\">        └── 表5</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 创建表空间</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>SPACE my_tbs </span><br><span class=\"line\">DATAFILE <span class=\"string\">&#x27;/u01/oracle/data/my_tbs01.dbf&#x27;</span> SIZE <span class=\"number\">100</span>M;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. 创建用户并指定默认表空间</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> hr IDENTIFIED <span class=\"keyword\">BY</span> password</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> TABLESPACE my_tbs</span><br><span class=\"line\">QUOTA UNLIMITED <span class=\"keyword\">ON</span> my_tbs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3. 用户hr在Schema中创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> hr.employees (</span><br><span class=\"line\">    id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>结果</strong>：<ul>\n<li>表<code>employees</code>属于Schema <code>HR</code>。</li>\n<li>表数据物理存储在表空间<code>my_tbs</code>对应的数据文件中。</li>\n<li>用户<code>HR</code>对表空间<code>my_tbs</code>有无限配额。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong>表空间</strong>：管理物理存储（数据文件）。</li>\n<li><strong>Schema</strong>：管理逻辑对象（表、视图等），与用户绑定。</li>\n<li><strong>表</strong>：存储具体数据，属于某个Schema，并占用表空间的物理存储。</li>\n</ul>\n<p>通过这种分层设计，Oracle实现了<strong>物理存储与逻辑结构的分离</strong>，以及<strong>权限与对象的隔离</strong>。</p>\n"},{"title":"sql查询语句转为json","date":"2025-06-03T08:48:55.000Z","updated":"2025-06-03T08:48:55.000Z","keywords":["sql","json","pandas","dataframe"],"description":"一个规范的JSON设计，支持多层嵌套的 WHERE 条件查询，转化为pandas操作","_content":"## 1. 支持多层嵌套的 WHERE 条件查询的 JSON 设计\n下面是一个规范的 JSON 设计，支持多层嵌套的 WHERE 条件查询，符合数据库查询条件的设计模式。该结构支持逻辑运算符（AND/OR/NOT）和比较运算符（=, >, in, like 等），并允许无限级嵌套：\n\n```json\n{\n  \"condition\": {\n    \"operator\": \"AND\",\n    \"conditions\": [\n      {\n        \"field\": \"age\",\n        \"operator\": \">=\",\n        \"value\": 18\n      },\n      {\n        \"operator\": \"OR\",\n        \"conditions\": [\n          {\n            \"field\": \"city\",\n            \"operator\": \"=\",\n            \"value\": \"New York\"\n          },\n          {\n            \"field\": \"city\",\n            \"operator\": \"=\",\n            \"value\": \"London\"\n          }\n        ]\n      },\n      {\n        \"operator\": \"NOT\",\n        \"condition\": {\n          \"field\": \"status\",\n          \"operator\": \"in\",\n          \"value\": [\"inactive\", \"pending\"]\n        }\n      }\n    ]\n  }\n}\n```\n\n### 结构说明：\n1. **顶级对象**  \n   - `condition` (对象)：包含整个查询条件的根节点\n\n2. **逻辑条件节点** (可嵌套)  \n   ```typescript\n   {\n     \"operator\": \"AND\" | \"OR\" | \"NOT\",  // 逻辑运算符\n     \"conditions\"?: [ ... ],            // 仅当 operator=AND/OR 时存在（子条件数组）\n     \"condition\"?: { ... }              // 仅当 operator=NOT 时存在（单个子条件）\n   }\n   ```\n\n3. **原子条件节点** (叶子节点)  \n   ```typescript\n   {\n     \"field\": \"字段名\",       // 数据库字段名\n     \"operator\": \"操作符\",    // 比较运算符\n     \"value\": \"值\"            // 支持类型：string/number/boolean/array\n   }\n   ```\n\n### 支持的运算符：\n| 类型         | 运算符                  | 说明                              | 值类型               |\n|--------------|-------------------------|-----------------------------------|----------------------|\n| **比较运算符** | `=`, `!=`, `>`, `<`, `>=`, `<=` | 基础比较          | string/number       |\n|              | `in`, `not_in`          | 集合判断                          | array               |\n|              | `like`, `not_like`      | 模糊匹配（需用 % 通配符）          | string              |\n|              | `is_null`, `is_not_null`| 空值检查                          | 忽略 value 字段      |\n| **逻辑运算符** | `AND`, `OR`             | 组合多个条件（需配 conditions 数组）| 嵌套对象数组        |\n|              | `NOT`                   | 取反（需配 condition 对象）        | 单个嵌套对象        |\n\n### 使用示例：\n```json\n{\n  \"condition\": {\n    \"operator\": \"AND\",\n    \"conditions\": [\n      {\n        \"field\": \"salary\",\n        \"operator\": \">\",\n        \"value\": 50000\n      },\n      {\n        \"operator\": \"OR\",\n        \"conditions\": [\n          {\n            \"field\": \"department\",\n            \"operator\": \"=\",\n            \"value\": \"Engineering\"\n          },\n          {\n            \"operator\": \"NOT\",\n            \"condition\": {\n              \"field\": \"project\",\n              \"operator\": \"in\",\n              \"value\": [\"Legacy\", \"Deprecated\"]\n            }\n          }\n        ]\n      },\n      {\n        \"field\": \"name\",\n        \"operator\": \"like\",\n        \"value\": \"%John%\"\n      }\n    ]\n  }\n}\n```\n\n\n\n## 2. 将上述规范的JSON条件解析为Pandas的DataFrame查询操作\n以下是一个Python方法，可以将上述规范的JSON条件解析为Pandas的DataFrame查询操作。该方法支持多层嵌套条件，并处理了所有定义的运算符：\n\n```python\nimport pandas as pd\nimport re\nimport json\nfrom pandas.core.series import Series\n\ndef json_to_pandas(df: pd.DataFrame, condition_json: dict) -> pd.DataFrame:\n    \"\"\"\n    将JSON条件解析为Pandas DataFrame查询\n    \n    参数:\n    df: 要查询的Pandas DataFrame\n    condition_json: 符合规范的JSON条件对象\n    \n    返回:\n    过滤后的DataFrame\n    \"\"\"\n    def parse_condition(cond: dict) -> Series:\n        # 原子条件（叶子节点）\n        if 'field' in cond:\n            field = cond['field']\n            op = cond['operator']\n            value = cond.get('value')\n            series = df[field]\n            \n            # 处理NULL检查\n            if op == 'is_null':\n                return series.isnull()\n            elif op == 'is_not_null':\n                return series.notnull()\n            \n            # 处理比较运算符\n            if op == '=':\n                return series == value\n            elif op == '!=':\n                return series != value\n            elif op == '>':\n                return series > value\n            elif op == '>=':\n                return series >= value\n            elif op == '<':\n                return series < value\n            elif op == '<=':\n                return series <= value\n            elif op == 'in':\n                return series.isin(value)\n            elif op == 'not_in':\n                return ~series.isin(value)\n            elif op == 'like':\n                # 处理不同通配符模式\n                if value.startswith('%') and value.endswith('%'):\n                    pattern = value[1:-1]\n                    return series.str.contains(pattern, regex=False)\n                elif value.startswith('%'):\n                    pattern = value[1:]\n                    return series.str.endswith(pattern)\n                elif value.endswith('%'):\n                    pattern = value[:-1]\n                    return series.str.startswith(pattern)\n                else:\n                    return series == value\n            elif op == 'not_like':\n                if value.startswith('%') and value.endswith('%'):\n                    pattern = value[1:-1]\n                    return ~series.str.contains(pattern, regex=False)\n                elif value.startswith('%'):\n                    pattern = value[1:]\n                    return ~series.str.endswith(pattern)\n                elif value.endswith('%'):\n                    pattern = value[:-1]\n                    return ~series.str.startswith(pattern)\n                else:\n                    return series != value\n        \n        # 逻辑条件（分支节点）\n        op = cond['operator']\n        \n        if op == 'AND':\n            conditions = [parse_condition(c) for c in cond['conditions']]\n            # 逐步合并条件\n            result = conditions[0]\n            for c in conditions[1:]:\n                result = result & c\n            return result\n        \n        elif op == 'OR':\n            conditions = [parse_condition(c) for c in cond['conditions']]\n            result = conditions[0]\n            for c in conditions[1:]:\n                result = result | c\n            return result\n        \n        elif op == 'NOT':\n            return ~parse_condition(cond['condition'])\n        \n        else:\n            raise ValueError(f\"不支持的运算符: {op}\")\n    \n    # 从JSON字符串解析（如果传入的是字符串）\n    if isinstance(condition_json, str):\n        condition_json = json.loads(condition_json)\n    \n    # 获取根条件\n    root_condition = condition_json.get('condition', condition_json)\n    \n    # 解析并应用条件\n    mask = parse_condition(root_condition)\n    return df[mask]\n\n# 示例用法\nif __name__ == \"__main__\":\n    # 示例数据\n    data = {\n        'name': ['John', 'Alice', 'Bob', 'Charlie'],\n        'age': [25, 30, 18, 35],\n        'city': ['New York', 'London', 'Paris', 'London'],\n        'salary': [60000, 75000, 45000, 90000],\n        'department': ['Engineering', 'HR', 'Engineering', 'Marketing'],\n        'status': ['active', 'inactive', 'pending', 'active']\n    }\n    df = pd.DataFrame(data)\n    \n    # 示例JSON条件\n    condition = {\n        \"condition\": {\n            \"operator\": \"AND\",\n            \"conditions\": [\n                {\n                    \"field\": \"age\",\n                    \"operator\": \">=\",\n                    \"value\": 18\n                },\n                {\n                    \"operator\": \"OR\",\n                    \"conditions\": [\n                        {\n                            \"field\": \"city\",\n                            \"operator\": \"=\",\n                            \"value\": \"London\"\n                        },\n                        {\n                            \"operator\": \"NOT\",\n                            \"condition\": {\n                                \"field\": \"department\",\n                                \"operator\": \"in\",\n                                \"value\": [\"HR\", \"Marketing\"]\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"field\": \"name\",\n                    \"operator\": \"like\",\n                    \"value\": \"%a%\"\n                }\n            ]\n        }\n    }\n    \n    # 应用条件\n    result = json_to_pandas(df, condition)\n    print(\"过滤后的数据:\")\n    print(result)\n```\n\n### 功能说明：\n\n1. **支持所有运算符**：\n   - 比较运算符：`=`, `!=`, `>`, `<`, `>=`, `<=`\n   - 集合运算符：`in`, `not_in`\n   - 模糊匹配：`like`, `not_like`\n   - 空值检查：`is_null`, `is_not_null`\n   - 逻辑运算符：`AND`, `OR`, `NOT`\n\n2. **特殊处理`like`运算符**：\n   - `%value%`：包含模式（使用`str.contains`）\n   - `%value`：以结尾模式（使用`str.endswith`）\n   - `value%`：以开头模式（使用`str.startswith`）\n   - 无通配符：精确匹配（使用`==`）\n\n3. **嵌套条件处理**：\n   - 递归解析多层嵌套条件\n   - 正确处理`AND`/`OR`的组合逻辑\n   - 处理`NOT`运算符的单条件反转\n\n4. **输入灵活性**：\n   - 可直接传入JSON对象或JSON字符串\n   - 自动检测根节点（支持带`condition`键或不带）\n\n### 使用示例：\n\n```python\n# 简单条件\nsimple_cond = {\n    \"field\": \"age\",\n    \"operator\": \">\",\n    \"value\": 30\n}\n\n# 嵌套条件\nnested_cond = {\n    \"operator\": \"AND\",\n    \"conditions\": [\n        {\"field\": \"salary\", \"operator\": \">=\", \"value\": 50000},\n        {\"operator\": \"NOT\", \"condition\": {\n            \"field\": \"status\", \"operator\": \"in\", \"value\": [\"inactive\"]\n        }}\n    ]\n}\n\n# 从文件加载JSON条件\nwith open('conditions.json') as f:\n    file_cond = json.load(f)\n\n# 应用条件\nresult1 = json_to_pandas(df, simple_cond)\nresult2 = json_to_pandas(df, nested_cond)\nresult3 = json_to_pandas(df, file_cond)\n```\n\n### 注意事项：\n\n1. **性能考虑**：\n   - 对于大型数据集，避免深度嵌套的复杂条件\n   - `like`操作使用字符串方法比正则表达式更快\n\n2. **错误处理**：\n   - 当字段不存在或类型不匹配时会抛出异常\n   - 无效运算符会引发`ValueError`\n\n3. **类型安全**：\n   - 确保比较操作的数据类型一致（如数值字段不要用`like`）\n   - `in`/`not_in`操作的值必须是列表\n\n此实现提供了灵活的条件解析，可以将复杂的嵌套JSON条件转换为高效的Pandas查询操作。","source":"_posts/sql查询语句转为json/sql查询语句转为json.md","raw":"---\ntitle: sql查询语句转为json\ndate: 2025-06-03 16:48:55\nupdated: 2025-06-03 16:48:55\ntags:\n - 开发心得\ncategories:\n - 开发心得\nkeywords:\n - sql\n - json\n - pandas\n - dataframe\ndescription: 一个规范的JSON设计，支持多层嵌套的 WHERE 条件查询，转化为pandas操作\n---\n## 1. 支持多层嵌套的 WHERE 条件查询的 JSON 设计\n下面是一个规范的 JSON 设计，支持多层嵌套的 WHERE 条件查询，符合数据库查询条件的设计模式。该结构支持逻辑运算符（AND/OR/NOT）和比较运算符（=, >, in, like 等），并允许无限级嵌套：\n\n```json\n{\n  \"condition\": {\n    \"operator\": \"AND\",\n    \"conditions\": [\n      {\n        \"field\": \"age\",\n        \"operator\": \">=\",\n        \"value\": 18\n      },\n      {\n        \"operator\": \"OR\",\n        \"conditions\": [\n          {\n            \"field\": \"city\",\n            \"operator\": \"=\",\n            \"value\": \"New York\"\n          },\n          {\n            \"field\": \"city\",\n            \"operator\": \"=\",\n            \"value\": \"London\"\n          }\n        ]\n      },\n      {\n        \"operator\": \"NOT\",\n        \"condition\": {\n          \"field\": \"status\",\n          \"operator\": \"in\",\n          \"value\": [\"inactive\", \"pending\"]\n        }\n      }\n    ]\n  }\n}\n```\n\n### 结构说明：\n1. **顶级对象**  \n   - `condition` (对象)：包含整个查询条件的根节点\n\n2. **逻辑条件节点** (可嵌套)  \n   ```typescript\n   {\n     \"operator\": \"AND\" | \"OR\" | \"NOT\",  // 逻辑运算符\n     \"conditions\"?: [ ... ],            // 仅当 operator=AND/OR 时存在（子条件数组）\n     \"condition\"?: { ... }              // 仅当 operator=NOT 时存在（单个子条件）\n   }\n   ```\n\n3. **原子条件节点** (叶子节点)  \n   ```typescript\n   {\n     \"field\": \"字段名\",       // 数据库字段名\n     \"operator\": \"操作符\",    // 比较运算符\n     \"value\": \"值\"            // 支持类型：string/number/boolean/array\n   }\n   ```\n\n### 支持的运算符：\n| 类型         | 运算符                  | 说明                              | 值类型               |\n|--------------|-------------------------|-----------------------------------|----------------------|\n| **比较运算符** | `=`, `!=`, `>`, `<`, `>=`, `<=` | 基础比较          | string/number       |\n|              | `in`, `not_in`          | 集合判断                          | array               |\n|              | `like`, `not_like`      | 模糊匹配（需用 % 通配符）          | string              |\n|              | `is_null`, `is_not_null`| 空值检查                          | 忽略 value 字段      |\n| **逻辑运算符** | `AND`, `OR`             | 组合多个条件（需配 conditions 数组）| 嵌套对象数组        |\n|              | `NOT`                   | 取反（需配 condition 对象）        | 单个嵌套对象        |\n\n### 使用示例：\n```json\n{\n  \"condition\": {\n    \"operator\": \"AND\",\n    \"conditions\": [\n      {\n        \"field\": \"salary\",\n        \"operator\": \">\",\n        \"value\": 50000\n      },\n      {\n        \"operator\": \"OR\",\n        \"conditions\": [\n          {\n            \"field\": \"department\",\n            \"operator\": \"=\",\n            \"value\": \"Engineering\"\n          },\n          {\n            \"operator\": \"NOT\",\n            \"condition\": {\n              \"field\": \"project\",\n              \"operator\": \"in\",\n              \"value\": [\"Legacy\", \"Deprecated\"]\n            }\n          }\n        ]\n      },\n      {\n        \"field\": \"name\",\n        \"operator\": \"like\",\n        \"value\": \"%John%\"\n      }\n    ]\n  }\n}\n```\n\n\n\n## 2. 将上述规范的JSON条件解析为Pandas的DataFrame查询操作\n以下是一个Python方法，可以将上述规范的JSON条件解析为Pandas的DataFrame查询操作。该方法支持多层嵌套条件，并处理了所有定义的运算符：\n\n```python\nimport pandas as pd\nimport re\nimport json\nfrom pandas.core.series import Series\n\ndef json_to_pandas(df: pd.DataFrame, condition_json: dict) -> pd.DataFrame:\n    \"\"\"\n    将JSON条件解析为Pandas DataFrame查询\n    \n    参数:\n    df: 要查询的Pandas DataFrame\n    condition_json: 符合规范的JSON条件对象\n    \n    返回:\n    过滤后的DataFrame\n    \"\"\"\n    def parse_condition(cond: dict) -> Series:\n        # 原子条件（叶子节点）\n        if 'field' in cond:\n            field = cond['field']\n            op = cond['operator']\n            value = cond.get('value')\n            series = df[field]\n            \n            # 处理NULL检查\n            if op == 'is_null':\n                return series.isnull()\n            elif op == 'is_not_null':\n                return series.notnull()\n            \n            # 处理比较运算符\n            if op == '=':\n                return series == value\n            elif op == '!=':\n                return series != value\n            elif op == '>':\n                return series > value\n            elif op == '>=':\n                return series >= value\n            elif op == '<':\n                return series < value\n            elif op == '<=':\n                return series <= value\n            elif op == 'in':\n                return series.isin(value)\n            elif op == 'not_in':\n                return ~series.isin(value)\n            elif op == 'like':\n                # 处理不同通配符模式\n                if value.startswith('%') and value.endswith('%'):\n                    pattern = value[1:-1]\n                    return series.str.contains(pattern, regex=False)\n                elif value.startswith('%'):\n                    pattern = value[1:]\n                    return series.str.endswith(pattern)\n                elif value.endswith('%'):\n                    pattern = value[:-1]\n                    return series.str.startswith(pattern)\n                else:\n                    return series == value\n            elif op == 'not_like':\n                if value.startswith('%') and value.endswith('%'):\n                    pattern = value[1:-1]\n                    return ~series.str.contains(pattern, regex=False)\n                elif value.startswith('%'):\n                    pattern = value[1:]\n                    return ~series.str.endswith(pattern)\n                elif value.endswith('%'):\n                    pattern = value[:-1]\n                    return ~series.str.startswith(pattern)\n                else:\n                    return series != value\n        \n        # 逻辑条件（分支节点）\n        op = cond['operator']\n        \n        if op == 'AND':\n            conditions = [parse_condition(c) for c in cond['conditions']]\n            # 逐步合并条件\n            result = conditions[0]\n            for c in conditions[1:]:\n                result = result & c\n            return result\n        \n        elif op == 'OR':\n            conditions = [parse_condition(c) for c in cond['conditions']]\n            result = conditions[0]\n            for c in conditions[1:]:\n                result = result | c\n            return result\n        \n        elif op == 'NOT':\n            return ~parse_condition(cond['condition'])\n        \n        else:\n            raise ValueError(f\"不支持的运算符: {op}\")\n    \n    # 从JSON字符串解析（如果传入的是字符串）\n    if isinstance(condition_json, str):\n        condition_json = json.loads(condition_json)\n    \n    # 获取根条件\n    root_condition = condition_json.get('condition', condition_json)\n    \n    # 解析并应用条件\n    mask = parse_condition(root_condition)\n    return df[mask]\n\n# 示例用法\nif __name__ == \"__main__\":\n    # 示例数据\n    data = {\n        'name': ['John', 'Alice', 'Bob', 'Charlie'],\n        'age': [25, 30, 18, 35],\n        'city': ['New York', 'London', 'Paris', 'London'],\n        'salary': [60000, 75000, 45000, 90000],\n        'department': ['Engineering', 'HR', 'Engineering', 'Marketing'],\n        'status': ['active', 'inactive', 'pending', 'active']\n    }\n    df = pd.DataFrame(data)\n    \n    # 示例JSON条件\n    condition = {\n        \"condition\": {\n            \"operator\": \"AND\",\n            \"conditions\": [\n                {\n                    \"field\": \"age\",\n                    \"operator\": \">=\",\n                    \"value\": 18\n                },\n                {\n                    \"operator\": \"OR\",\n                    \"conditions\": [\n                        {\n                            \"field\": \"city\",\n                            \"operator\": \"=\",\n                            \"value\": \"London\"\n                        },\n                        {\n                            \"operator\": \"NOT\",\n                            \"condition\": {\n                                \"field\": \"department\",\n                                \"operator\": \"in\",\n                                \"value\": [\"HR\", \"Marketing\"]\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"field\": \"name\",\n                    \"operator\": \"like\",\n                    \"value\": \"%a%\"\n                }\n            ]\n        }\n    }\n    \n    # 应用条件\n    result = json_to_pandas(df, condition)\n    print(\"过滤后的数据:\")\n    print(result)\n```\n\n### 功能说明：\n\n1. **支持所有运算符**：\n   - 比较运算符：`=`, `!=`, `>`, `<`, `>=`, `<=`\n   - 集合运算符：`in`, `not_in`\n   - 模糊匹配：`like`, `not_like`\n   - 空值检查：`is_null`, `is_not_null`\n   - 逻辑运算符：`AND`, `OR`, `NOT`\n\n2. **特殊处理`like`运算符**：\n   - `%value%`：包含模式（使用`str.contains`）\n   - `%value`：以结尾模式（使用`str.endswith`）\n   - `value%`：以开头模式（使用`str.startswith`）\n   - 无通配符：精确匹配（使用`==`）\n\n3. **嵌套条件处理**：\n   - 递归解析多层嵌套条件\n   - 正确处理`AND`/`OR`的组合逻辑\n   - 处理`NOT`运算符的单条件反转\n\n4. **输入灵活性**：\n   - 可直接传入JSON对象或JSON字符串\n   - 自动检测根节点（支持带`condition`键或不带）\n\n### 使用示例：\n\n```python\n# 简单条件\nsimple_cond = {\n    \"field\": \"age\",\n    \"operator\": \">\",\n    \"value\": 30\n}\n\n# 嵌套条件\nnested_cond = {\n    \"operator\": \"AND\",\n    \"conditions\": [\n        {\"field\": \"salary\", \"operator\": \">=\", \"value\": 50000},\n        {\"operator\": \"NOT\", \"condition\": {\n            \"field\": \"status\", \"operator\": \"in\", \"value\": [\"inactive\"]\n        }}\n    ]\n}\n\n# 从文件加载JSON条件\nwith open('conditions.json') as f:\n    file_cond = json.load(f)\n\n# 应用条件\nresult1 = json_to_pandas(df, simple_cond)\nresult2 = json_to_pandas(df, nested_cond)\nresult3 = json_to_pandas(df, file_cond)\n```\n\n### 注意事项：\n\n1. **性能考虑**：\n   - 对于大型数据集，避免深度嵌套的复杂条件\n   - `like`操作使用字符串方法比正则表达式更快\n\n2. **错误处理**：\n   - 当字段不存在或类型不匹配时会抛出异常\n   - 无效运算符会引发`ValueError`\n\n3. **类型安全**：\n   - 确保比较操作的数据类型一致（如数值字段不要用`like`）\n   - `in`/`not_in`操作的值必须是列表\n\n此实现提供了灵活的条件解析，可以将复杂的嵌套JSON条件转换为高效的Pandas查询操作。","slug":"sql查询语句转为json/sql查询语句转为json","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvaz000tx4gr09ri6lmt","content":"<h2 id=\"1-支持多层嵌套的-WHERE-条件查询的-JSON-设计\"><a href=\"#1-支持多层嵌套的-WHERE-条件查询的-JSON-设计\" class=\"headerlink\" title=\"1. 支持多层嵌套的 WHERE 条件查询的 JSON 设计\"></a>1. 支持多层嵌套的 WHERE 条件查询的 JSON 设计</h2><p>下面是一个规范的 JSON 设计，支持多层嵌套的 WHERE 条件查询，符合数据库查询条件的设计模式。该结构支持逻辑运算符（AND&#x2F;OR&#x2F;NOT）和比较运算符（&#x3D;, &gt;, in, like 等），并允许无限级嵌套：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AND&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;age&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&gt;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">18</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OR&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;city&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New York&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;city&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;London&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NOT&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;status&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;in&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;inactive&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;pending&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构说明：\"><a href=\"#结构说明：\" class=\"headerlink\" title=\"结构说明：\"></a>结构说明：</h3><ol>\n<li><p><strong>顶级对象</strong>  </p>\n<ul>\n<li><code>condition</code> (对象)：包含整个查询条件的根节点</li>\n</ul>\n</li>\n<li><p><strong>逻辑条件节点</strong> (可嵌套)  </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;AND&quot;</span> | <span class=\"string\">&quot;OR&quot;</span> | <span class=\"string\">&quot;NOT&quot;</span>,  <span class=\"comment\">// 逻辑运算符</span></span><br><span class=\"line\">  <span class=\"string\">&quot;conditions&quot;</span>?: [ ... ],            <span class=\"comment\">// 仅当 operator=AND/OR 时存在（子条件数组）</span></span><br><span class=\"line\">  <span class=\"string\">&quot;condition&quot;</span>?: &#123; ... &#125;              <span class=\"comment\">// 仅当 operator=NOT 时存在（单个子条件）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>原子条件节点</strong> (叶子节点)  </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;字段名&quot;</span>,       <span class=\"comment\">// 数据库字段名</span></span><br><span class=\"line\">  <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;操作符&quot;</span>,    <span class=\"comment\">// 比较运算符</span></span><br><span class=\"line\">  <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;值&quot;</span>            <span class=\"comment\">// 支持类型：string/number/boolean/array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"支持的运算符：\"><a href=\"#支持的运算符：\" class=\"headerlink\" title=\"支持的运算符：\"></a>支持的运算符：</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>运算符</th>\n<th>说明</th>\n<th>值类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>比较运算符</strong></td>\n<td><code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></td>\n<td>基础比较</td>\n<td>string&#x2F;number</td>\n</tr>\n<tr>\n<td></td>\n<td><code>in</code>, <code>not_in</code></td>\n<td>集合判断</td>\n<td>array</td>\n</tr>\n<tr>\n<td></td>\n<td><code>like</code>, <code>not_like</code></td>\n<td>模糊匹配（需用 % 通配符）</td>\n<td>string</td>\n</tr>\n<tr>\n<td></td>\n<td><code>is_null</code>, <code>is_not_null</code></td>\n<td>空值检查</td>\n<td>忽略 value 字段</td>\n</tr>\n<tr>\n<td><strong>逻辑运算符</strong></td>\n<td><code>AND</code>, <code>OR</code></td>\n<td>组合多个条件（需配 conditions 数组）</td>\n<td>嵌套对象数组</td>\n</tr>\n<tr>\n<td></td>\n<td><code>NOT</code></td>\n<td>取反（需配 condition 对象）</td>\n<td>单个嵌套对象</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用示例：\"><a href=\"#使用示例：\" class=\"headerlink\" title=\"使用示例：\"></a>使用示例：</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AND&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;salary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OR&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;department&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Engineering&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NOT&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;project&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;in&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Legacy&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Deprecated&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;like&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;%John%&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-将上述规范的JSON条件解析为Pandas的DataFrame查询操作\"><a href=\"#2-将上述规范的JSON条件解析为Pandas的DataFrame查询操作\" class=\"headerlink\" title=\"2. 将上述规范的JSON条件解析为Pandas的DataFrame查询操作\"></a>2. 将上述规范的JSON条件解析为Pandas的DataFrame查询操作</h2><p>以下是一个Python方法，可以将上述规范的JSON条件解析为Pandas的DataFrame查询操作。该方法支持多层嵌套条件，并处理了所有定义的运算符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas.core.series <span class=\"keyword\">import</span> Series</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">json_to_pandas</span>(<span class=\"params\">df: pd.DataFrame, condition_json: <span class=\"built_in\">dict</span></span>) -&gt; pd.DataFrame:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    将JSON条件解析为Pandas DataFrame查询</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    参数:</span></span><br><span class=\"line\"><span class=\"string\">    df: 要查询的Pandas DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    condition_json: 符合规范的JSON条件对象</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    返回:</span></span><br><span class=\"line\"><span class=\"string\">    过滤后的DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parse_condition</span>(<span class=\"params\">cond: <span class=\"built_in\">dict</span></span>) -&gt; Series:</span><br><span class=\"line\">        <span class=\"comment\"># 原子条件（叶子节点）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;field&#x27;</span> <span class=\"keyword\">in</span> cond:</span><br><span class=\"line\">            field = cond[<span class=\"string\">&#x27;field&#x27;</span>]</span><br><span class=\"line\">            op = cond[<span class=\"string\">&#x27;operator&#x27;</span>]</span><br><span class=\"line\">            value = cond.get(<span class=\"string\">&#x27;value&#x27;</span>)</span><br><span class=\"line\">            series = df[field]</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 处理NULL检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&#x27;is_null&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series.isnull()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;is_not_null&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series.notnull()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 处理比较运算符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&#x27;=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series == value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;!=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series != value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&gt;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &gt; value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&gt;=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &gt;= value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&lt;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &lt; value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&lt;=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &lt;= value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;in&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series.isin(value)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;not_in&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ~series.isin(value)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;like&#x27;</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 处理不同通配符模式</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>) <span class=\"keyword\">and</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series.<span class=\"built_in\">str</span>.contains(pattern, regex=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series.<span class=\"built_in\">str</span>.endswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series.<span class=\"built_in\">str</span>.startswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series == value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;not_like&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>) <span class=\"keyword\">and</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ~series.<span class=\"built_in\">str</span>.contains(pattern, regex=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ~series.<span class=\"built_in\">str</span>.endswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ~series.<span class=\"built_in\">str</span>.startswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series != value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 逻辑条件（分支节点）</span></span><br><span class=\"line\">        op = cond[<span class=\"string\">&#x27;operator&#x27;</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> op == <span class=\"string\">&#x27;AND&#x27;</span>:</span><br><span class=\"line\">            conditions = [parse_condition(c) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> cond[<span class=\"string\">&#x27;conditions&#x27;</span>]]</span><br><span class=\"line\">            <span class=\"comment\"># 逐步合并条件</span></span><br><span class=\"line\">            result = conditions[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> conditions[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">                result = result &amp; c</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;OR&#x27;</span>:</span><br><span class=\"line\">            conditions = [parse_condition(c) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> cond[<span class=\"string\">&#x27;conditions&#x27;</span>]]</span><br><span class=\"line\">            result = conditions[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> conditions[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">                result = result | c</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;NOT&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ~parse_condition(cond[<span class=\"string\">&#x27;condition&#x27;</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的运算符: <span class=\"subst\">&#123;op&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 从JSON字符串解析（如果传入的是字符串）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(condition_json, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        condition_json = json.loads(condition_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 获取根条件</span></span><br><span class=\"line\">    root_condition = condition_json.get(<span class=\"string\">&#x27;condition&#x27;</span>, condition_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 解析并应用条件</span></span><br><span class=\"line\">    mask = parse_condition(root_condition)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df[mask]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例用法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 示例数据</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;name&#x27;</span>: [<span class=\"string\">&#x27;John&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Charlie&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;age&#x27;</span>: [<span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">18</span>, <span class=\"number\">35</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;city&#x27;</span>: [<span class=\"string\">&#x27;New York&#x27;</span>, <span class=\"string\">&#x27;London&#x27;</span>, <span class=\"string\">&#x27;Paris&#x27;</span>, <span class=\"string\">&#x27;London&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;salary&#x27;</span>: [<span class=\"number\">60000</span>, <span class=\"number\">75000</span>, <span class=\"number\">45000</span>, <span class=\"number\">90000</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;department&#x27;</span>: [<span class=\"string\">&#x27;Engineering&#x27;</span>, <span class=\"string\">&#x27;HR&#x27;</span>, <span class=\"string\">&#x27;Engineering&#x27;</span>, <span class=\"string\">&#x27;Marketing&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: [<span class=\"string\">&#x27;active&#x27;</span>, <span class=\"string\">&#x27;inactive&#x27;</span>, <span class=\"string\">&#x27;pending&#x27;</span>, <span class=\"string\">&#x27;active&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    df = pd.DataFrame(data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例JSON条件</span></span><br><span class=\"line\">    condition = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;condition&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;AND&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;conditions&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;age&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;&gt;=&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">18</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;OR&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;conditions&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;city&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;=&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;London&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;NOT&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;condition&quot;</span>: &#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;department&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;in&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;value&quot;</span>: [<span class=\"string\">&quot;HR&quot;</span>, <span class=\"string\">&quot;Marketing&quot;</span>]</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;like&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;%a%&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 应用条件</span></span><br><span class=\"line\">    result = json_to_pandas(df, condition)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;过滤后的数据:&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"功能说明：\"><a href=\"#功能说明：\" class=\"headerlink\" title=\"功能说明：\"></a>功能说明：</h3><ol>\n<li><p><strong>支持所有运算符</strong>：</p>\n<ul>\n<li>比较运算符：<code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li>\n<li>集合运算符：<code>in</code>, <code>not_in</code></li>\n<li>模糊匹配：<code>like</code>, <code>not_like</code></li>\n<li>空值检查：<code>is_null</code>, <code>is_not_null</code></li>\n<li>逻辑运算符：<code>AND</code>, <code>OR</code>, <code>NOT</code></li>\n</ul>\n</li>\n<li><p><strong>特殊处理<code>like</code>运算符</strong>：</p>\n<ul>\n<li><code>%value%</code>：包含模式（使用<code>str.contains</code>）</li>\n<li><code>%value</code>：以结尾模式（使用<code>str.endswith</code>）</li>\n<li><code>value%</code>：以开头模式（使用<code>str.startswith</code>）</li>\n<li>无通配符：精确匹配（使用<code>==</code>）</li>\n</ul>\n</li>\n<li><p><strong>嵌套条件处理</strong>：</p>\n<ul>\n<li>递归解析多层嵌套条件</li>\n<li>正确处理<code>AND</code>&#x2F;<code>OR</code>的组合逻辑</li>\n<li>处理<code>NOT</code>运算符的单条件反转</li>\n</ul>\n</li>\n<li><p><strong>输入灵活性</strong>：</p>\n<ul>\n<li>可直接传入JSON对象或JSON字符串</li>\n<li>自动检测根节点（支持带<code>condition</code>键或不带）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用示例：-1\"><a href=\"#使用示例：-1\" class=\"headerlink\" title=\"使用示例：\"></a>使用示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单条件</span></span><br><span class=\"line\">simple_cond = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;age&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;&gt;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 嵌套条件</span></span><br><span class=\"line\">nested_cond = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;AND&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;conditions&quot;</span>: [</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;salary&quot;</span>, <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;&gt;=&quot;</span>, <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">50000</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;NOT&quot;</span>, <span class=\"string\">&quot;condition&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;status&quot;</span>, <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;in&quot;</span>, <span class=\"string\">&quot;value&quot;</span>: [<span class=\"string\">&quot;inactive&quot;</span>]</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从文件加载JSON条件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;conditions.json&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    file_cond = json.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 应用条件</span></span><br><span class=\"line\">result1 = json_to_pandas(df, simple_cond)</span><br><span class=\"line\">result2 = json_to_pandas(df, nested_cond)</span><br><span class=\"line\">result3 = json_to_pandas(df, file_cond)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p><strong>性能考虑</strong>：</p>\n<ul>\n<li>对于大型数据集，避免深度嵌套的复杂条件</li>\n<li><code>like</code>操作使用字符串方法比正则表达式更快</li>\n</ul>\n</li>\n<li><p><strong>错误处理</strong>：</p>\n<ul>\n<li>当字段不存在或类型不匹配时会抛出异常</li>\n<li>无效运算符会引发<code>ValueError</code></li>\n</ul>\n</li>\n<li><p><strong>类型安全</strong>：</p>\n<ul>\n<li>确保比较操作的数据类型一致（如数值字段不要用<code>like</code>）</li>\n<li><code>in</code>&#x2F;<code>not_in</code>操作的值必须是列表</li>\n</ul>\n</li>\n</ol>\n<p>此实现提供了灵活的条件解析，可以将复杂的嵌套JSON条件转换为高效的Pandas查询操作。</p>\n","excerpt":"","more":"<h2 id=\"1-支持多层嵌套的-WHERE-条件查询的-JSON-设计\"><a href=\"#1-支持多层嵌套的-WHERE-条件查询的-JSON-设计\" class=\"headerlink\" title=\"1. 支持多层嵌套的 WHERE 条件查询的 JSON 设计\"></a>1. 支持多层嵌套的 WHERE 条件查询的 JSON 设计</h2><p>下面是一个规范的 JSON 设计，支持多层嵌套的 WHERE 条件查询，符合数据库查询条件的设计模式。该结构支持逻辑运算符（AND&#x2F;OR&#x2F;NOT）和比较运算符（&#x3D;, &gt;, in, like 等），并允许无限级嵌套：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AND&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;age&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&gt;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">18</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OR&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;city&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;New York&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;city&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;London&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NOT&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;status&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;in&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;inactive&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;pending&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构说明：\"><a href=\"#结构说明：\" class=\"headerlink\" title=\"结构说明：\"></a>结构说明：</h3><ol>\n<li><p><strong>顶级对象</strong>  </p>\n<ul>\n<li><code>condition</code> (对象)：包含整个查询条件的根节点</li>\n</ul>\n</li>\n<li><p><strong>逻辑条件节点</strong> (可嵌套)  </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;AND&quot;</span> | <span class=\"string\">&quot;OR&quot;</span> | <span class=\"string\">&quot;NOT&quot;</span>,  <span class=\"comment\">// 逻辑运算符</span></span><br><span class=\"line\">  <span class=\"string\">&quot;conditions&quot;</span>?: [ ... ],            <span class=\"comment\">// 仅当 operator=AND/OR 时存在（子条件数组）</span></span><br><span class=\"line\">  <span class=\"string\">&quot;condition&quot;</span>?: &#123; ... &#125;              <span class=\"comment\">// 仅当 operator=NOT 时存在（单个子条件）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>原子条件节点</strong> (叶子节点)  </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;字段名&quot;</span>,       <span class=\"comment\">// 数据库字段名</span></span><br><span class=\"line\">  <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;操作符&quot;</span>,    <span class=\"comment\">// 比较运算符</span></span><br><span class=\"line\">  <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;值&quot;</span>            <span class=\"comment\">// 支持类型：string/number/boolean/array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"支持的运算符：\"><a href=\"#支持的运算符：\" class=\"headerlink\" title=\"支持的运算符：\"></a>支持的运算符：</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>运算符</th>\n<th>说明</th>\n<th>值类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>比较运算符</strong></td>\n<td><code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></td>\n<td>基础比较</td>\n<td>string&#x2F;number</td>\n</tr>\n<tr>\n<td></td>\n<td><code>in</code>, <code>not_in</code></td>\n<td>集合判断</td>\n<td>array</td>\n</tr>\n<tr>\n<td></td>\n<td><code>like</code>, <code>not_like</code></td>\n<td>模糊匹配（需用 % 通配符）</td>\n<td>string</td>\n</tr>\n<tr>\n<td></td>\n<td><code>is_null</code>, <code>is_not_null</code></td>\n<td>空值检查</td>\n<td>忽略 value 字段</td>\n</tr>\n<tr>\n<td><strong>逻辑运算符</strong></td>\n<td><code>AND</code>, <code>OR</code></td>\n<td>组合多个条件（需配 conditions 数组）</td>\n<td>嵌套对象数组</td>\n</tr>\n<tr>\n<td></td>\n<td><code>NOT</code></td>\n<td>取反（需配 condition 对象）</td>\n<td>单个嵌套对象</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用示例：\"><a href=\"#使用示例：\" class=\"headerlink\" title=\"使用示例：\"></a>使用示例：</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AND&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;salary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OR&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;conditions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;department&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Engineering&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NOT&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;project&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;in&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Legacy&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;Deprecated&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;like&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;%John%&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-将上述规范的JSON条件解析为Pandas的DataFrame查询操作\"><a href=\"#2-将上述规范的JSON条件解析为Pandas的DataFrame查询操作\" class=\"headerlink\" title=\"2. 将上述规范的JSON条件解析为Pandas的DataFrame查询操作\"></a>2. 将上述规范的JSON条件解析为Pandas的DataFrame查询操作</h2><p>以下是一个Python方法，可以将上述规范的JSON条件解析为Pandas的DataFrame查询操作。该方法支持多层嵌套条件，并处理了所有定义的运算符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas.core.series <span class=\"keyword\">import</span> Series</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">json_to_pandas</span>(<span class=\"params\">df: pd.DataFrame, condition_json: <span class=\"built_in\">dict</span></span>) -&gt; pd.DataFrame:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    将JSON条件解析为Pandas DataFrame查询</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    参数:</span></span><br><span class=\"line\"><span class=\"string\">    df: 要查询的Pandas DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    condition_json: 符合规范的JSON条件对象</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    返回:</span></span><br><span class=\"line\"><span class=\"string\">    过滤后的DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parse_condition</span>(<span class=\"params\">cond: <span class=\"built_in\">dict</span></span>) -&gt; Series:</span><br><span class=\"line\">        <span class=\"comment\"># 原子条件（叶子节点）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;field&#x27;</span> <span class=\"keyword\">in</span> cond:</span><br><span class=\"line\">            field = cond[<span class=\"string\">&#x27;field&#x27;</span>]</span><br><span class=\"line\">            op = cond[<span class=\"string\">&#x27;operator&#x27;</span>]</span><br><span class=\"line\">            value = cond.get(<span class=\"string\">&#x27;value&#x27;</span>)</span><br><span class=\"line\">            series = df[field]</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 处理NULL检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&#x27;is_null&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series.isnull()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;is_not_null&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series.notnull()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 处理比较运算符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&#x27;=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series == value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;!=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series != value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&gt;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &gt; value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&gt;=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &gt;= value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&lt;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &lt; value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;&lt;=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series &lt;= value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;in&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> series.isin(value)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;not_in&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ~series.isin(value)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;like&#x27;</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 处理不同通配符模式</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>) <span class=\"keyword\">and</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series.<span class=\"built_in\">str</span>.contains(pattern, regex=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series.<span class=\"built_in\">str</span>.endswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series.<span class=\"built_in\">str</span>.startswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series == value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;not_like&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>) <span class=\"keyword\">and</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ~series.<span class=\"built_in\">str</span>.contains(pattern, regex=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.startswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[<span class=\"number\">1</span>:]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ~series.<span class=\"built_in\">str</span>.endswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value.endswith(<span class=\"string\">&#x27;%&#x27;</span>):</span><br><span class=\"line\">                    pattern = value[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ~series.<span class=\"built_in\">str</span>.startswith(pattern)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> series != value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 逻辑条件（分支节点）</span></span><br><span class=\"line\">        op = cond[<span class=\"string\">&#x27;operator&#x27;</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> op == <span class=\"string\">&#x27;AND&#x27;</span>:</span><br><span class=\"line\">            conditions = [parse_condition(c) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> cond[<span class=\"string\">&#x27;conditions&#x27;</span>]]</span><br><span class=\"line\">            <span class=\"comment\"># 逐步合并条件</span></span><br><span class=\"line\">            result = conditions[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> conditions[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">                result = result &amp; c</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;OR&#x27;</span>:</span><br><span class=\"line\">            conditions = [parse_condition(c) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> cond[<span class=\"string\">&#x27;conditions&#x27;</span>]]</span><br><span class=\"line\">            result = conditions[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> conditions[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">                result = result | c</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">elif</span> op == <span class=\"string\">&#x27;NOT&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ~parse_condition(cond[<span class=\"string\">&#x27;condition&#x27;</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的运算符: <span class=\"subst\">&#123;op&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 从JSON字符串解析（如果传入的是字符串）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(condition_json, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        condition_json = json.loads(condition_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 获取根条件</span></span><br><span class=\"line\">    root_condition = condition_json.get(<span class=\"string\">&#x27;condition&#x27;</span>, condition_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 解析并应用条件</span></span><br><span class=\"line\">    mask = parse_condition(root_condition)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df[mask]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例用法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 示例数据</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;name&#x27;</span>: [<span class=\"string\">&#x27;John&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Charlie&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;age&#x27;</span>: [<span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">18</span>, <span class=\"number\">35</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;city&#x27;</span>: [<span class=\"string\">&#x27;New York&#x27;</span>, <span class=\"string\">&#x27;London&#x27;</span>, <span class=\"string\">&#x27;Paris&#x27;</span>, <span class=\"string\">&#x27;London&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;salary&#x27;</span>: [<span class=\"number\">60000</span>, <span class=\"number\">75000</span>, <span class=\"number\">45000</span>, <span class=\"number\">90000</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;department&#x27;</span>: [<span class=\"string\">&#x27;Engineering&#x27;</span>, <span class=\"string\">&#x27;HR&#x27;</span>, <span class=\"string\">&#x27;Engineering&#x27;</span>, <span class=\"string\">&#x27;Marketing&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: [<span class=\"string\">&#x27;active&#x27;</span>, <span class=\"string\">&#x27;inactive&#x27;</span>, <span class=\"string\">&#x27;pending&#x27;</span>, <span class=\"string\">&#x27;active&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    df = pd.DataFrame(data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例JSON条件</span></span><br><span class=\"line\">    condition = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;condition&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;AND&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;conditions&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;age&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;&gt;=&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">18</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;OR&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;conditions&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;city&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;=&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;London&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;NOT&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;condition&quot;</span>: &#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;department&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;in&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;value&quot;</span>: [<span class=\"string\">&quot;HR&quot;</span>, <span class=\"string\">&quot;Marketing&quot;</span>]</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;like&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;%a%&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 应用条件</span></span><br><span class=\"line\">    result = json_to_pandas(df, condition)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;过滤后的数据:&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"功能说明：\"><a href=\"#功能说明：\" class=\"headerlink\" title=\"功能说明：\"></a>功能说明：</h3><ol>\n<li><p><strong>支持所有运算符</strong>：</p>\n<ul>\n<li>比较运算符：<code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li>\n<li>集合运算符：<code>in</code>, <code>not_in</code></li>\n<li>模糊匹配：<code>like</code>, <code>not_like</code></li>\n<li>空值检查：<code>is_null</code>, <code>is_not_null</code></li>\n<li>逻辑运算符：<code>AND</code>, <code>OR</code>, <code>NOT</code></li>\n</ul>\n</li>\n<li><p><strong>特殊处理<code>like</code>运算符</strong>：</p>\n<ul>\n<li><code>%value%</code>：包含模式（使用<code>str.contains</code>）</li>\n<li><code>%value</code>：以结尾模式（使用<code>str.endswith</code>）</li>\n<li><code>value%</code>：以开头模式（使用<code>str.startswith</code>）</li>\n<li>无通配符：精确匹配（使用<code>==</code>）</li>\n</ul>\n</li>\n<li><p><strong>嵌套条件处理</strong>：</p>\n<ul>\n<li>递归解析多层嵌套条件</li>\n<li>正确处理<code>AND</code>&#x2F;<code>OR</code>的组合逻辑</li>\n<li>处理<code>NOT</code>运算符的单条件反转</li>\n</ul>\n</li>\n<li><p><strong>输入灵活性</strong>：</p>\n<ul>\n<li>可直接传入JSON对象或JSON字符串</li>\n<li>自动检测根节点（支持带<code>condition</code>键或不带）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用示例：-1\"><a href=\"#使用示例：-1\" class=\"headerlink\" title=\"使用示例：\"></a>使用示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单条件</span></span><br><span class=\"line\">simple_cond = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;age&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;&gt;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 嵌套条件</span></span><br><span class=\"line\">nested_cond = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;AND&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;conditions&quot;</span>: [</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;salary&quot;</span>, <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;&gt;=&quot;</span>, <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">50000</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;NOT&quot;</span>, <span class=\"string\">&quot;condition&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;field&quot;</span>: <span class=\"string\">&quot;status&quot;</span>, <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;in&quot;</span>, <span class=\"string\">&quot;value&quot;</span>: [<span class=\"string\">&quot;inactive&quot;</span>]</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从文件加载JSON条件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;conditions.json&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    file_cond = json.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 应用条件</span></span><br><span class=\"line\">result1 = json_to_pandas(df, simple_cond)</span><br><span class=\"line\">result2 = json_to_pandas(df, nested_cond)</span><br><span class=\"line\">result3 = json_to_pandas(df, file_cond)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p><strong>性能考虑</strong>：</p>\n<ul>\n<li>对于大型数据集，避免深度嵌套的复杂条件</li>\n<li><code>like</code>操作使用字符串方法比正则表达式更快</li>\n</ul>\n</li>\n<li><p><strong>错误处理</strong>：</p>\n<ul>\n<li>当字段不存在或类型不匹配时会抛出异常</li>\n<li>无效运算符会引发<code>ValueError</code></li>\n</ul>\n</li>\n<li><p><strong>类型安全</strong>：</p>\n<ul>\n<li>确保比较操作的数据类型一致（如数值字段不要用<code>like</code>）</li>\n<li><code>in</code>&#x2F;<code>not_in</code>操作的值必须是列表</li>\n</ul>\n</li>\n</ol>\n<p>此实现提供了灵活的条件解析，可以将复杂的嵌套JSON条件转换为高效的Pandas查询操作。</p>\n"},{"title":"oracle学习笔记-表空间、区、段、数据块","date":"2025-04-13T08:44:03.000Z","updated":"2025-04-13T08:44:03.000Z","keywords":["Oracle","表空间","区","段","数据块"],"description":"表空间、区、段、数据块的基础知识和关系","_content":"Oracle数据库的存储结构分为逻辑结构和物理结构。逻辑结构包括表空间（Tablespace）、段（Segment）、区（Extent）和数据块（Data Block），它们共同管理数据的组织和存储。以下是这些核心概念的详细介绍：\n\n---\n\n### **1. 数据块（Data Block）**\n- **定义**：  \n  数据块是Oracle中最小的I/O操作单元，通常大小为 **8KB**（可配置为2KB~32KB）。\n- **组成**：\n  - **块头（Header）**：存储块的元数据（如块地址、事务信息）。\n  - **表目录（Table Directory）**：记录块中存储的表信息。\n  - **行目录（Row Directory）**：指向块中各行数据的位置。\n  - **空闲空间（Free Space）**：未使用的区域，用于插入新数据或更新现有数据。\n  - **行数据（Row Data）**：实际存储的数据行。\n- **关键参数**：\n  - **`PCTFREE`**：块中保留的空闲空间比例（默认10%），用于更新现有行。\n  - **`PCTUSED`**：块使用率低于此值时，重新允许插入数据（仅手动段管理有效）。\n- **示例**：\n  ```sql\n  CREATE TABLE employees (\n    id NUMBER,\n    name VARCHAR2(50)\n  ) PCTFREE 20 PCTUSED 40;  -- 设置块的空闲和重用阈值\n  ```\n\n---\n\n### **2. 区（Extent）**\n- **定义**：  \n  区是由**连续数据块**组成的逻辑存储单元，用于为段（如表、索引）分配空间。\n- **特点**：\n  - 当段需要更多空间时，Oracle自动分配一个区。\n  - 区的大小由表空间的存储参数（如`INITIAL`、`NEXT`）决定。\n- **示例**：\n  ```sql\n  CREATE TABLE sales (\n    sale_id NUMBER,\n    amount NUMBER\n  ) STORAGE (\n    INITIAL 64K   -- 初始区大小\n    NEXT 128K     -- 后续区大小\n    MAXEXTENTS 100 -- 最大区数量\n  );\n  ```\n\n---\n\n### **3. 段（Segment）**\n- **定义**：  \n  段是数据库对象（如表、索引）的存储容器，由多个区组成。\n- **类型**：\n  - **数据段（Data Segment）**：存储表或簇的数据。\n  - **索引段（Index Segment）**：存储索引数据。\n  - **临时段（Temporary Segment）**：用于排序或临时表操作。\n  - **回滚段（Undo Segment）**：存储事务回滚信息。\n- **管理方式**：\n  - **自动段空间管理（ASSM）**：使用位图管理空闲块（推荐）。\n  - **手动段空间管理**：使用空闲列表（Freelist）跟踪可用块。\n- **示例**：\n  ```sql\n  -- 查看表的段信息\n  SELECT segment_name, segment_type, blocks, extents\n  FROM user_segments\n  WHERE segment_name = 'EMPLOYEES';\n  ```\n\n---\n\n### **4. 表空间（Tablespace）**\n- **定义**：  \n  表空间是数据库的顶级逻辑存储结构，由多个数据文件（物理文件）组成。\n- **类型**：\n  - **系统表空间（SYSTEM）**：存储数据字典和系统对象。\n  - **用户表空间（USERS）**：存储用户数据。\n  - **临时表空间（TEMP）**：处理排序和临时操作。\n  - **撤销表空间（UNDO）**：管理事务回滚数据。\n- **管理方式**：\n  - **本地管理表空间（Locally Managed）**：使用位图跟踪区的分配（默认）。\n  - **字典管理表空间（Dictionary Managed）**：通过数据字典管理（已淘汰）。\n- **示例**：\n  ```sql\n  -- 创建表空间\n  CREATE TABLESPACE app_data\n  DATAFILE '/u01/oracle/data/app01.dbf' SIZE 100M\n  AUTOEXTEND ON NEXT 10M MAXSIZE 1G\n  EXTENT MANAGEMENT LOCAL  -- 本地管理\n  SEGMENT SPACE MANAGEMENT AUTO;  -- 自动段管理\n  ```\n\n---\n\n### **5. 四者的层次关系**\n1. **数据库** → 多个 **表空间**  \n2. **表空间** → 多个 **段**  \n3. **段** → 多个 **区**  \n4. **区** → 多个 **数据块**  \n5. **数据块** → 存储实际数据行\n\n---\n\n### **6. 关键区别与联系**\n| **概念**   | **作用**                     | **示例**                  | **管理对象**       |\n|------------|------------------------------|---------------------------|--------------------|\n| 表空间     | 逻辑存储容器                 | `USERS`, `TEMP`           | 数据文件、段       |\n| 段         | 存储数据库对象（表、索引）   | 表的数据段、索引段        | 区                 |\n| 区         | 分配存储空间的基本单元       | 初始区、扩展区            | 数据块             |\n| 数据块     | 最小I/O单元，存储实际数据    | 8KB或16KB的块             | 行数据、元数据     |\n\n---\n\n### **7. 实际应用场景**\n1. **空间规划**  \n   - 为表空间分配足够的数据文件，避免频繁扩展。\n2. **性能优化**  \n   - 调整数据块大小（如OLTP使用8KB，数据仓库使用32KB）。\n3. **碎片管理**  \n   - 定期合并碎片化的区（`ALTER TABLE ... COALESCE`）。\n4. **监控空间使用**  \n   - 查询`DBA_SEGMENTS`、`DBA_EXTENTS`视图分析段和区的分布。\n\n---\n\n### **8. 常见问题**\n1. **区分配失败**  \n   - 表空间无剩余空间，或达到`MAXEXTENTS`限制。\n2. **行迁移/行链接**  \n   - 数据块过小或`PCTFREE`设置不合理导致。\n3. **临时表空间膨胀**  \n   - 大规模排序操作未释放临时段，需定期清理。\n\n---\n\n通过理解表空间、段、区和数据块的关系，可以更高效地设计和管理Oracle数据库的存储结构，优化性能和资源利用率。","source":"_posts/oracle学习笔记-表空间、区、段、数据块/oracle学习笔记-表空间、区、段、数据块.md","raw":"---\ntitle: oracle学习笔记-表空间、区、段、数据块\ndate: 2025-04-13 16:44:03\nupdated: 2025-04-13 16:44:03\ntags:\n - oracle\ncategories:\n - 技术\n - oracle\nkeywords:\n - Oracle\n - 表空间\n - 区\n - 段\n - 数据块\ndescription: 表空间、区、段、数据块的基础知识和关系\n---\nOracle数据库的存储结构分为逻辑结构和物理结构。逻辑结构包括表空间（Tablespace）、段（Segment）、区（Extent）和数据块（Data Block），它们共同管理数据的组织和存储。以下是这些核心概念的详细介绍：\n\n---\n\n### **1. 数据块（Data Block）**\n- **定义**：  \n  数据块是Oracle中最小的I/O操作单元，通常大小为 **8KB**（可配置为2KB~32KB）。\n- **组成**：\n  - **块头（Header）**：存储块的元数据（如块地址、事务信息）。\n  - **表目录（Table Directory）**：记录块中存储的表信息。\n  - **行目录（Row Directory）**：指向块中各行数据的位置。\n  - **空闲空间（Free Space）**：未使用的区域，用于插入新数据或更新现有数据。\n  - **行数据（Row Data）**：实际存储的数据行。\n- **关键参数**：\n  - **`PCTFREE`**：块中保留的空闲空间比例（默认10%），用于更新现有行。\n  - **`PCTUSED`**：块使用率低于此值时，重新允许插入数据（仅手动段管理有效）。\n- **示例**：\n  ```sql\n  CREATE TABLE employees (\n    id NUMBER,\n    name VARCHAR2(50)\n  ) PCTFREE 20 PCTUSED 40;  -- 设置块的空闲和重用阈值\n  ```\n\n---\n\n### **2. 区（Extent）**\n- **定义**：  \n  区是由**连续数据块**组成的逻辑存储单元，用于为段（如表、索引）分配空间。\n- **特点**：\n  - 当段需要更多空间时，Oracle自动分配一个区。\n  - 区的大小由表空间的存储参数（如`INITIAL`、`NEXT`）决定。\n- **示例**：\n  ```sql\n  CREATE TABLE sales (\n    sale_id NUMBER,\n    amount NUMBER\n  ) STORAGE (\n    INITIAL 64K   -- 初始区大小\n    NEXT 128K     -- 后续区大小\n    MAXEXTENTS 100 -- 最大区数量\n  );\n  ```\n\n---\n\n### **3. 段（Segment）**\n- **定义**：  \n  段是数据库对象（如表、索引）的存储容器，由多个区组成。\n- **类型**：\n  - **数据段（Data Segment）**：存储表或簇的数据。\n  - **索引段（Index Segment）**：存储索引数据。\n  - **临时段（Temporary Segment）**：用于排序或临时表操作。\n  - **回滚段（Undo Segment）**：存储事务回滚信息。\n- **管理方式**：\n  - **自动段空间管理（ASSM）**：使用位图管理空闲块（推荐）。\n  - **手动段空间管理**：使用空闲列表（Freelist）跟踪可用块。\n- **示例**：\n  ```sql\n  -- 查看表的段信息\n  SELECT segment_name, segment_type, blocks, extents\n  FROM user_segments\n  WHERE segment_name = 'EMPLOYEES';\n  ```\n\n---\n\n### **4. 表空间（Tablespace）**\n- **定义**：  \n  表空间是数据库的顶级逻辑存储结构，由多个数据文件（物理文件）组成。\n- **类型**：\n  - **系统表空间（SYSTEM）**：存储数据字典和系统对象。\n  - **用户表空间（USERS）**：存储用户数据。\n  - **临时表空间（TEMP）**：处理排序和临时操作。\n  - **撤销表空间（UNDO）**：管理事务回滚数据。\n- **管理方式**：\n  - **本地管理表空间（Locally Managed）**：使用位图跟踪区的分配（默认）。\n  - **字典管理表空间（Dictionary Managed）**：通过数据字典管理（已淘汰）。\n- **示例**：\n  ```sql\n  -- 创建表空间\n  CREATE TABLESPACE app_data\n  DATAFILE '/u01/oracle/data/app01.dbf' SIZE 100M\n  AUTOEXTEND ON NEXT 10M MAXSIZE 1G\n  EXTENT MANAGEMENT LOCAL  -- 本地管理\n  SEGMENT SPACE MANAGEMENT AUTO;  -- 自动段管理\n  ```\n\n---\n\n### **5. 四者的层次关系**\n1. **数据库** → 多个 **表空间**  \n2. **表空间** → 多个 **段**  \n3. **段** → 多个 **区**  \n4. **区** → 多个 **数据块**  \n5. **数据块** → 存储实际数据行\n\n---\n\n### **6. 关键区别与联系**\n| **概念**   | **作用**                     | **示例**                  | **管理对象**       |\n|------------|------------------------------|---------------------------|--------------------|\n| 表空间     | 逻辑存储容器                 | `USERS`, `TEMP`           | 数据文件、段       |\n| 段         | 存储数据库对象（表、索引）   | 表的数据段、索引段        | 区                 |\n| 区         | 分配存储空间的基本单元       | 初始区、扩展区            | 数据块             |\n| 数据块     | 最小I/O单元，存储实际数据    | 8KB或16KB的块             | 行数据、元数据     |\n\n---\n\n### **7. 实际应用场景**\n1. **空间规划**  \n   - 为表空间分配足够的数据文件，避免频繁扩展。\n2. **性能优化**  \n   - 调整数据块大小（如OLTP使用8KB，数据仓库使用32KB）。\n3. **碎片管理**  \n   - 定期合并碎片化的区（`ALTER TABLE ... COALESCE`）。\n4. **监控空间使用**  \n   - 查询`DBA_SEGMENTS`、`DBA_EXTENTS`视图分析段和区的分布。\n\n---\n\n### **8. 常见问题**\n1. **区分配失败**  \n   - 表空间无剩余空间，或达到`MAXEXTENTS`限制。\n2. **行迁移/行链接**  \n   - 数据块过小或`PCTFREE`设置不合理导致。\n3. **临时表空间膨胀**  \n   - 大规模排序操作未释放临时段，需定期清理。\n\n---\n\n通过理解表空间、段、区和数据块的关系，可以更高效地设计和管理Oracle数据库的存储结构，优化性能和资源利用率。","slug":"oracle学习笔记-表空间、区、段、数据块/oracle学习笔记-表空间、区、段、数据块","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb0000ux4grgem31gkk","content":"<p>Oracle数据库的存储结构分为逻辑结构和物理结构。逻辑结构包括表空间（Tablespace）、段（Segment）、区（Extent）和数据块（Data Block），它们共同管理数据的组织和存储。以下是这些核心概念的详细介绍：</p>\n<hr>\n<h3 id=\"1-数据块（Data-Block）\"><a href=\"#1-数据块（Data-Block）\" class=\"headerlink\" title=\"1. 数据块（Data Block）\"></a><strong>1. 数据块（Data Block）</strong></h3><ul>\n<li><strong>定义</strong>：<br>数据块是Oracle中最小的I&#x2F;O操作单元，通常大小为 <strong>8KB</strong>（可配置为2KB~32KB）。</li>\n<li><strong>组成</strong>：<ul>\n<li><strong>块头（Header）</strong>：存储块的元数据（如块地址、事务信息）。</li>\n<li><strong>表目录（Table Directory）</strong>：记录块中存储的表信息。</li>\n<li><strong>行目录（Row Directory）</strong>：指向块中各行数据的位置。</li>\n<li><strong>空闲空间（Free Space）</strong>：未使用的区域，用于插入新数据或更新现有数据。</li>\n<li><strong>行数据（Row Data）</strong>：实际存储的数据行。</li>\n</ul>\n</li>\n<li><strong>关键参数</strong>：<ul>\n<li>**<code>PCTFREE</code>**：块中保留的空闲空间比例（默认10%），用于更新现有行。</li>\n<li>**<code>PCTUSED</code>**：块使用率低于此值时，重新允许插入数据（仅手动段管理有效）。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employees (</span><br><span class=\"line\">  id NUMBER,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">) PCTFREE <span class=\"number\">20</span> PCTUSED <span class=\"number\">40</span>;  <span class=\"comment\">-- 设置块的空闲和重用阈值</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"2-区（Extent）\"><a href=\"#2-区（Extent）\" class=\"headerlink\" title=\"2. 区（Extent）\"></a><strong>2. 区（Extent）</strong></h3><ul>\n<li><strong>定义</strong>：<br>区是由<strong>连续数据块</strong>组成的逻辑存储单元，用于为段（如表、索引）分配空间。</li>\n<li><strong>特点</strong>：<ul>\n<li>当段需要更多空间时，Oracle自动分配一个区。</li>\n<li>区的大小由表空间的存储参数（如<code>INITIAL</code>、<code>NEXT</code>）决定。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales (</span><br><span class=\"line\">  sale_id NUMBER,</span><br><span class=\"line\">  amount NUMBER</span><br><span class=\"line\">) STORAGE (</span><br><span class=\"line\">  <span class=\"keyword\">INITIAL</span> <span class=\"number\">64</span>K   <span class=\"comment\">-- 初始区大小</span></span><br><span class=\"line\">  NEXT <span class=\"number\">128</span>K     <span class=\"comment\">-- 后续区大小</span></span><br><span class=\"line\">  MAXEXTENTS <span class=\"number\">100</span> <span class=\"comment\">-- 最大区数量</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"3-段（Segment）\"><a href=\"#3-段（Segment）\" class=\"headerlink\" title=\"3. 段（Segment）\"></a><strong>3. 段（Segment）</strong></h3><ul>\n<li><strong>定义</strong>：<br>段是数据库对象（如表、索引）的存储容器，由多个区组成。</li>\n<li><strong>类型</strong>：<ul>\n<li><strong>数据段（Data Segment）</strong>：存储表或簇的数据。</li>\n<li><strong>索引段（Index Segment）</strong>：存储索引数据。</li>\n<li><strong>临时段（Temporary Segment）</strong>：用于排序或临时表操作。</li>\n<li><strong>回滚段（Undo Segment）</strong>：存储事务回滚信息。</li>\n</ul>\n</li>\n<li><strong>管理方式</strong>：<ul>\n<li><strong>自动段空间管理（ASSM）</strong>：使用位图管理空闲块（推荐）。</li>\n<li><strong>手动段空间管理</strong>：使用空闲列表（Freelist）跟踪可用块。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看表的段信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> segment_name, segment_type, blocks, extents</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> user_segments</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> segment_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;EMPLOYEES&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"4-表空间（Tablespace）\"><a href=\"#4-表空间（Tablespace）\" class=\"headerlink\" title=\"4. 表空间（Tablespace）\"></a><strong>4. 表空间（Tablespace）</strong></h3><ul>\n<li><strong>定义</strong>：<br>表空间是数据库的顶级逻辑存储结构，由多个数据文件（物理文件）组成。</li>\n<li><strong>类型</strong>：<ul>\n<li><strong>系统表空间（SYSTEM）</strong>：存储数据字典和系统对象。</li>\n<li><strong>用户表空间（USERS）</strong>：存储用户数据。</li>\n<li><strong>临时表空间（TEMP）</strong>：处理排序和临时操作。</li>\n<li><strong>撤销表空间（UNDO）</strong>：管理事务回滚数据。</li>\n</ul>\n</li>\n<li><strong>管理方式</strong>：<ul>\n<li><strong>本地管理表空间（Locally Managed）</strong>：使用位图跟踪区的分配（默认）。</li>\n<li><strong>字典管理表空间（Dictionary Managed）</strong>：通过数据字典管理（已淘汰）。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表空间</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>SPACE app_data</span><br><span class=\"line\">DATAFILE <span class=\"string\">&#x27;/u01/oracle/data/app01.dbf&#x27;</span> SIZE <span class=\"number\">100</span>M</span><br><span class=\"line\">AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">10</span>M MAXSIZE <span class=\"number\">1</span>G</span><br><span class=\"line\">EXTENT MANAGEMENT <span class=\"keyword\">LOCAL</span>  <span class=\"comment\">-- 本地管理</span></span><br><span class=\"line\">SEGMENT SPACE MANAGEMENT AUTO;  <span class=\"comment\">-- 自动段管理</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"5-四者的层次关系\"><a href=\"#5-四者的层次关系\" class=\"headerlink\" title=\"5. 四者的层次关系\"></a><strong>5. 四者的层次关系</strong></h3><ol>\n<li><strong>数据库</strong> → 多个 <strong>表空间</strong>  </li>\n<li><strong>表空间</strong> → 多个 <strong>段</strong>  </li>\n<li><strong>段</strong> → 多个 <strong>区</strong>  </li>\n<li><strong>区</strong> → 多个 <strong>数据块</strong>  </li>\n<li><strong>数据块</strong> → 存储实际数据行</li>\n</ol>\n<hr>\n<h3 id=\"6-关键区别与联系\"><a href=\"#6-关键区别与联系\" class=\"headerlink\" title=\"6. 关键区别与联系\"></a><strong>6. 关键区别与联系</strong></h3><table>\n<thead>\n<tr>\n<th><strong>概念</strong></th>\n<th><strong>作用</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>管理对象</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>表空间</td>\n<td>逻辑存储容器</td>\n<td><code>USERS</code>, <code>TEMP</code></td>\n<td>数据文件、段</td>\n</tr>\n<tr>\n<td>段</td>\n<td>存储数据库对象（表、索引）</td>\n<td>表的数据段、索引段</td>\n<td>区</td>\n</tr>\n<tr>\n<td>区</td>\n<td>分配存储空间的基本单元</td>\n<td>初始区、扩展区</td>\n<td>数据块</td>\n</tr>\n<tr>\n<td>数据块</td>\n<td>最小I&#x2F;O单元，存储实际数据</td>\n<td>8KB或16KB的块</td>\n<td>行数据、元数据</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"7-实际应用场景\"><a href=\"#7-实际应用场景\" class=\"headerlink\" title=\"7. 实际应用场景\"></a><strong>7. 实际应用场景</strong></h3><ol>\n<li><strong>空间规划</strong>  <ul>\n<li>为表空间分配足够的数据文件，避免频繁扩展。</li>\n</ul>\n</li>\n<li><strong>性能优化</strong>  <ul>\n<li>调整数据块大小（如OLTP使用8KB，数据仓库使用32KB）。</li>\n</ul>\n</li>\n<li><strong>碎片管理</strong>  <ul>\n<li>定期合并碎片化的区（<code>ALTER TABLE ... COALESCE</code>）。</li>\n</ul>\n</li>\n<li><strong>监控空间使用</strong>  <ul>\n<li>查询<code>DBA_SEGMENTS</code>、<code>DBA_EXTENTS</code>视图分析段和区的分布。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"8-常见问题\"><a href=\"#8-常见问题\" class=\"headerlink\" title=\"8. 常见问题\"></a><strong>8. 常见问题</strong></h3><ol>\n<li><strong>区分配失败</strong>  <ul>\n<li>表空间无剩余空间，或达到<code>MAXEXTENTS</code>限制。</li>\n</ul>\n</li>\n<li><strong>行迁移&#x2F;行链接</strong>  <ul>\n<li>数据块过小或<code>PCTFREE</code>设置不合理导致。</li>\n</ul>\n</li>\n<li><strong>临时表空间膨胀</strong>  <ul>\n<li>大规模排序操作未释放临时段，需定期清理。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>通过理解表空间、段、区和数据块的关系，可以更高效地设计和管理Oracle数据库的存储结构，优化性能和资源利用率。</p>\n","excerpt":"","more":"<p>Oracle数据库的存储结构分为逻辑结构和物理结构。逻辑结构包括表空间（Tablespace）、段（Segment）、区（Extent）和数据块（Data Block），它们共同管理数据的组织和存储。以下是这些核心概念的详细介绍：</p>\n<hr>\n<h3 id=\"1-数据块（Data-Block）\"><a href=\"#1-数据块（Data-Block）\" class=\"headerlink\" title=\"1. 数据块（Data Block）\"></a><strong>1. 数据块（Data Block）</strong></h3><ul>\n<li><strong>定义</strong>：<br>数据块是Oracle中最小的I&#x2F;O操作单元，通常大小为 <strong>8KB</strong>（可配置为2KB~32KB）。</li>\n<li><strong>组成</strong>：<ul>\n<li><strong>块头（Header）</strong>：存储块的元数据（如块地址、事务信息）。</li>\n<li><strong>表目录（Table Directory）</strong>：记录块中存储的表信息。</li>\n<li><strong>行目录（Row Directory）</strong>：指向块中各行数据的位置。</li>\n<li><strong>空闲空间（Free Space）</strong>：未使用的区域，用于插入新数据或更新现有数据。</li>\n<li><strong>行数据（Row Data）</strong>：实际存储的数据行。</li>\n</ul>\n</li>\n<li><strong>关键参数</strong>：<ul>\n<li>**<code>PCTFREE</code>**：块中保留的空闲空间比例（默认10%），用于更新现有行。</li>\n<li>**<code>PCTUSED</code>**：块使用率低于此值时，重新允许插入数据（仅手动段管理有效）。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employees (</span><br><span class=\"line\">  id NUMBER,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">) PCTFREE <span class=\"number\">20</span> PCTUSED <span class=\"number\">40</span>;  <span class=\"comment\">-- 设置块的空闲和重用阈值</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"2-区（Extent）\"><a href=\"#2-区（Extent）\" class=\"headerlink\" title=\"2. 区（Extent）\"></a><strong>2. 区（Extent）</strong></h3><ul>\n<li><strong>定义</strong>：<br>区是由<strong>连续数据块</strong>组成的逻辑存储单元，用于为段（如表、索引）分配空间。</li>\n<li><strong>特点</strong>：<ul>\n<li>当段需要更多空间时，Oracle自动分配一个区。</li>\n<li>区的大小由表空间的存储参数（如<code>INITIAL</code>、<code>NEXT</code>）决定。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales (</span><br><span class=\"line\">  sale_id NUMBER,</span><br><span class=\"line\">  amount NUMBER</span><br><span class=\"line\">) STORAGE (</span><br><span class=\"line\">  <span class=\"keyword\">INITIAL</span> <span class=\"number\">64</span>K   <span class=\"comment\">-- 初始区大小</span></span><br><span class=\"line\">  NEXT <span class=\"number\">128</span>K     <span class=\"comment\">-- 后续区大小</span></span><br><span class=\"line\">  MAXEXTENTS <span class=\"number\">100</span> <span class=\"comment\">-- 最大区数量</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"3-段（Segment）\"><a href=\"#3-段（Segment）\" class=\"headerlink\" title=\"3. 段（Segment）\"></a><strong>3. 段（Segment）</strong></h3><ul>\n<li><strong>定义</strong>：<br>段是数据库对象（如表、索引）的存储容器，由多个区组成。</li>\n<li><strong>类型</strong>：<ul>\n<li><strong>数据段（Data Segment）</strong>：存储表或簇的数据。</li>\n<li><strong>索引段（Index Segment）</strong>：存储索引数据。</li>\n<li><strong>临时段（Temporary Segment）</strong>：用于排序或临时表操作。</li>\n<li><strong>回滚段（Undo Segment）</strong>：存储事务回滚信息。</li>\n</ul>\n</li>\n<li><strong>管理方式</strong>：<ul>\n<li><strong>自动段空间管理（ASSM）</strong>：使用位图管理空闲块（推荐）。</li>\n<li><strong>手动段空间管理</strong>：使用空闲列表（Freelist）跟踪可用块。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看表的段信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> segment_name, segment_type, blocks, extents</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> user_segments</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> segment_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;EMPLOYEES&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"4-表空间（Tablespace）\"><a href=\"#4-表空间（Tablespace）\" class=\"headerlink\" title=\"4. 表空间（Tablespace）\"></a><strong>4. 表空间（Tablespace）</strong></h3><ul>\n<li><strong>定义</strong>：<br>表空间是数据库的顶级逻辑存储结构，由多个数据文件（物理文件）组成。</li>\n<li><strong>类型</strong>：<ul>\n<li><strong>系统表空间（SYSTEM）</strong>：存储数据字典和系统对象。</li>\n<li><strong>用户表空间（USERS）</strong>：存储用户数据。</li>\n<li><strong>临时表空间（TEMP）</strong>：处理排序和临时操作。</li>\n<li><strong>撤销表空间（UNDO）</strong>：管理事务回滚数据。</li>\n</ul>\n</li>\n<li><strong>管理方式</strong>：<ul>\n<li><strong>本地管理表空间（Locally Managed）</strong>：使用位图跟踪区的分配（默认）。</li>\n<li><strong>字典管理表空间（Dictionary Managed）</strong>：通过数据字典管理（已淘汰）。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表空间</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>SPACE app_data</span><br><span class=\"line\">DATAFILE <span class=\"string\">&#x27;/u01/oracle/data/app01.dbf&#x27;</span> SIZE <span class=\"number\">100</span>M</span><br><span class=\"line\">AUTOEXTEND <span class=\"keyword\">ON</span> NEXT <span class=\"number\">10</span>M MAXSIZE <span class=\"number\">1</span>G</span><br><span class=\"line\">EXTENT MANAGEMENT <span class=\"keyword\">LOCAL</span>  <span class=\"comment\">-- 本地管理</span></span><br><span class=\"line\">SEGMENT SPACE MANAGEMENT AUTO;  <span class=\"comment\">-- 自动段管理</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"5-四者的层次关系\"><a href=\"#5-四者的层次关系\" class=\"headerlink\" title=\"5. 四者的层次关系\"></a><strong>5. 四者的层次关系</strong></h3><ol>\n<li><strong>数据库</strong> → 多个 <strong>表空间</strong>  </li>\n<li><strong>表空间</strong> → 多个 <strong>段</strong>  </li>\n<li><strong>段</strong> → 多个 <strong>区</strong>  </li>\n<li><strong>区</strong> → 多个 <strong>数据块</strong>  </li>\n<li><strong>数据块</strong> → 存储实际数据行</li>\n</ol>\n<hr>\n<h3 id=\"6-关键区别与联系\"><a href=\"#6-关键区别与联系\" class=\"headerlink\" title=\"6. 关键区别与联系\"></a><strong>6. 关键区别与联系</strong></h3><table>\n<thead>\n<tr>\n<th><strong>概念</strong></th>\n<th><strong>作用</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>管理对象</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>表空间</td>\n<td>逻辑存储容器</td>\n<td><code>USERS</code>, <code>TEMP</code></td>\n<td>数据文件、段</td>\n</tr>\n<tr>\n<td>段</td>\n<td>存储数据库对象（表、索引）</td>\n<td>表的数据段、索引段</td>\n<td>区</td>\n</tr>\n<tr>\n<td>区</td>\n<td>分配存储空间的基本单元</td>\n<td>初始区、扩展区</td>\n<td>数据块</td>\n</tr>\n<tr>\n<td>数据块</td>\n<td>最小I&#x2F;O单元，存储实际数据</td>\n<td>8KB或16KB的块</td>\n<td>行数据、元数据</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"7-实际应用场景\"><a href=\"#7-实际应用场景\" class=\"headerlink\" title=\"7. 实际应用场景\"></a><strong>7. 实际应用场景</strong></h3><ol>\n<li><strong>空间规划</strong>  <ul>\n<li>为表空间分配足够的数据文件，避免频繁扩展。</li>\n</ul>\n</li>\n<li><strong>性能优化</strong>  <ul>\n<li>调整数据块大小（如OLTP使用8KB，数据仓库使用32KB）。</li>\n</ul>\n</li>\n<li><strong>碎片管理</strong>  <ul>\n<li>定期合并碎片化的区（<code>ALTER TABLE ... COALESCE</code>）。</li>\n</ul>\n</li>\n<li><strong>监控空间使用</strong>  <ul>\n<li>查询<code>DBA_SEGMENTS</code>、<code>DBA_EXTENTS</code>视图分析段和区的分布。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"8-常见问题\"><a href=\"#8-常见问题\" class=\"headerlink\" title=\"8. 常见问题\"></a><strong>8. 常见问题</strong></h3><ol>\n<li><strong>区分配失败</strong>  <ul>\n<li>表空间无剩余空间，或达到<code>MAXEXTENTS</code>限制。</li>\n</ul>\n</li>\n<li><strong>行迁移&#x2F;行链接</strong>  <ul>\n<li>数据块过小或<code>PCTFREE</code>设置不合理导致。</li>\n</ul>\n</li>\n<li><strong>临时表空间膨胀</strong>  <ul>\n<li>大规模排序操作未释放临时段，需定期清理。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>通过理解表空间、段、区和数据块的关系，可以更高效地设计和管理Oracle数据库的存储结构，优化性能和资源利用率。</p>\n"},{"_content":"## 大数据量返回前端方法\n在处理数千条数据时，直接将全部数据通过 JSON 返回前端可能导致 **性能问题**（如响应体积过大、传输延迟、前端渲染卡顿）。以下是更优化的解决方案及具体实现方法：\n\n---\n\n### **1. 分页返回（Pagination）**\n适用于前端需要逐步加载或展示数据的场景（如表格分页）。\n\n#### **实现步骤（FastAPI 示例）**\n```python\nfrom fastapi import APIRouter, Query\nimport pandas as pd\n\nrouter = APIRouter()\n\n@router.get(\"/data\")\nasync def get_paginated_data(\n    page: int = Query(1, ge=1),  # 当前页码（从1开始）\n    page_size: int = Query(100, ge=1)  # 每页数据量\n):\n    # 从数据库或缓存加载完整数据（假设 df 是处理后的 DataFrame）\n    df = pd.read_csv(\"large_data.csv\")\n    \n    # 计算分页切片\n    total = len(df)\n    start = (page - 1) * page_size\n    end = start + page_size\n    paginated_df = df.iloc[start:end]\n    \n    # 返回分页结果和元数据\n    return {\n        \"data\": paginated_df.to_dict(orient=\"records\"),\n        \"pagination\": {\n            \"total\": total,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total + page_size - 1) // page_size\n        }\n    }\n```\n\n#### **优点**\n- 减少单次响应体积，提升传输速度。\n- 避免前端一次性渲染大量数据。\n\n---\n\n### **2. 流式传输（Streaming Response）**\n适用于需要**实时推送**或**逐批处理**的超大数据集。\n\n#### **实现步骤（FastAPI + 生成器流式返回）**\n```python\nfrom fastapi import Response\nfrom fastapi.responses import StreamingResponse\nimport pandas as pd\n\n@router.get(\"/stream-data\")\nasync def stream_data():\n    df = pd.read_csv(\"large_data.csv\")\n    \n    # 定义生成器逐行输出数据\n    def generate():\n        yield df.columns.to_json() + \"\\n\"  # 先发送表头\n        for _, row in df.iterrows():\n            yield row.to_json() + \"\\n\"  # 逐行发送数据\n    \n    return StreamingResponse(\n        generate(),\n        media_type=\"application/x-ndjson\"  # 流式 JSON 格式\n    )\n```\n\n#### **前端处理**\n```javascript\n// 使用 Fetch API 处理流式数据\nfetch(\"/stream-data\")\n  .then(response => {\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    function readChunk() {\n      return reader.read().then(({ value, done }) => {\n        if (done) return;\n        const chunk = decoder.decode(value);\n        console.log(\"Received:\", JSON.parse(chunk));\n        readChunk();\n      });\n    }\n    readChunk();\n  });\n```\n\n---\n\n### **3. 压缩响应（Compression）**\n若必须返回完整数据，可通过 **Gzip/Brotli 压缩**减少传输体积。\n\n#### **FastAPI 自动压缩配置**\n```python\n# 启用压缩中间件（需安装 uvicorn 并启用压缩）\nfrom fastapi.middleware.gzip import GZipMiddleware\n\napp = FastAPI()\napp.add_middleware(GZipMiddleware, minimum_size=500)  # 大于 500B 的数据自动压缩\n\n@router.get(\"/full-data\")\nasync def get_full_data():\n    df = pd.read_csv(\"large_data.csv\")\n    return df.to_dict(orient=\"records\")\n```\n\n#### **优点**\n- 无需修改前端代码，透明压缩。\n- 减少 60%~90% 的传输体积。\n\n---\n\n### **4. 返回文件下载链接**\n适用于前端需要**导出数据**的场景（如 CSV、Excel 文件）。\n\n#### **实现步骤（FastAPI 返回文件）**\n```python\nfrom fastapi.responses import FileResponse\n\n@router.get(\"/download-csv\")\nasync def download_csv():\n    df = pd.read_csv(\"large_data.csv\")\n    csv_path = \"temp_export.csv\"\n    df.to_csv(csv_path, index=False)\n    return FileResponse(\n        csv_path,\n        filename=\"data_export.csv\",\n        media_type=\"text/csv\"\n    )\n```\n\n#### **前端调用**\n```html\n<a href=\"/download-csv\" download>下载 CSV 文件</a>\n```\n\n---\n\n### **5. 使用二进制格式（如 Parquet）**\n适合对传输效率要求极高的场景（如数据科学协作）。\n\n#### **实现步骤**\n```python\nimport pyarrow.parquet as pq\nfrom fastapi.responses import Response\n\n@router.get(\"/binary-data\")\nasync def get_binary_data():\n    df = pd.read_csv(\"large_data.csv\")\n    buffer = BytesIO()\n    df.to_parquet(buffer, engine=\"pyarrow\")\n    buffer.seek(0)\n    return Response(\n        content=buffer.read(),\n        media_type=\"application/octet-stream\",\n        headers={\"Content-Disposition\": \"attachment; filename=data.parquet\"}\n    )\n```\n\n#### **优点**\n- Parquet 文件比 JSON/CSV 小 50%~80%。\n- 支持列式存储和高效压缩。\n\n---\n\n### **方案对比**\n| **方案**       | 传输体积 | 前端复杂度 | 适用场景                     |\n|----------------|----------|------------|----------------------------|\n| 分页           | 小       | 低         | 表格展示、交互式查询         |\n| 流式传输       | 中       | 高         | 实时监控、大数据逐批处理     |\n| 压缩 JSON      | 中       | 低         | 必须返回完整数据的 API       |\n| 文件下载       | 大       | 低         | 数据导出、离线分析           |\n| 二进制格式     | 小       | 高         | 数据科学、高性能传输         |\n\n---\n\n### **最佳实践建议**\n1. **优先分页**：除非明确需要完整数据，否则默认使用分页。\n2. **按需选择格式**：\n   - 交互式 Web 应用 → **分页 JSON**\n   - 数据导出 → **CSV/Excel 文件**\n   - 科学计算 → **Parquet/二进制**\n3. **监控性能**：使用 APM 工具（如 Prometheus）跟踪 API 响应时间和数据体积。","source":"_posts/大数据量返回前端方法/大数据量返回前端方法.md","raw":"## 大数据量返回前端方法\n在处理数千条数据时，直接将全部数据通过 JSON 返回前端可能导致 **性能问题**（如响应体积过大、传输延迟、前端渲染卡顿）。以下是更优化的解决方案及具体实现方法：\n\n---\n\n### **1. 分页返回（Pagination）**\n适用于前端需要逐步加载或展示数据的场景（如表格分页）。\n\n#### **实现步骤（FastAPI 示例）**\n```python\nfrom fastapi import APIRouter, Query\nimport pandas as pd\n\nrouter = APIRouter()\n\n@router.get(\"/data\")\nasync def get_paginated_data(\n    page: int = Query(1, ge=1),  # 当前页码（从1开始）\n    page_size: int = Query(100, ge=1)  # 每页数据量\n):\n    # 从数据库或缓存加载完整数据（假设 df 是处理后的 DataFrame）\n    df = pd.read_csv(\"large_data.csv\")\n    \n    # 计算分页切片\n    total = len(df)\n    start = (page - 1) * page_size\n    end = start + page_size\n    paginated_df = df.iloc[start:end]\n    \n    # 返回分页结果和元数据\n    return {\n        \"data\": paginated_df.to_dict(orient=\"records\"),\n        \"pagination\": {\n            \"total\": total,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total + page_size - 1) // page_size\n        }\n    }\n```\n\n#### **优点**\n- 减少单次响应体积，提升传输速度。\n- 避免前端一次性渲染大量数据。\n\n---\n\n### **2. 流式传输（Streaming Response）**\n适用于需要**实时推送**或**逐批处理**的超大数据集。\n\n#### **实现步骤（FastAPI + 生成器流式返回）**\n```python\nfrom fastapi import Response\nfrom fastapi.responses import StreamingResponse\nimport pandas as pd\n\n@router.get(\"/stream-data\")\nasync def stream_data():\n    df = pd.read_csv(\"large_data.csv\")\n    \n    # 定义生成器逐行输出数据\n    def generate():\n        yield df.columns.to_json() + \"\\n\"  # 先发送表头\n        for _, row in df.iterrows():\n            yield row.to_json() + \"\\n\"  # 逐行发送数据\n    \n    return StreamingResponse(\n        generate(),\n        media_type=\"application/x-ndjson\"  # 流式 JSON 格式\n    )\n```\n\n#### **前端处理**\n```javascript\n// 使用 Fetch API 处理流式数据\nfetch(\"/stream-data\")\n  .then(response => {\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    function readChunk() {\n      return reader.read().then(({ value, done }) => {\n        if (done) return;\n        const chunk = decoder.decode(value);\n        console.log(\"Received:\", JSON.parse(chunk));\n        readChunk();\n      });\n    }\n    readChunk();\n  });\n```\n\n---\n\n### **3. 压缩响应（Compression）**\n若必须返回完整数据，可通过 **Gzip/Brotli 压缩**减少传输体积。\n\n#### **FastAPI 自动压缩配置**\n```python\n# 启用压缩中间件（需安装 uvicorn 并启用压缩）\nfrom fastapi.middleware.gzip import GZipMiddleware\n\napp = FastAPI()\napp.add_middleware(GZipMiddleware, minimum_size=500)  # 大于 500B 的数据自动压缩\n\n@router.get(\"/full-data\")\nasync def get_full_data():\n    df = pd.read_csv(\"large_data.csv\")\n    return df.to_dict(orient=\"records\")\n```\n\n#### **优点**\n- 无需修改前端代码，透明压缩。\n- 减少 60%~90% 的传输体积。\n\n---\n\n### **4. 返回文件下载链接**\n适用于前端需要**导出数据**的场景（如 CSV、Excel 文件）。\n\n#### **实现步骤（FastAPI 返回文件）**\n```python\nfrom fastapi.responses import FileResponse\n\n@router.get(\"/download-csv\")\nasync def download_csv():\n    df = pd.read_csv(\"large_data.csv\")\n    csv_path = \"temp_export.csv\"\n    df.to_csv(csv_path, index=False)\n    return FileResponse(\n        csv_path,\n        filename=\"data_export.csv\",\n        media_type=\"text/csv\"\n    )\n```\n\n#### **前端调用**\n```html\n<a href=\"/download-csv\" download>下载 CSV 文件</a>\n```\n\n---\n\n### **5. 使用二进制格式（如 Parquet）**\n适合对传输效率要求极高的场景（如数据科学协作）。\n\n#### **实现步骤**\n```python\nimport pyarrow.parquet as pq\nfrom fastapi.responses import Response\n\n@router.get(\"/binary-data\")\nasync def get_binary_data():\n    df = pd.read_csv(\"large_data.csv\")\n    buffer = BytesIO()\n    df.to_parquet(buffer, engine=\"pyarrow\")\n    buffer.seek(0)\n    return Response(\n        content=buffer.read(),\n        media_type=\"application/octet-stream\",\n        headers={\"Content-Disposition\": \"attachment; filename=data.parquet\"}\n    )\n```\n\n#### **优点**\n- Parquet 文件比 JSON/CSV 小 50%~80%。\n- 支持列式存储和高效压缩。\n\n---\n\n### **方案对比**\n| **方案**       | 传输体积 | 前端复杂度 | 适用场景                     |\n|----------------|----------|------------|----------------------------|\n| 分页           | 小       | 低         | 表格展示、交互式查询         |\n| 流式传输       | 中       | 高         | 实时监控、大数据逐批处理     |\n| 压缩 JSON      | 中       | 低         | 必须返回完整数据的 API       |\n| 文件下载       | 大       | 低         | 数据导出、离线分析           |\n| 二进制格式     | 小       | 高         | 数据科学、高性能传输         |\n\n---\n\n### **最佳实践建议**\n1. **优先分页**：除非明确需要完整数据，否则默认使用分页。\n2. **按需选择格式**：\n   - 交互式 Web 应用 → **分页 JSON**\n   - 数据导出 → **CSV/Excel 文件**\n   - 科学计算 → **Parquet/二进制**\n3. **监控性能**：使用 APM 工具（如 Prometheus）跟踪 API 响应时间和数据体积。","slug":"大数据量返回前端方法/大数据量返回前端方法","published":1,"date":"2025-05-20T02:26:37.381Z","updated":"2025-05-20T02:26:29.000Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmctwyvb0000yx4gr5bgc7isp","content":"<h2 id=\"大数据量返回前端方法\"><a href=\"#大数据量返回前端方法\" class=\"headerlink\" title=\"大数据量返回前端方法\"></a>大数据量返回前端方法</h2><p>在处理数千条数据时，直接将全部数据通过 JSON 返回前端可能导致 <strong>性能问题</strong>（如响应体积过大、传输延迟、前端渲染卡顿）。以下是更优化的解决方案及具体实现方法：</p>\n<hr>\n<h3 id=\"1-分页返回（Pagination）\"><a href=\"#1-分页返回（Pagination）\" class=\"headerlink\" title=\"1. 分页返回（Pagination）\"></a><strong>1. 分页返回（Pagination）</strong></h3><p>适用于前端需要逐步加载或展示数据的场景（如表格分页）。</p>\n<h4 id=\"实现步骤（FastAPI-示例）\"><a href=\"#实现步骤（FastAPI-示例）\" class=\"headerlink\" title=\"实现步骤（FastAPI 示例）\"></a><strong>实现步骤（FastAPI 示例）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> APIRouter, Query</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">router = APIRouter()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_paginated_data</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    page: <span class=\"built_in\">int</span> = Query(<span class=\"params\"><span class=\"number\">1</span>, ge=<span class=\"number\">1</span></span>),  <span class=\"comment\"># 当前页码（从1开始）</span></span></span><br><span class=\"line\"><span class=\"params\">    page_size: <span class=\"built_in\">int</span> = Query(<span class=\"params\"><span class=\"number\">100</span>, ge=<span class=\"number\">1</span></span>)  <span class=\"comment\"># 每页数据量</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"comment\"># 从数据库或缓存加载完整数据（假设 df 是处理后的 DataFrame）</span></span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算分页切片</span></span><br><span class=\"line\">    total = <span class=\"built_in\">len</span>(df)</span><br><span class=\"line\">    start = (page - <span class=\"number\">1</span>) * page_size</span><br><span class=\"line\">    end = start + page_size</span><br><span class=\"line\">    paginated_df = df.iloc[start:end]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 返回分页结果和元数据</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;data&quot;</span>: paginated_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;pagination&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;total&quot;</span>: total,</span><br><span class=\"line\">            <span class=\"string\">&quot;page&quot;</span>: page,</span><br><span class=\"line\">            <span class=\"string\">&quot;page_size&quot;</span>: page_size,</span><br><span class=\"line\">            <span class=\"string\">&quot;total_pages&quot;</span>: (total + page_size - <span class=\"number\">1</span>) // page_size</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li>减少单次响应体积，提升传输速度。</li>\n<li>避免前端一次性渲染大量数据。</li>\n</ul>\n<hr>\n<h3 id=\"2-流式传输（Streaming-Response）\"><a href=\"#2-流式传输（Streaming-Response）\" class=\"headerlink\" title=\"2. 流式传输（Streaming Response）\"></a><strong>2. 流式传输（Streaming Response）</strong></h3><p>适用于需要<strong>实时推送</strong>或<strong>逐批处理</strong>的超大数据集。</p>\n<h4 id=\"实现步骤（FastAPI-生成器流式返回）\"><a href=\"#实现步骤（FastAPI-生成器流式返回）\" class=\"headerlink\" title=\"实现步骤（FastAPI + 生成器流式返回）\"></a><strong>实现步骤（FastAPI + 生成器流式返回）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> StreamingResponse</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/stream-data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">stream_data</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 定义生成器逐行输出数据</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate</span>():</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> df.columns.to_json() + <span class=\"string\">&quot;\\n&quot;</span>  <span class=\"comment\"># 先发送表头</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _, row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> row.to_json() + <span class=\"string\">&quot;\\n&quot;</span>  <span class=\"comment\"># 逐行发送数据</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> StreamingResponse(</span><br><span class=\"line\">        generate(),</span><br><span class=\"line\">        media_type=<span class=\"string\">&quot;application/x-ndjson&quot;</span>  <span class=\"comment\"># 流式 JSON 格式</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端处理\"><a href=\"#前端处理\" class=\"headerlink\" title=\"前端处理\"></a><strong>前端处理</strong></h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Fetch API 处理流式数据</span></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/stream-data&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reader = response.<span class=\"property\">body</span>.<span class=\"title function_\">getReader</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decoder = <span class=\"keyword\">new</span> <span class=\"title class_\">TextDecoder</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">readChunk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.<span class=\"title function_\">read</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">&#123; value, done &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> chunk = decoder.<span class=\"title function_\">decode</span>(value);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Received:&quot;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(chunk));</span><br><span class=\"line\">        <span class=\"title function_\">readChunk</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">readChunk</span>();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-压缩响应（Compression）\"><a href=\"#3-压缩响应（Compression）\" class=\"headerlink\" title=\"3. 压缩响应（Compression）\"></a><strong>3. 压缩响应（Compression）</strong></h3><p>若必须返回完整数据，可通过 <strong>Gzip&#x2F;Brotli 压缩</strong>减少传输体积。</p>\n<h4 id=\"FastAPI-自动压缩配置\"><a href=\"#FastAPI-自动压缩配置\" class=\"headerlink\" title=\"FastAPI 自动压缩配置\"></a><strong>FastAPI 自动压缩配置</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用压缩中间件（需安装 uvicorn 并启用压缩）</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.middleware.gzip <span class=\"keyword\">import</span> GZipMiddleware</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">app.add_middleware(GZipMiddleware, minimum_size=<span class=\"number\">500</span>)  <span class=\"comment\"># 大于 500B 的数据自动压缩</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/full-data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_full_data</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li>无需修改前端代码，透明压缩。</li>\n<li>减少 60%~90% 的传输体积。</li>\n</ul>\n<hr>\n<h3 id=\"4-返回文件下载链接\"><a href=\"#4-返回文件下载链接\" class=\"headerlink\" title=\"4. 返回文件下载链接\"></a><strong>4. 返回文件下载链接</strong></h3><p>适用于前端需要<strong>导出数据</strong>的场景（如 CSV、Excel 文件）。</p>\n<h4 id=\"实现步骤（FastAPI-返回文件）\"><a href=\"#实现步骤（FastAPI-返回文件）\" class=\"headerlink\" title=\"实现步骤（FastAPI 返回文件）\"></a><strong>实现步骤（FastAPI 返回文件）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> FileResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/download-csv&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">download_csv</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    csv_path = <span class=\"string\">&quot;temp_export.csv&quot;</span></span><br><span class=\"line\">    df.to_csv(csv_path, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FileResponse(</span><br><span class=\"line\">        csv_path,</span><br><span class=\"line\">        filename=<span class=\"string\">&quot;data_export.csv&quot;</span>,</span><br><span class=\"line\">        media_type=<span class=\"string\">&quot;text/csv&quot;</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端调用\"><a href=\"#前端调用\" class=\"headerlink\" title=\"前端调用\"></a><strong>前端调用</strong></h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/download-csv&quot;</span> <span class=\"attr\">download</span>&gt;</span>下载 CSV 文件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-使用二进制格式（如-Parquet）\"><a href=\"#5-使用二进制格式（如-Parquet）\" class=\"headerlink\" title=\"5. 使用二进制格式（如 Parquet）\"></a><strong>5. 使用二进制格式（如 Parquet）</strong></h3><p>适合对传输效率要求极高的场景（如数据科学协作）。</p>\n<h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a><strong>实现步骤</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pyarrow.parquet <span class=\"keyword\">as</span> pq</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/binary-data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_binary_data</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    buffer = BytesIO()</span><br><span class=\"line\">    df.to_parquet(buffer, engine=<span class=\"string\">&quot;pyarrow&quot;</span>)</span><br><span class=\"line\">    buffer.seek(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(</span><br><span class=\"line\">        content=buffer.read(),</span><br><span class=\"line\">        media_type=<span class=\"string\">&quot;application/octet-stream&quot;</span>,</span><br><span class=\"line\">        headers=&#123;<span class=\"string\">&quot;Content-Disposition&quot;</span>: <span class=\"string\">&quot;attachment; filename=data.parquet&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li>Parquet 文件比 JSON&#x2F;CSV 小 50%~80%。</li>\n<li>支持列式存储和高效压缩。</li>\n</ul>\n<hr>\n<h3 id=\"方案对比\"><a href=\"#方案对比\" class=\"headerlink\" title=\"方案对比\"></a><strong>方案对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>方案</strong></th>\n<th>传输体积</th>\n<th>前端复杂度</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>分页</td>\n<td>小</td>\n<td>低</td>\n<td>表格展示、交互式查询</td>\n</tr>\n<tr>\n<td>流式传输</td>\n<td>中</td>\n<td>高</td>\n<td>实时监控、大数据逐批处理</td>\n</tr>\n<tr>\n<td>压缩 JSON</td>\n<td>中</td>\n<td>低</td>\n<td>必须返回完整数据的 API</td>\n</tr>\n<tr>\n<td>文件下载</td>\n<td>大</td>\n<td>低</td>\n<td>数据导出、离线分析</td>\n</tr>\n<tr>\n<td>二进制格式</td>\n<td>小</td>\n<td>高</td>\n<td>数据科学、高性能传输</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"最佳实践建议\"><a href=\"#最佳实践建议\" class=\"headerlink\" title=\"最佳实践建议\"></a><strong>最佳实践建议</strong></h3><ol>\n<li><strong>优先分页</strong>：除非明确需要完整数据，否则默认使用分页。</li>\n<li><strong>按需选择格式</strong>：<ul>\n<li>交互式 Web 应用 → <strong>分页 JSON</strong></li>\n<li>数据导出 → <strong>CSV&#x2F;Excel 文件</strong></li>\n<li>科学计算 → <strong>Parquet&#x2F;二进制</strong></li>\n</ul>\n</li>\n<li><strong>监控性能</strong>：使用 APM 工具（如 Prometheus）跟踪 API 响应时间和数据体积。</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"大数据量返回前端方法\"><a href=\"#大数据量返回前端方法\" class=\"headerlink\" title=\"大数据量返回前端方法\"></a>大数据量返回前端方法</h2><p>在处理数千条数据时，直接将全部数据通过 JSON 返回前端可能导致 <strong>性能问题</strong>（如响应体积过大、传输延迟、前端渲染卡顿）。以下是更优化的解决方案及具体实现方法：</p>\n<hr>\n<h3 id=\"1-分页返回（Pagination）\"><a href=\"#1-分页返回（Pagination）\" class=\"headerlink\" title=\"1. 分页返回（Pagination）\"></a><strong>1. 分页返回（Pagination）</strong></h3><p>适用于前端需要逐步加载或展示数据的场景（如表格分页）。</p>\n<h4 id=\"实现步骤（FastAPI-示例）\"><a href=\"#实现步骤（FastAPI-示例）\" class=\"headerlink\" title=\"实现步骤（FastAPI 示例）\"></a><strong>实现步骤（FastAPI 示例）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> APIRouter, Query</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">router = APIRouter()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_paginated_data</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    page: <span class=\"built_in\">int</span> = Query(<span class=\"params\"><span class=\"number\">1</span>, ge=<span class=\"number\">1</span></span>),  <span class=\"comment\"># 当前页码（从1开始）</span></span></span><br><span class=\"line\"><span class=\"params\">    page_size: <span class=\"built_in\">int</span> = Query(<span class=\"params\"><span class=\"number\">100</span>, ge=<span class=\"number\">1</span></span>)  <span class=\"comment\"># 每页数据量</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"comment\"># 从数据库或缓存加载完整数据（假设 df 是处理后的 DataFrame）</span></span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算分页切片</span></span><br><span class=\"line\">    total = <span class=\"built_in\">len</span>(df)</span><br><span class=\"line\">    start = (page - <span class=\"number\">1</span>) * page_size</span><br><span class=\"line\">    end = start + page_size</span><br><span class=\"line\">    paginated_df = df.iloc[start:end]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 返回分页结果和元数据</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;data&quot;</span>: paginated_df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;pagination&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;total&quot;</span>: total,</span><br><span class=\"line\">            <span class=\"string\">&quot;page&quot;</span>: page,</span><br><span class=\"line\">            <span class=\"string\">&quot;page_size&quot;</span>: page_size,</span><br><span class=\"line\">            <span class=\"string\">&quot;total_pages&quot;</span>: (total + page_size - <span class=\"number\">1</span>) // page_size</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li>减少单次响应体积，提升传输速度。</li>\n<li>避免前端一次性渲染大量数据。</li>\n</ul>\n<hr>\n<h3 id=\"2-流式传输（Streaming-Response）\"><a href=\"#2-流式传输（Streaming-Response）\" class=\"headerlink\" title=\"2. 流式传输（Streaming Response）\"></a><strong>2. 流式传输（Streaming Response）</strong></h3><p>适用于需要<strong>实时推送</strong>或<strong>逐批处理</strong>的超大数据集。</p>\n<h4 id=\"实现步骤（FastAPI-生成器流式返回）\"><a href=\"#实现步骤（FastAPI-生成器流式返回）\" class=\"headerlink\" title=\"实现步骤（FastAPI + 生成器流式返回）\"></a><strong>实现步骤（FastAPI + 生成器流式返回）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> StreamingResponse</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/stream-data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">stream_data</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 定义生成器逐行输出数据</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate</span>():</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> df.columns.to_json() + <span class=\"string\">&quot;\\n&quot;</span>  <span class=\"comment\"># 先发送表头</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _, row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> row.to_json() + <span class=\"string\">&quot;\\n&quot;</span>  <span class=\"comment\"># 逐行发送数据</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> StreamingResponse(</span><br><span class=\"line\">        generate(),</span><br><span class=\"line\">        media_type=<span class=\"string\">&quot;application/x-ndjson&quot;</span>  <span class=\"comment\"># 流式 JSON 格式</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端处理\"><a href=\"#前端处理\" class=\"headerlink\" title=\"前端处理\"></a><strong>前端处理</strong></h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Fetch API 处理流式数据</span></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/stream-data&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reader = response.<span class=\"property\">body</span>.<span class=\"title function_\">getReader</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decoder = <span class=\"keyword\">new</span> <span class=\"title class_\">TextDecoder</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">readChunk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.<span class=\"title function_\">read</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">&#123; value, done &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> chunk = decoder.<span class=\"title function_\">decode</span>(value);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Received:&quot;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(chunk));</span><br><span class=\"line\">        <span class=\"title function_\">readChunk</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">readChunk</span>();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-压缩响应（Compression）\"><a href=\"#3-压缩响应（Compression）\" class=\"headerlink\" title=\"3. 压缩响应（Compression）\"></a><strong>3. 压缩响应（Compression）</strong></h3><p>若必须返回完整数据，可通过 <strong>Gzip&#x2F;Brotli 压缩</strong>减少传输体积。</p>\n<h4 id=\"FastAPI-自动压缩配置\"><a href=\"#FastAPI-自动压缩配置\" class=\"headerlink\" title=\"FastAPI 自动压缩配置\"></a><strong>FastAPI 自动压缩配置</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用压缩中间件（需安装 uvicorn 并启用压缩）</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.middleware.gzip <span class=\"keyword\">import</span> GZipMiddleware</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">app.add_middleware(GZipMiddleware, minimum_size=<span class=\"number\">500</span>)  <span class=\"comment\"># 大于 500B 的数据自动压缩</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/full-data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_full_data</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df.to_dict(orient=<span class=\"string\">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li>无需修改前端代码，透明压缩。</li>\n<li>减少 60%~90% 的传输体积。</li>\n</ul>\n<hr>\n<h3 id=\"4-返回文件下载链接\"><a href=\"#4-返回文件下载链接\" class=\"headerlink\" title=\"4. 返回文件下载链接\"></a><strong>4. 返回文件下载链接</strong></h3><p>适用于前端需要<strong>导出数据</strong>的场景（如 CSV、Excel 文件）。</p>\n<h4 id=\"实现步骤（FastAPI-返回文件）\"><a href=\"#实现步骤（FastAPI-返回文件）\" class=\"headerlink\" title=\"实现步骤（FastAPI 返回文件）\"></a><strong>实现步骤（FastAPI 返回文件）</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> FileResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/download-csv&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">download_csv</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    csv_path = <span class=\"string\">&quot;temp_export.csv&quot;</span></span><br><span class=\"line\">    df.to_csv(csv_path, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FileResponse(</span><br><span class=\"line\">        csv_path,</span><br><span class=\"line\">        filename=<span class=\"string\">&quot;data_export.csv&quot;</span>,</span><br><span class=\"line\">        media_type=<span class=\"string\">&quot;text/csv&quot;</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端调用\"><a href=\"#前端调用\" class=\"headerlink\" title=\"前端调用\"></a><strong>前端调用</strong></h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/download-csv&quot;</span> <span class=\"attr\">download</span>&gt;</span>下载 CSV 文件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-使用二进制格式（如-Parquet）\"><a href=\"#5-使用二进制格式（如-Parquet）\" class=\"headerlink\" title=\"5. 使用二进制格式（如 Parquet）\"></a><strong>5. 使用二进制格式（如 Parquet）</strong></h3><p>适合对传输效率要求极高的场景（如数据科学协作）。</p>\n<h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a><strong>实现步骤</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pyarrow.parquet <span class=\"keyword\">as</span> pq</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/binary-data&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_binary_data</span>():</span><br><span class=\"line\">    df = pd.read_csv(<span class=\"string\">&quot;large_data.csv&quot;</span>)</span><br><span class=\"line\">    buffer = BytesIO()</span><br><span class=\"line\">    df.to_parquet(buffer, engine=<span class=\"string\">&quot;pyarrow&quot;</span>)</span><br><span class=\"line\">    buffer.seek(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(</span><br><span class=\"line\">        content=buffer.read(),</span><br><span class=\"line\">        media_type=<span class=\"string\">&quot;application/octet-stream&quot;</span>,</span><br><span class=\"line\">        headers=&#123;<span class=\"string\">&quot;Content-Disposition&quot;</span>: <span class=\"string\">&quot;attachment; filename=data.parquet&quot;</span>&#125;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ul>\n<li>Parquet 文件比 JSON&#x2F;CSV 小 50%~80%。</li>\n<li>支持列式存储和高效压缩。</li>\n</ul>\n<hr>\n<h3 id=\"方案对比\"><a href=\"#方案对比\" class=\"headerlink\" title=\"方案对比\"></a><strong>方案对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>方案</strong></th>\n<th>传输体积</th>\n<th>前端复杂度</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>分页</td>\n<td>小</td>\n<td>低</td>\n<td>表格展示、交互式查询</td>\n</tr>\n<tr>\n<td>流式传输</td>\n<td>中</td>\n<td>高</td>\n<td>实时监控、大数据逐批处理</td>\n</tr>\n<tr>\n<td>压缩 JSON</td>\n<td>中</td>\n<td>低</td>\n<td>必须返回完整数据的 API</td>\n</tr>\n<tr>\n<td>文件下载</td>\n<td>大</td>\n<td>低</td>\n<td>数据导出、离线分析</td>\n</tr>\n<tr>\n<td>二进制格式</td>\n<td>小</td>\n<td>高</td>\n<td>数据科学、高性能传输</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"最佳实践建议\"><a href=\"#最佳实践建议\" class=\"headerlink\" title=\"最佳实践建议\"></a><strong>最佳实践建议</strong></h3><ol>\n<li><strong>优先分页</strong>：除非明确需要完整数据，否则默认使用分页。</li>\n<li><strong>按需选择格式</strong>：<ul>\n<li>交互式 Web 应用 → <strong>分页 JSON</strong></li>\n<li>数据导出 → <strong>CSV&#x2F;Excel 文件</strong></li>\n<li>科学计算 → <strong>Parquet&#x2F;二进制</strong></li>\n</ul>\n</li>\n<li><strong>监控性能</strong>：使用 APM 工具（如 Prometheus）跟踪 API 响应时间和数据体积。</li>\n</ol>\n"},{"title":"sql数学运算转为json","date":"2025-06-03T09:48:39.000Z","updated":"2025-06-03T09:48:39.000Z","keywords":["sql","json"],"description":"规范的 JSON 设计，用于表示和计算四则运算表达式（加、减、乘、除），支持变量、常量、函数和嵌套表达式","_content":"# 四则运算表达式 JSON 规范设计\n\n下面是一个规范的 JSON 设计，用于表示和计算四则运算表达式（加、减、乘、除），支持变量、常量、函数和嵌套表达式：\n\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"*\",\n    \"left\": {\n      \"type\": \"binary\",\n      \"operator\": \"+\",\n      \"left\": {\n        \"type\": \"variable\",\n        \"name\": \"price\"\n      },\n      \"right\": {\n        \"type\": \"constant\",\n        \"value\": 10\n      }\n    },\n    \"right\": {\n      \"type\": \"binary\",\n      \"operator\": \"-\",\n      \"left\": {\n        \"type\": \"constant\",\n        \"value\": 100\n      },\n      \"right\": {\n        \"type\": \"variable\",\n        \"name\": \"discount\"\n      }\n    }\n  }\n}\n```\n\n## 结构说明\n\n### 节点类型\n1. **二元运算节点 (binary)**\n   - `operator`: 运算符 (`+`, `-`, `*`, `/`)\n   - `left`: 左操作数（表达式节点）\n   - `right`: 右操作数（表达式节点）\n\n2. **一元运算节点 (unary)**\n   - `operator`: 运算符 (`-` 负号)\n   - `operand`: 操作数（表达式节点）\n\n3. **函数调用节点 (function)**\n   - `name`: 函数名 (`pow`, `sqrt`, `log`, `sin`, `cos`, `abs` 等)\n   - `arguments`: 参数列表（表达式节点数组）\n\n4. **变量节点 (variable)**\n   - `name`: 变量名（对应 DataFrame 列名）\n\n5. **常量节点 (constant)**\n   - `value`: 常量值（数字或字符串）\n\n### 支持的运算符\n| 类型     | 运算符 | 说明                |\n|----------|--------|---------------------|\n| 算术运算 | `+`    | 加法                |\n|          | `-`    | 减法或负号          |\n|          | `*`    | 乘法                |\n|          | `/`    | 除法                |\n| 函数     | 见列表 | 支持常见数学函数    |\n| 比较     | `>`    | 大于                |\n|          | `<`    | 小于                |\n|          | `>=`   | 大于等于            |\n|          | `<=`   | 小于等于            |\n|          | `==`   | 等于                |\n|          | `!=`   | 不等于              |\n| 逻辑     | `&&`   | 逻辑与              |\n|          | `||`   | 逻辑或              |\n|          | `!`    | 逻辑非              |\n\n## Python 解析实现\n\n```python\nimport pandas as pd\nimport numpy as np\nimport math\nimport json\nfrom pandas.core.series import Series\n\ndef eval_expression(df: pd.DataFrame, expr_json: dict) -> Series:\n    \"\"\"\n    解析JSON表达式并返回计算结果Series\n    \n    参数:\n    df: Pandas DataFrame\n    expr_json: 表达式JSON对象\n    \n    返回:\n    计算结果的Series\n    \"\"\"\n    def eval_node(node: dict) -> Series:\n        node_type = node[\"type\"]\n        \n        # 二元运算\n        if node_type == \"binary\":\n            op = node[\"operator\"]\n            left = eval_node(node[\"left\"])\n            right = eval_node(node[\"right\"])\n            \n            if op == \"+\": return left + right\n            if op == \"-\": return left - right\n            if op == \"*\": return left * right\n            if op == \"/\": return left / right\n            if op == \">\": return left > right\n            if op == \"<\": return left < right\n            if op == \">=\": return left >= right\n            if op == \"<=\": return left <= right\n            if op == \"==\": return left == right\n            if op == \"!=\": return left != right\n            if op == \"&&\": return left & right\n            if op == \"||\": return left | right\n            raise ValueError(f\"不支持的二元运算符: {op}\")\n        \n        # 一元运算\n        elif node_type == \"unary\":\n            op = node[\"operator\"]\n            operand = eval_node(node[\"operand\"])\n            \n            if op == \"-\": return -operand\n            if op == \"!\": return ~operand\n            raise ValueError(f\"不支持的一元运算符: {op}\")\n        \n        # 函数调用\n        elif node_type == \"function\":\n            func_name = node[\"name\"]\n            args = [eval_node(arg) for arg in node[\"arguments\"]]\n            \n            if func_name == \"pow\": return args[0] ** args[1]\n            if func_name == \"sqrt\": return np.sqrt(args[0])\n            if func_name == \"abs\": return np.abs(args[0])\n            if func_name == \"log\": return np.log(args[0])\n            if func_name == \"log10\": return np.log10(args[0])\n            if func_name == \"exp\": return np.exp(args[0])\n            if func_name == \"sin\": return np.sin(args[0])\n            if func_name == \"cos\": return np.cos(args[0])\n            if func_name == \"tan\": return np.tan(args[0])\n            if func_name == \"asin\": return np.arcsin(args[0])\n            if func_name == \"acos\": return np.arccos(args[0])\n            if func_name == \"atan\": return np.arctan(args[0])\n            if func_name == \"sinh\": return np.sinh(args[0])\n            if func_name == \"cosh\": return np.cosh(args[0])\n            if func_name == \"tanh\": return np.tanh(args[0])\n            if func_name == \"ceil\": return np.ceil(args[0])\n            if func_name == \"floor\": return np.floor(args[0])\n            if func_name == \"round\": return np.round(args[0])\n            if func_name == \"if\": return np.where(args[0], args[1], args[2])\n            raise ValueError(f\"不支持的函数: {func_name}\")\n        \n        # 变量引用\n        elif node_type == \"variable\":\n            return df[node[\"name\"]]\n        \n        # 常量值\n        elif node_type == \"constant\":\n            value = node[\"value\"]\n            # 创建与DataFrame长度相同的常量Series\n            return pd.Series([value] * len(df), index=df.index)\n        \n        raise ValueError(f\"未知的节点类型: {node_type}\")\n    \n    # 从JSON字符串解析（如果传入的是字符串）\n    if isinstance(expr_json, str):\n        expr_json = json.loads(expr_json)\n    \n    # 获取根表达式\n    root_expr = expr_json.get(\"expression\", expr_json)\n    \n    # 计算并返回结果\n    return eval_node(root_expr)\n\n# 示例用法\nif __name__ == \"__main__\":\n    # 创建示例数据\n    data = {\n        'price': [100, 150, 200, 250],\n        'quantity': [2, 3, 1, 4],\n        'discount': [0.1, 0.2, 0.15, 0.05],\n        'is_premium': [True, False, True, False]\n    }\n    df = pd.DataFrame(data)\n    \n    # 示例1: 简单四则运算\n    simple_expr = {\n        \"expression\": {\n            \"type\": \"binary\",\n            \"operator\": \"*\",\n            \"left\": {\n                \"type\": \"variable\",\n                \"name\": \"price\"\n            },\n            \"right\": {\n                \"type\": \"variable\",\n                \"name\": \"quantity\"\n            }\n        }\n    }\n    print(\"简单四则运算 (price * quantity):\")\n    print(eval_expression(df, simple_expr))\n    \n    # 示例2: 嵌套表达式\n    nested_expr = {\n        \"expression\": {\n            \"type\": \"binary\",\n            \"operator\": \"*\",\n            \"left\": {\n                \"type\": \"binary\",\n                \"operator\": \"-\",\n                \"left\": {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"constant\",\n                        \"value\": 1.1\n                    }\n                },\n                \"right\": {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"variable\",\n                        \"name\": \"discount\"\n                    }\n                }\n            },\n            \"right\": {\n                \"type\": \"variable\",\n                \"name\": \"quantity\"\n            }\n        }\n    }\n    print(\"\\n嵌套表达式 ((price * 1.1 - price * discount) * quantity):\")\n    print(eval_expression(df, nested_expr))\n    \n    # 示例3: 带函数的表达式\n    func_expr = {\n        \"expression\": {\n            \"type\": \"function\",\n            \"name\": \"if\",\n            \"arguments\": [\n                {\n                    \"type\": \"variable\",\n                    \"name\": \"is_premium\"\n                },\n                {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"constant\",\n                        \"value\": 0.9\n                    }\n                },\n                {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"binary\",\n                        \"operator\": \"-\",\n                        \"left\": {\n                            \"type\": \"constant\",\n                            \"value\": 1\n                        },\n                        \"right\": {\n                            \"type\": \"variable\",\n                            \"name\": \"discount\"\n                        }\n                    }\n                }\n            ]\n        }\n    }\n    print(\"\\n带条件函数的表达式 (if(is_premium, price*0.9, price*(1-discount)):\")\n    print(eval_expression(df, func_expr))\n    \n    # 示例4: 复杂表达式\n    complex_expr = {\n        \"expression\": {\n            \"type\": \"binary\",\n            \"operator\": \"/\",\n            \"left\": {\n                \"type\": \"binary\",\n                \"operator\": \"+\",\n                \"left\": {\n                    \"type\": \"function\",\n                    \"name\": \"pow\",\n                    \"arguments\": [\n                        {\n                            \"type\": \"variable\",\n                            \"name\": \"price\"\n                        },\n                        {\n                            \"type\": \"constant\",\n                            \"value\": 2\n                        }\n                    ]\n                },\n                \"right\": {\n                    \"type\": \"function\",\n                    \"name\": \"sqrt\",\n                    \"arguments\": [\n                        {\n                            \"type\": \"variable\",\n                            \"name\": \"quantity\"\n                        }\n                    ]\n                }\n            },\n            \"right\": {\n                \"type\": \"binary\",\n                \"operator\": \"-\",\n                \"left\": {\n                    \"type\": \"constant\",\n                    \"value\": 100\n                },\n                \"right\": {\n                    \"type\": \"variable\",\n                    \"name\": \"discount\"\n                }\n            }\n        }\n    }\n    print(\"\\n复杂表达式 ((price^2 + sqrt(quantity)) / (100 - discount)):\")\n    print(eval_expression(df, complex_expr))\n```\n\n## 使用示例说明\n\n### 1. 简单四则运算\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"*\",\n    \"left\": {\"type\": \"variable\", \"name\": \"price\"},\n    \"right\": {\"type\": \"variable\", \"name\": \"quantity\"}\n  }\n}\n```\n计算: `price * quantity`\n\n### 2. 嵌套表达式\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"*\",\n    \"left\": {\n      \"type\": \"binary\",\n      \"operator\": \"-\",\n      \"left\": {\n        \"type\": \"binary\",\n        \"operator\": \"*\",\n        \"left\": {\"type\": \"variable\", \"name\": \"price\"},\n        \"right\": {\"type\": \"constant\", \"value\": 1.1}\n      },\n      \"right\": {\n        \"type\": \"binary\",\n        \"operator\": \"*\",\n        \"left\": {\"type\": \"variable\", \"name\": \"price\"},\n        \"right\": {\"type\": \"variable\", \"name\": \"discount\"}\n      }\n    },\n    \"right\": {\"type\": \"variable\", \"name\": \"quantity\"}\n  }\n}\n```\n计算: `((price * 1.1) - (price * discount)) * quantity`\n\n### 3. 带函数的表达式\n```json\n{\n  \"expression\": {\n    \"type\": \"function\",\n    \"name\": \"if\",\n    \"arguments\": [\n      {\"type\": \"variable\", \"name\": \"is_premium\"},\n      {\"type\": \"binary\", \"operator\": \"*\", ...}, // true分支\n      {\"type\": \"binary\", \"operator\": \"*\", ...}   // false分支\n    ]\n  }\n}\n```\n计算: `if(is_premium, price*0.9, price*(1-discount))`\n\n### 4. 复杂表达式\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"/\",\n    \"left\": {\n      \"type\": \"binary\",\n      \"operator\": \"+\",\n      \"left\": {\n        \"type\": \"function\",\n        \"name\": \"pow\",\n        \"arguments\": [{\"type\": \"variable\", \"name\": \"price\"}, {\"type\": \"constant\", \"value\": 2}]\n      },\n      \"right\": {\n        \"type\": \"function\",\n        \"name\": \"sqrt\",\n        \"arguments\": [{\"type\": \"variable\", \"name\": \"quantity\"}]\n      }\n    },\n    \"right\": {\n      \"type\": \"binary\",\n      \"operator\": \"-\",\n      \"left\": {\"type\": \"constant\", \"value\": 100},\n      \"right\": {\"type\": \"variable\", \"name\": \"discount\"}\n    }\n  }\n}\n```\n计算: `(price² + √quantity) / (100 - discount)`\n\n## 功能特点\n\n1. **完整的四则运算支持**：\n   - 支持加减乘除基本运算\n   - 支持嵌套任意深度的表达式\n   - 支持括号（通过嵌套结构隐式实现）\n\n2. **扩展功能**：\n   - 变量引用（DataFrame列）\n   - 数学函数（pow, sqrt, log, sin, cos等）\n   - 条件函数（if）\n   - 比较运算和逻辑运算\n\n3. **健壮性设计**：\n   - 类型安全：每个节点明确指定类型\n   - 错误处理：检测未知运算符和函数\n   - 常量传播：优化常量表达式计算\n\n4. **与Pandas无缝集成**：\n   - 返回Pandas Series，可直接赋值给新列\n   - 支持向量化运算，高效处理大数据\n   - 兼容Pandas的索引系统\n\n这个设计提供了一个灵活且强大的方式来表示和执行复杂的数学表达式，特别适合在数据处理和科学计算场景中使用。","source":"_posts/sql数学运算转为json/sql数学运算转为json.md","raw":"---\ntitle: sql数学运算转为json\ndate: 2025-06-03 17:48:39\nupdated: 2025-06-03 17:48:39\ntags:\n - 开发心得\ncategories:\n - 开发心得\nkeywords:\n - sql\n - json\ndescription: 规范的 JSON 设计，用于表示和计算四则运算表达式（加、减、乘、除），支持变量、常量、函数和嵌套表达式\n---\n# 四则运算表达式 JSON 规范设计\n\n下面是一个规范的 JSON 设计，用于表示和计算四则运算表达式（加、减、乘、除），支持变量、常量、函数和嵌套表达式：\n\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"*\",\n    \"left\": {\n      \"type\": \"binary\",\n      \"operator\": \"+\",\n      \"left\": {\n        \"type\": \"variable\",\n        \"name\": \"price\"\n      },\n      \"right\": {\n        \"type\": \"constant\",\n        \"value\": 10\n      }\n    },\n    \"right\": {\n      \"type\": \"binary\",\n      \"operator\": \"-\",\n      \"left\": {\n        \"type\": \"constant\",\n        \"value\": 100\n      },\n      \"right\": {\n        \"type\": \"variable\",\n        \"name\": \"discount\"\n      }\n    }\n  }\n}\n```\n\n## 结构说明\n\n### 节点类型\n1. **二元运算节点 (binary)**\n   - `operator`: 运算符 (`+`, `-`, `*`, `/`)\n   - `left`: 左操作数（表达式节点）\n   - `right`: 右操作数（表达式节点）\n\n2. **一元运算节点 (unary)**\n   - `operator`: 运算符 (`-` 负号)\n   - `operand`: 操作数（表达式节点）\n\n3. **函数调用节点 (function)**\n   - `name`: 函数名 (`pow`, `sqrt`, `log`, `sin`, `cos`, `abs` 等)\n   - `arguments`: 参数列表（表达式节点数组）\n\n4. **变量节点 (variable)**\n   - `name`: 变量名（对应 DataFrame 列名）\n\n5. **常量节点 (constant)**\n   - `value`: 常量值（数字或字符串）\n\n### 支持的运算符\n| 类型     | 运算符 | 说明                |\n|----------|--------|---------------------|\n| 算术运算 | `+`    | 加法                |\n|          | `-`    | 减法或负号          |\n|          | `*`    | 乘法                |\n|          | `/`    | 除法                |\n| 函数     | 见列表 | 支持常见数学函数    |\n| 比较     | `>`    | 大于                |\n|          | `<`    | 小于                |\n|          | `>=`   | 大于等于            |\n|          | `<=`   | 小于等于            |\n|          | `==`   | 等于                |\n|          | `!=`   | 不等于              |\n| 逻辑     | `&&`   | 逻辑与              |\n|          | `||`   | 逻辑或              |\n|          | `!`    | 逻辑非              |\n\n## Python 解析实现\n\n```python\nimport pandas as pd\nimport numpy as np\nimport math\nimport json\nfrom pandas.core.series import Series\n\ndef eval_expression(df: pd.DataFrame, expr_json: dict) -> Series:\n    \"\"\"\n    解析JSON表达式并返回计算结果Series\n    \n    参数:\n    df: Pandas DataFrame\n    expr_json: 表达式JSON对象\n    \n    返回:\n    计算结果的Series\n    \"\"\"\n    def eval_node(node: dict) -> Series:\n        node_type = node[\"type\"]\n        \n        # 二元运算\n        if node_type == \"binary\":\n            op = node[\"operator\"]\n            left = eval_node(node[\"left\"])\n            right = eval_node(node[\"right\"])\n            \n            if op == \"+\": return left + right\n            if op == \"-\": return left - right\n            if op == \"*\": return left * right\n            if op == \"/\": return left / right\n            if op == \">\": return left > right\n            if op == \"<\": return left < right\n            if op == \">=\": return left >= right\n            if op == \"<=\": return left <= right\n            if op == \"==\": return left == right\n            if op == \"!=\": return left != right\n            if op == \"&&\": return left & right\n            if op == \"||\": return left | right\n            raise ValueError(f\"不支持的二元运算符: {op}\")\n        \n        # 一元运算\n        elif node_type == \"unary\":\n            op = node[\"operator\"]\n            operand = eval_node(node[\"operand\"])\n            \n            if op == \"-\": return -operand\n            if op == \"!\": return ~operand\n            raise ValueError(f\"不支持的一元运算符: {op}\")\n        \n        # 函数调用\n        elif node_type == \"function\":\n            func_name = node[\"name\"]\n            args = [eval_node(arg) for arg in node[\"arguments\"]]\n            \n            if func_name == \"pow\": return args[0] ** args[1]\n            if func_name == \"sqrt\": return np.sqrt(args[0])\n            if func_name == \"abs\": return np.abs(args[0])\n            if func_name == \"log\": return np.log(args[0])\n            if func_name == \"log10\": return np.log10(args[0])\n            if func_name == \"exp\": return np.exp(args[0])\n            if func_name == \"sin\": return np.sin(args[0])\n            if func_name == \"cos\": return np.cos(args[0])\n            if func_name == \"tan\": return np.tan(args[0])\n            if func_name == \"asin\": return np.arcsin(args[0])\n            if func_name == \"acos\": return np.arccos(args[0])\n            if func_name == \"atan\": return np.arctan(args[0])\n            if func_name == \"sinh\": return np.sinh(args[0])\n            if func_name == \"cosh\": return np.cosh(args[0])\n            if func_name == \"tanh\": return np.tanh(args[0])\n            if func_name == \"ceil\": return np.ceil(args[0])\n            if func_name == \"floor\": return np.floor(args[0])\n            if func_name == \"round\": return np.round(args[0])\n            if func_name == \"if\": return np.where(args[0], args[1], args[2])\n            raise ValueError(f\"不支持的函数: {func_name}\")\n        \n        # 变量引用\n        elif node_type == \"variable\":\n            return df[node[\"name\"]]\n        \n        # 常量值\n        elif node_type == \"constant\":\n            value = node[\"value\"]\n            # 创建与DataFrame长度相同的常量Series\n            return pd.Series([value] * len(df), index=df.index)\n        \n        raise ValueError(f\"未知的节点类型: {node_type}\")\n    \n    # 从JSON字符串解析（如果传入的是字符串）\n    if isinstance(expr_json, str):\n        expr_json = json.loads(expr_json)\n    \n    # 获取根表达式\n    root_expr = expr_json.get(\"expression\", expr_json)\n    \n    # 计算并返回结果\n    return eval_node(root_expr)\n\n# 示例用法\nif __name__ == \"__main__\":\n    # 创建示例数据\n    data = {\n        'price': [100, 150, 200, 250],\n        'quantity': [2, 3, 1, 4],\n        'discount': [0.1, 0.2, 0.15, 0.05],\n        'is_premium': [True, False, True, False]\n    }\n    df = pd.DataFrame(data)\n    \n    # 示例1: 简单四则运算\n    simple_expr = {\n        \"expression\": {\n            \"type\": \"binary\",\n            \"operator\": \"*\",\n            \"left\": {\n                \"type\": \"variable\",\n                \"name\": \"price\"\n            },\n            \"right\": {\n                \"type\": \"variable\",\n                \"name\": \"quantity\"\n            }\n        }\n    }\n    print(\"简单四则运算 (price * quantity):\")\n    print(eval_expression(df, simple_expr))\n    \n    # 示例2: 嵌套表达式\n    nested_expr = {\n        \"expression\": {\n            \"type\": \"binary\",\n            \"operator\": \"*\",\n            \"left\": {\n                \"type\": \"binary\",\n                \"operator\": \"-\",\n                \"left\": {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"constant\",\n                        \"value\": 1.1\n                    }\n                },\n                \"right\": {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"variable\",\n                        \"name\": \"discount\"\n                    }\n                }\n            },\n            \"right\": {\n                \"type\": \"variable\",\n                \"name\": \"quantity\"\n            }\n        }\n    }\n    print(\"\\n嵌套表达式 ((price * 1.1 - price * discount) * quantity):\")\n    print(eval_expression(df, nested_expr))\n    \n    # 示例3: 带函数的表达式\n    func_expr = {\n        \"expression\": {\n            \"type\": \"function\",\n            \"name\": \"if\",\n            \"arguments\": [\n                {\n                    \"type\": \"variable\",\n                    \"name\": \"is_premium\"\n                },\n                {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"constant\",\n                        \"value\": 0.9\n                    }\n                },\n                {\n                    \"type\": \"binary\",\n                    \"operator\": \"*\",\n                    \"left\": {\n                        \"type\": \"variable\",\n                        \"name\": \"price\"\n                    },\n                    \"right\": {\n                        \"type\": \"binary\",\n                        \"operator\": \"-\",\n                        \"left\": {\n                            \"type\": \"constant\",\n                            \"value\": 1\n                        },\n                        \"right\": {\n                            \"type\": \"variable\",\n                            \"name\": \"discount\"\n                        }\n                    }\n                }\n            ]\n        }\n    }\n    print(\"\\n带条件函数的表达式 (if(is_premium, price*0.9, price*(1-discount)):\")\n    print(eval_expression(df, func_expr))\n    \n    # 示例4: 复杂表达式\n    complex_expr = {\n        \"expression\": {\n            \"type\": \"binary\",\n            \"operator\": \"/\",\n            \"left\": {\n                \"type\": \"binary\",\n                \"operator\": \"+\",\n                \"left\": {\n                    \"type\": \"function\",\n                    \"name\": \"pow\",\n                    \"arguments\": [\n                        {\n                            \"type\": \"variable\",\n                            \"name\": \"price\"\n                        },\n                        {\n                            \"type\": \"constant\",\n                            \"value\": 2\n                        }\n                    ]\n                },\n                \"right\": {\n                    \"type\": \"function\",\n                    \"name\": \"sqrt\",\n                    \"arguments\": [\n                        {\n                            \"type\": \"variable\",\n                            \"name\": \"quantity\"\n                        }\n                    ]\n                }\n            },\n            \"right\": {\n                \"type\": \"binary\",\n                \"operator\": \"-\",\n                \"left\": {\n                    \"type\": \"constant\",\n                    \"value\": 100\n                },\n                \"right\": {\n                    \"type\": \"variable\",\n                    \"name\": \"discount\"\n                }\n            }\n        }\n    }\n    print(\"\\n复杂表达式 ((price^2 + sqrt(quantity)) / (100 - discount)):\")\n    print(eval_expression(df, complex_expr))\n```\n\n## 使用示例说明\n\n### 1. 简单四则运算\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"*\",\n    \"left\": {\"type\": \"variable\", \"name\": \"price\"},\n    \"right\": {\"type\": \"variable\", \"name\": \"quantity\"}\n  }\n}\n```\n计算: `price * quantity`\n\n### 2. 嵌套表达式\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"*\",\n    \"left\": {\n      \"type\": \"binary\",\n      \"operator\": \"-\",\n      \"left\": {\n        \"type\": \"binary\",\n        \"operator\": \"*\",\n        \"left\": {\"type\": \"variable\", \"name\": \"price\"},\n        \"right\": {\"type\": \"constant\", \"value\": 1.1}\n      },\n      \"right\": {\n        \"type\": \"binary\",\n        \"operator\": \"*\",\n        \"left\": {\"type\": \"variable\", \"name\": \"price\"},\n        \"right\": {\"type\": \"variable\", \"name\": \"discount\"}\n      }\n    },\n    \"right\": {\"type\": \"variable\", \"name\": \"quantity\"}\n  }\n}\n```\n计算: `((price * 1.1) - (price * discount)) * quantity`\n\n### 3. 带函数的表达式\n```json\n{\n  \"expression\": {\n    \"type\": \"function\",\n    \"name\": \"if\",\n    \"arguments\": [\n      {\"type\": \"variable\", \"name\": \"is_premium\"},\n      {\"type\": \"binary\", \"operator\": \"*\", ...}, // true分支\n      {\"type\": \"binary\", \"operator\": \"*\", ...}   // false分支\n    ]\n  }\n}\n```\n计算: `if(is_premium, price*0.9, price*(1-discount))`\n\n### 4. 复杂表达式\n```json\n{\n  \"expression\": {\n    \"type\": \"binary\",\n    \"operator\": \"/\",\n    \"left\": {\n      \"type\": \"binary\",\n      \"operator\": \"+\",\n      \"left\": {\n        \"type\": \"function\",\n        \"name\": \"pow\",\n        \"arguments\": [{\"type\": \"variable\", \"name\": \"price\"}, {\"type\": \"constant\", \"value\": 2}]\n      },\n      \"right\": {\n        \"type\": \"function\",\n        \"name\": \"sqrt\",\n        \"arguments\": [{\"type\": \"variable\", \"name\": \"quantity\"}]\n      }\n    },\n    \"right\": {\n      \"type\": \"binary\",\n      \"operator\": \"-\",\n      \"left\": {\"type\": \"constant\", \"value\": 100},\n      \"right\": {\"type\": \"variable\", \"name\": \"discount\"}\n    }\n  }\n}\n```\n计算: `(price² + √quantity) / (100 - discount)`\n\n## 功能特点\n\n1. **完整的四则运算支持**：\n   - 支持加减乘除基本运算\n   - 支持嵌套任意深度的表达式\n   - 支持括号（通过嵌套结构隐式实现）\n\n2. **扩展功能**：\n   - 变量引用（DataFrame列）\n   - 数学函数（pow, sqrt, log, sin, cos等）\n   - 条件函数（if）\n   - 比较运算和逻辑运算\n\n3. **健壮性设计**：\n   - 类型安全：每个节点明确指定类型\n   - 错误处理：检测未知运算符和函数\n   - 常量传播：优化常量表达式计算\n\n4. **与Pandas无缝集成**：\n   - 返回Pandas Series，可直接赋值给新列\n   - 支持向量化运算，高效处理大数据\n   - 兼容Pandas的索引系统\n\n这个设计提供了一个灵活且强大的方式来表示和执行复杂的数学表达式，特别适合在数据处理和科学计算场景中使用。","slug":"sql数学运算转为json/sql数学运算转为json","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb10011x4gr5kjxasq8","content":"<h1 id=\"四则运算表达式-JSON-规范设计\"><a href=\"#四则运算表达式-JSON-规范设计\" class=\"headerlink\" title=\"四则运算表达式 JSON 规范设计\"></a>四则运算表达式 JSON 规范设计</h1><p>下面是一个规范的 JSON 设计，用于表示和计算四则运算表达式（加、减、乘、除），支持变量、常量、函数和嵌套表达式：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;+&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构说明\"><a href=\"#结构说明\" class=\"headerlink\" title=\"结构说明\"></a>结构说明</h2><h3 id=\"节点类型\"><a href=\"#节点类型\" class=\"headerlink\" title=\"节点类型\"></a>节点类型</h3><ol>\n<li><p><strong>二元运算节点 (binary)</strong></p>\n<ul>\n<li><code>operator</code>: 运算符 (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>)</li>\n<li><code>left</code>: 左操作数（表达式节点）</li>\n<li><code>right</code>: 右操作数（表达式节点）</li>\n</ul>\n</li>\n<li><p><strong>一元运算节点 (unary)</strong></p>\n<ul>\n<li><code>operator</code>: 运算符 (<code>-</code> 负号)</li>\n<li><code>operand</code>: 操作数（表达式节点）</li>\n</ul>\n</li>\n<li><p><strong>函数调用节点 (function)</strong></p>\n<ul>\n<li><code>name</code>: 函数名 (<code>pow</code>, <code>sqrt</code>, <code>log</code>, <code>sin</code>, <code>cos</code>, <code>abs</code> 等)</li>\n<li><code>arguments</code>: 参数列表（表达式节点数组）</li>\n</ul>\n</li>\n<li><p><strong>变量节点 (variable)</strong></p>\n<ul>\n<li><code>name</code>: 变量名（对应 DataFrame 列名）</li>\n</ul>\n</li>\n<li><p><strong>常量节点 (constant)</strong></p>\n<ul>\n<li><code>value</code>: 常量值（数字或字符串）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"支持的运算符\"><a href=\"#支持的运算符\" class=\"headerlink\" title=\"支持的运算符\"></a>支持的运算符</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算术运算</td>\n<td><code>+</code></td>\n<td>加法</td>\n</tr>\n<tr>\n<td></td>\n<td><code>-</code></td>\n<td>减法或负号</td>\n</tr>\n<tr>\n<td></td>\n<td><code>*</code></td>\n<td>乘法</td>\n</tr>\n<tr>\n<td></td>\n<td><code>/</code></td>\n<td>除法</td>\n</tr>\n<tr>\n<td>函数</td>\n<td>见列表</td>\n<td>支持常见数学函数</td>\n</tr>\n<tr>\n<td>比较</td>\n<td><code>&gt;</code></td>\n<td>大于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;</code></td>\n<td>小于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&gt;=</code></td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>==</code></td>\n<td>等于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>!=</code></td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>逻辑</td>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td></td>\n<td>&#96;</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>!</code></td>\n<td>逻辑非</td>\n</tr>\n</tbody></table>\n<h2 id=\"Python-解析实现\"><a href=\"#Python-解析实现\" class=\"headerlink\" title=\"Python 解析实现\"></a>Python 解析实现</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas.core.series <span class=\"keyword\">import</span> Series</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">eval_expression</span>(<span class=\"params\">df: pd.DataFrame, expr_json: <span class=\"built_in\">dict</span></span>) -&gt; Series:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    解析JSON表达式并返回计算结果Series</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    参数:</span></span><br><span class=\"line\"><span class=\"string\">    df: Pandas DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    expr_json: 表达式JSON对象</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    返回:</span></span><br><span class=\"line\"><span class=\"string\">    计算结果的Series</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eval_node</span>(<span class=\"params\">node: <span class=\"built_in\">dict</span></span>) -&gt; Series:</span><br><span class=\"line\">        node_type = node[<span class=\"string\">&quot;type&quot;</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 二元运算</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node_type == <span class=\"string\">&quot;binary&quot;</span>:</span><br><span class=\"line\">            op = node[<span class=\"string\">&quot;operator&quot;</span>]</span><br><span class=\"line\">            left = eval_node(node[<span class=\"string\">&quot;left&quot;</span>])</span><br><span class=\"line\">            right = eval_node(node[<span class=\"string\">&quot;right&quot;</span>])</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;+&quot;</span>: <span class=\"keyword\">return</span> left + right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;-&quot;</span>: <span class=\"keyword\">return</span> left - right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;*&quot;</span>: <span class=\"keyword\">return</span> left * right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;/&quot;</span>: <span class=\"keyword\">return</span> left / right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&gt;&quot;</span>: <span class=\"keyword\">return</span> left &gt; right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&lt;&quot;</span>: <span class=\"keyword\">return</span> left &lt; right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&gt;=&quot;</span>: <span class=\"keyword\">return</span> left &gt;= right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&lt;=&quot;</span>: <span class=\"keyword\">return</span> left &lt;= right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;==&quot;</span>: <span class=\"keyword\">return</span> left == right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;!=&quot;</span>: <span class=\"keyword\">return</span> left != right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&amp;&amp;&quot;</span>: <span class=\"keyword\">return</span> left &amp; right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;||&quot;</span>: <span class=\"keyword\">return</span> left | right</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的二元运算符: <span class=\"subst\">&#123;op&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 一元运算</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;unary&quot;</span>:</span><br><span class=\"line\">            op = node[<span class=\"string\">&quot;operator&quot;</span>]</span><br><span class=\"line\">            operand = eval_node(node[<span class=\"string\">&quot;operand&quot;</span>])</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;-&quot;</span>: <span class=\"keyword\">return</span> -operand</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;!&quot;</span>: <span class=\"keyword\">return</span> ~operand</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的一元运算符: <span class=\"subst\">&#123;op&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 函数调用</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;function&quot;</span>:</span><br><span class=\"line\">            func_name = node[<span class=\"string\">&quot;name&quot;</span>]</span><br><span class=\"line\">            args = [eval_node(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> node[<span class=\"string\">&quot;arguments&quot;</span>]]</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;pow&quot;</span>: <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>] ** args[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;sqrt&quot;</span>: <span class=\"keyword\">return</span> np.sqrt(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;abs&quot;</span>: <span class=\"keyword\">return</span> np.<span class=\"built_in\">abs</span>(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;log&quot;</span>: <span class=\"keyword\">return</span> np.log(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;log10&quot;</span>: <span class=\"keyword\">return</span> np.log10(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;exp&quot;</span>: <span class=\"keyword\">return</span> np.exp(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;sin&quot;</span>: <span class=\"keyword\">return</span> np.sin(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;cos&quot;</span>: <span class=\"keyword\">return</span> np.cos(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;tan&quot;</span>: <span class=\"keyword\">return</span> np.tan(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;asin&quot;</span>: <span class=\"keyword\">return</span> np.arcsin(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;acos&quot;</span>: <span class=\"keyword\">return</span> np.arccos(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;atan&quot;</span>: <span class=\"keyword\">return</span> np.arctan(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;sinh&quot;</span>: <span class=\"keyword\">return</span> np.sinh(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;cosh&quot;</span>: <span class=\"keyword\">return</span> np.cosh(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;tanh&quot;</span>: <span class=\"keyword\">return</span> np.tanh(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;ceil&quot;</span>: <span class=\"keyword\">return</span> np.ceil(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;floor&quot;</span>: <span class=\"keyword\">return</span> np.floor(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;round&quot;</span>: <span class=\"keyword\">return</span> np.<span class=\"built_in\">round</span>(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;if&quot;</span>: <span class=\"keyword\">return</span> np.where(args[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>], args[<span class=\"number\">2</span>])</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的函数: <span class=\"subst\">&#123;func_name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 变量引用</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;variable&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> df[node[<span class=\"string\">&quot;name&quot;</span>]]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 常量值</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;constant&quot;</span>:</span><br><span class=\"line\">            value = node[<span class=\"string\">&quot;value&quot;</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 创建与DataFrame长度相同的常量Series</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> pd.Series([value] * <span class=\"built_in\">len</span>(df), index=df.index)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;未知的节点类型: <span class=\"subst\">&#123;node_type&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 从JSON字符串解析（如果传入的是字符串）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(expr_json, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        expr_json = json.loads(expr_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 获取根表达式</span></span><br><span class=\"line\">    root_expr = expr_json.get(<span class=\"string\">&quot;expression&quot;</span>, expr_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算并返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> eval_node(root_expr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例用法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建示例数据</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;price&#x27;</span>: [<span class=\"number\">100</span>, <span class=\"number\">150</span>, <span class=\"number\">200</span>, <span class=\"number\">250</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;quantity&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;discount&#x27;</span>: [<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.15</span>, <span class=\"number\">0.05</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;is_premium&#x27;</span>: [<span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    df = pd.DataFrame(data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例1: 简单四则运算</span></span><br><span class=\"line\">    simple_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;quantity&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;简单四则运算 (price * quantity):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, simple_expr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例2: 嵌套表达式</span></span><br><span class=\"line\">    nested_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;-&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1.1</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;quantity&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n嵌套表达式 ((price * 1.1 - price * discount) * quantity):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, nested_expr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例3: 带函数的表达式</span></span><br><span class=\"line\">    func_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;if&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;arguments&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;is_premium&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">0.9</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;-&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n带条件函数的表达式 (if(is_premium, price*0.9, price*(1-discount)):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, func_expr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例4: 复杂表达式</span></span><br><span class=\"line\">    complex_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;+&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;pow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;arguments&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">2</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;sqrt&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;arguments&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;quantity&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;-&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">100</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n复杂表达式 ((price^2 + sqrt(quantity)) / (100 - discount)):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, complex_expr))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用示例说明\"><a href=\"#使用示例说明\" class=\"headerlink\" title=\"使用示例说明\"></a>使用示例说明</h2><h3 id=\"1-简单四则运算\"><a href=\"#1-简单四则运算\" class=\"headerlink\" title=\"1. 简单四则运算\"></a>1. 简单四则运算</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;quantity&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>price * quantity</code></p>\n<h3 id=\"2-嵌套表达式\"><a href=\"#2-嵌套表达式\" class=\"headerlink\" title=\"2. 嵌套表达式\"></a>2. 嵌套表达式</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1.1</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;discount&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;quantity&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>((price * 1.1) - (price * discount)) * quantity</code></p>\n<h3 id=\"3-带函数的表达式\"><a href=\"#3-带函数的表达式\" class=\"headerlink\" title=\"3. 带函数的表达式\"></a>3. 带函数的表达式</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;function&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;if&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;is_premium&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span> ...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// true分支</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span> ...<span class=\"punctuation\">&#125;</span>   <span class=\"comment\">// false分支</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>if(is_premium, price*0.9, price*(1-discount))</code></p>\n<h3 id=\"4-复杂表达式\"><a href=\"#4-复杂表达式\" class=\"headerlink\" title=\"4. 复杂表达式\"></a>4. 复杂表达式</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;+&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;function&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;pow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;function&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sqrt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;quantity&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;discount&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>(price² + √quantity) / (100 - discount)</code></p>\n<h2 id=\"功能特点\"><a href=\"#功能特点\" class=\"headerlink\" title=\"功能特点\"></a>功能特点</h2><ol>\n<li><p><strong>完整的四则运算支持</strong>：</p>\n<ul>\n<li>支持加减乘除基本运算</li>\n<li>支持嵌套任意深度的表达式</li>\n<li>支持括号（通过嵌套结构隐式实现）</li>\n</ul>\n</li>\n<li><p><strong>扩展功能</strong>：</p>\n<ul>\n<li>变量引用（DataFrame列）</li>\n<li>数学函数（pow, sqrt, log, sin, cos等）</li>\n<li>条件函数（if）</li>\n<li>比较运算和逻辑运算</li>\n</ul>\n</li>\n<li><p><strong>健壮性设计</strong>：</p>\n<ul>\n<li>类型安全：每个节点明确指定类型</li>\n<li>错误处理：检测未知运算符和函数</li>\n<li>常量传播：优化常量表达式计算</li>\n</ul>\n</li>\n<li><p><strong>与Pandas无缝集成</strong>：</p>\n<ul>\n<li>返回Pandas Series，可直接赋值给新列</li>\n<li>支持向量化运算，高效处理大数据</li>\n<li>兼容Pandas的索引系统</li>\n</ul>\n</li>\n</ol>\n<p>这个设计提供了一个灵活且强大的方式来表示和执行复杂的数学表达式，特别适合在数据处理和科学计算场景中使用。</p>\n","excerpt":"","more":"<h1 id=\"四则运算表达式-JSON-规范设计\"><a href=\"#四则运算表达式-JSON-规范设计\" class=\"headerlink\" title=\"四则运算表达式 JSON 规范设计\"></a>四则运算表达式 JSON 规范设计</h1><p>下面是一个规范的 JSON 设计，用于表示和计算四则运算表达式（加、减、乘、除），支持变量、常量、函数和嵌套表达式：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;+&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构说明\"><a href=\"#结构说明\" class=\"headerlink\" title=\"结构说明\"></a>结构说明</h2><h3 id=\"节点类型\"><a href=\"#节点类型\" class=\"headerlink\" title=\"节点类型\"></a>节点类型</h3><ol>\n<li><p><strong>二元运算节点 (binary)</strong></p>\n<ul>\n<li><code>operator</code>: 运算符 (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>)</li>\n<li><code>left</code>: 左操作数（表达式节点）</li>\n<li><code>right</code>: 右操作数（表达式节点）</li>\n</ul>\n</li>\n<li><p><strong>一元运算节点 (unary)</strong></p>\n<ul>\n<li><code>operator</code>: 运算符 (<code>-</code> 负号)</li>\n<li><code>operand</code>: 操作数（表达式节点）</li>\n</ul>\n</li>\n<li><p><strong>函数调用节点 (function)</strong></p>\n<ul>\n<li><code>name</code>: 函数名 (<code>pow</code>, <code>sqrt</code>, <code>log</code>, <code>sin</code>, <code>cos</code>, <code>abs</code> 等)</li>\n<li><code>arguments</code>: 参数列表（表达式节点数组）</li>\n</ul>\n</li>\n<li><p><strong>变量节点 (variable)</strong></p>\n<ul>\n<li><code>name</code>: 变量名（对应 DataFrame 列名）</li>\n</ul>\n</li>\n<li><p><strong>常量节点 (constant)</strong></p>\n<ul>\n<li><code>value</code>: 常量值（数字或字符串）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"支持的运算符\"><a href=\"#支持的运算符\" class=\"headerlink\" title=\"支持的运算符\"></a>支持的运算符</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算术运算</td>\n<td><code>+</code></td>\n<td>加法</td>\n</tr>\n<tr>\n<td></td>\n<td><code>-</code></td>\n<td>减法或负号</td>\n</tr>\n<tr>\n<td></td>\n<td><code>*</code></td>\n<td>乘法</td>\n</tr>\n<tr>\n<td></td>\n<td><code>/</code></td>\n<td>除法</td>\n</tr>\n<tr>\n<td>函数</td>\n<td>见列表</td>\n<td>支持常见数学函数</td>\n</tr>\n<tr>\n<td>比较</td>\n<td><code>&gt;</code></td>\n<td>大于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;</code></td>\n<td>小于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&gt;=</code></td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>==</code></td>\n<td>等于</td>\n</tr>\n<tr>\n<td></td>\n<td><code>!=</code></td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>逻辑</td>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td></td>\n<td>&#96;</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>!</code></td>\n<td>逻辑非</td>\n</tr>\n</tbody></table>\n<h2 id=\"Python-解析实现\"><a href=\"#Python-解析实现\" class=\"headerlink\" title=\"Python 解析实现\"></a>Python 解析实现</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas.core.series <span class=\"keyword\">import</span> Series</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">eval_expression</span>(<span class=\"params\">df: pd.DataFrame, expr_json: <span class=\"built_in\">dict</span></span>) -&gt; Series:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    解析JSON表达式并返回计算结果Series</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    参数:</span></span><br><span class=\"line\"><span class=\"string\">    df: Pandas DataFrame</span></span><br><span class=\"line\"><span class=\"string\">    expr_json: 表达式JSON对象</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    返回:</span></span><br><span class=\"line\"><span class=\"string\">    计算结果的Series</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eval_node</span>(<span class=\"params\">node: <span class=\"built_in\">dict</span></span>) -&gt; Series:</span><br><span class=\"line\">        node_type = node[<span class=\"string\">&quot;type&quot;</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 二元运算</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node_type == <span class=\"string\">&quot;binary&quot;</span>:</span><br><span class=\"line\">            op = node[<span class=\"string\">&quot;operator&quot;</span>]</span><br><span class=\"line\">            left = eval_node(node[<span class=\"string\">&quot;left&quot;</span>])</span><br><span class=\"line\">            right = eval_node(node[<span class=\"string\">&quot;right&quot;</span>])</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;+&quot;</span>: <span class=\"keyword\">return</span> left + right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;-&quot;</span>: <span class=\"keyword\">return</span> left - right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;*&quot;</span>: <span class=\"keyword\">return</span> left * right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;/&quot;</span>: <span class=\"keyword\">return</span> left / right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&gt;&quot;</span>: <span class=\"keyword\">return</span> left &gt; right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&lt;&quot;</span>: <span class=\"keyword\">return</span> left &lt; right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&gt;=&quot;</span>: <span class=\"keyword\">return</span> left &gt;= right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&lt;=&quot;</span>: <span class=\"keyword\">return</span> left &lt;= right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;==&quot;</span>: <span class=\"keyword\">return</span> left == right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;!=&quot;</span>: <span class=\"keyword\">return</span> left != right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;&amp;&amp;&quot;</span>: <span class=\"keyword\">return</span> left &amp; right</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;||&quot;</span>: <span class=\"keyword\">return</span> left | right</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的二元运算符: <span class=\"subst\">&#123;op&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 一元运算</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;unary&quot;</span>:</span><br><span class=\"line\">            op = node[<span class=\"string\">&quot;operator&quot;</span>]</span><br><span class=\"line\">            operand = eval_node(node[<span class=\"string\">&quot;operand&quot;</span>])</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;-&quot;</span>: <span class=\"keyword\">return</span> -operand</span><br><span class=\"line\">            <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;!&quot;</span>: <span class=\"keyword\">return</span> ~operand</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的一元运算符: <span class=\"subst\">&#123;op&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 函数调用</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;function&quot;</span>:</span><br><span class=\"line\">            func_name = node[<span class=\"string\">&quot;name&quot;</span>]</span><br><span class=\"line\">            args = [eval_node(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> node[<span class=\"string\">&quot;arguments&quot;</span>]]</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;pow&quot;</span>: <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>] ** args[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;sqrt&quot;</span>: <span class=\"keyword\">return</span> np.sqrt(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;abs&quot;</span>: <span class=\"keyword\">return</span> np.<span class=\"built_in\">abs</span>(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;log&quot;</span>: <span class=\"keyword\">return</span> np.log(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;log10&quot;</span>: <span class=\"keyword\">return</span> np.log10(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;exp&quot;</span>: <span class=\"keyword\">return</span> np.exp(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;sin&quot;</span>: <span class=\"keyword\">return</span> np.sin(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;cos&quot;</span>: <span class=\"keyword\">return</span> np.cos(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;tan&quot;</span>: <span class=\"keyword\">return</span> np.tan(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;asin&quot;</span>: <span class=\"keyword\">return</span> np.arcsin(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;acos&quot;</span>: <span class=\"keyword\">return</span> np.arccos(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;atan&quot;</span>: <span class=\"keyword\">return</span> np.arctan(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;sinh&quot;</span>: <span class=\"keyword\">return</span> np.sinh(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;cosh&quot;</span>: <span class=\"keyword\">return</span> np.cosh(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;tanh&quot;</span>: <span class=\"keyword\">return</span> np.tanh(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;ceil&quot;</span>: <span class=\"keyword\">return</span> np.ceil(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;floor&quot;</span>: <span class=\"keyword\">return</span> np.floor(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;round&quot;</span>: <span class=\"keyword\">return</span> np.<span class=\"built_in\">round</span>(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> func_name == <span class=\"string\">&quot;if&quot;</span>: <span class=\"keyword\">return</span> np.where(args[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>], args[<span class=\"number\">2</span>])</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的函数: <span class=\"subst\">&#123;func_name&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 变量引用</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;variable&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> df[node[<span class=\"string\">&quot;name&quot;</span>]]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 常量值</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node_type == <span class=\"string\">&quot;constant&quot;</span>:</span><br><span class=\"line\">            value = node[<span class=\"string\">&quot;value&quot;</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 创建与DataFrame长度相同的常量Series</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> pd.Series([value] * <span class=\"built_in\">len</span>(df), index=df.index)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;未知的节点类型: <span class=\"subst\">&#123;node_type&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 从JSON字符串解析（如果传入的是字符串）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(expr_json, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        expr_json = json.loads(expr_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 获取根表达式</span></span><br><span class=\"line\">    root_expr = expr_json.get(<span class=\"string\">&quot;expression&quot;</span>, expr_json)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算并返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> eval_node(root_expr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例用法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建示例数据</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;price&#x27;</span>: [<span class=\"number\">100</span>, <span class=\"number\">150</span>, <span class=\"number\">200</span>, <span class=\"number\">250</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;quantity&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;discount&#x27;</span>: [<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.15</span>, <span class=\"number\">0.05</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;is_premium&#x27;</span>: [<span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    df = pd.DataFrame(data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例1: 简单四则运算</span></span><br><span class=\"line\">    simple_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;quantity&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;简单四则运算 (price * quantity):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, simple_expr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例2: 嵌套表达式</span></span><br><span class=\"line\">    nested_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;-&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1.1</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;quantity&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n嵌套表达式 ((price * 1.1 - price * discount) * quantity):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, nested_expr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例3: 带函数的表达式</span></span><br><span class=\"line\">    func_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;if&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;arguments&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;is_premium&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">0.9</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;-&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n带条件函数的表达式 (if(is_premium, price*0.9, price*(1-discount)):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, func_expr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 示例4: 复杂表达式</span></span><br><span class=\"line\">    complex_expr = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;+&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;pow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;arguments&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;price&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">2</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;sqrt&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;arguments&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;quantity&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;binary&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;-&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;constant&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">100</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;variable&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;discount&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n复杂表达式 ((price^2 + sqrt(quantity)) / (100 - discount)):&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eval_expression(df, complex_expr))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用示例说明\"><a href=\"#使用示例说明\" class=\"headerlink\" title=\"使用示例说明\"></a>使用示例说明</h2><h3 id=\"1-简单四则运算\"><a href=\"#1-简单四则运算\" class=\"headerlink\" title=\"1. 简单四则运算\"></a>1. 简单四则运算</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;quantity&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>price * quantity</code></p>\n<h3 id=\"2-嵌套表达式\"><a href=\"#2-嵌套表达式\" class=\"headerlink\" title=\"2. 嵌套表达式\"></a>2. 嵌套表达式</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1.1</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;discount&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;quantity&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>((price * 1.1) - (price * discount)) * quantity</code></p>\n<h3 id=\"3-带函数的表达式\"><a href=\"#3-带函数的表达式\" class=\"headerlink\" title=\"3. 带函数的表达式\"></a>3. 带函数的表达式</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;function&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;if&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;is_premium&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span> ...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// true分支</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span> ...<span class=\"punctuation\">&#125;</span>   <span class=\"comment\">// false分支</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>if(is_premium, price*0.9, price*(1-discount))</code></p>\n<h3 id=\"4-复杂表达式\"><a href=\"#4-复杂表达式\" class=\"headerlink\" title=\"4. 复杂表达式\"></a>4. 复杂表达式</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;expression&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;+&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;function&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;pow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;price&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;function&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sqrt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;arguments&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;quantity&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;binary&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;operator&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;left&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;constant&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;right&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;variable&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;discount&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>计算: <code>(price² + √quantity) / (100 - discount)</code></p>\n<h2 id=\"功能特点\"><a href=\"#功能特点\" class=\"headerlink\" title=\"功能特点\"></a>功能特点</h2><ol>\n<li><p><strong>完整的四则运算支持</strong>：</p>\n<ul>\n<li>支持加减乘除基本运算</li>\n<li>支持嵌套任意深度的表达式</li>\n<li>支持括号（通过嵌套结构隐式实现）</li>\n</ul>\n</li>\n<li><p><strong>扩展功能</strong>：</p>\n<ul>\n<li>变量引用（DataFrame列）</li>\n<li>数学函数（pow, sqrt, log, sin, cos等）</li>\n<li>条件函数（if）</li>\n<li>比较运算和逻辑运算</li>\n</ul>\n</li>\n<li><p><strong>健壮性设计</strong>：</p>\n<ul>\n<li>类型安全：每个节点明确指定类型</li>\n<li>错误处理：检测未知运算符和函数</li>\n<li>常量传播：优化常量表达式计算</li>\n</ul>\n</li>\n<li><p><strong>与Pandas无缝集成</strong>：</p>\n<ul>\n<li>返回Pandas Series，可直接赋值给新列</li>\n<li>支持向量化运算，高效处理大数据</li>\n<li>兼容Pandas的索引系统</li>\n</ul>\n</li>\n</ol>\n<p>这个设计提供了一个灵活且强大的方式来表示和执行复杂的数学表达式，特别适合在数据处理和科学计算场景中使用。</p>\n"},{"title":"开发基础知识-连接池","date":"2025-04-13T09:05:06.000Z","updated":"2025-04-13T09:05:06.000Z","keywords":["开发基础知识","连接池"],"description":null,"_content":"---\n\n**连接池（Connection Pool）** 是一种管理和复用数据库连接的技术，其核心思想是预先创建并维护一组可重复使用的数据库连接，供应用程序按需取用和归还。它是高并发、高性能数据库访问的关键优化手段。\n\n---\n\n### **连接池的核心工作原理**\n1. **初始化**：应用启动时，预先创建一定数量的数据库连接，放入“池”中。\n2. **分配连接**：当应用需要操作数据库时，直接从池中获取空闲连接，无需重新建立。\n3. **使用后归还**：操作完成后，连接被归还到池中，供后续重复使用。\n4. **动态调整**：根据负载自动扩展或收缩连接数（如高峰期扩容，空闲时释放多余连接）。\n\n---\n\n### **连接池的核心优势**\n#### 1. **大幅降低连接创建开销**\n   - **问题**：直接创建数据库连接代价高昂（涉及网络握手、身份验证、内存分配等）。\n   - **解决**：池中连接预先创建，使用时直接复用，避免重复初始化。\n\n#### 2. **提升响应速度**\n   - **直接访问**：从池中获取现成连接（毫秒级），而非临时创建（百毫秒级）。\n   - **示例**：高并发场景下，复用连接可显著降低请求延迟。\n\n#### 3. **资源高效复用**\n   - **避免浪费**：连接用完归还池中，而非直接关闭，减少频繁开关的资源损耗。\n   - **示例**：1个连接池连接可服务100次请求，而非创建100次新连接。\n\n#### 4. **防止数据库过载**\n   - **流量控制**：通过最大连接数限制，避免突发请求压垮数据库。\n   - **示例**：设置 `max=100`，即使有1000个并发请求，数据库实际并发连接不超过100。\n\n#### 5. **统一管理连接生命周期**\n   - **健康检查**：自动检测失效连接（如网络中断），并重建新连接。\n   - **超时控制**：自动回收长时间空闲的连接，防止资源泄漏。\n\n---\n\n### **连接池的典型应用场景**\n| 场景                  | 说明                                                                 |\n|-----------------------|--------------------------------------------------------------------|\n| **Web应用高并发**      | 快速响应HTTP请求，避免频繁创建连接导致数据库瓶颈。                      |\n| **微服务架构**         | 多个服务实例共享连接池，降低数据库压力。                                |\n| **批量数据处理**       | 复用连接处理大量数据任务，提升吞吐量。                                  |\n| **短时高频操作**       | 如实时交易系统，要求毫秒级响应，连接池减少延迟。                        |\n\n---\n\n### **连接池的注意事项**\n1. **合理配置参数**  \n   - `最小连接数`：避免空闲时过度释放，导致突发请求延迟。  \n   - `最大连接数`：根据数据库性能和硬件资源设置，防止超限。  \n   - `超时时间`：避免长时间占用连接不释放（如代码未正确归还）。\n\n2. **连接泄漏**  \n   - 必须确保操作完成后归还连接（如 Java 的 `try-with-resources`，Python 的 `with` 语句）。\n\n3. **兼容性**  \n   - 确保连接池与数据库版本、驱动版本兼容（如 Oracle 驱动需匹配 JDBC URL 格式）。\n\n4. **监控与调优**  \n   - 通过日志或监控工具观察连接池状态（活跃连接数、等待队列长度等），动态调整参数。\n\n---\n\n### **连接池 vs 直连数据库的对比**\n| **场景**               | **连接池**                          | **直连数据库**                      |\n|------------------------|-----------------------------------|-----------------------------------|\n| **短时高频请求**         | ✅ 高效复用，延迟低                 | ❌ 频繁创建连接，性能差             |\n| **长耗时操作**           | ⚠️ 需控制单次占用时间              | ✅ 独占连接无竞争                  |\n| **高并发**              | ✅ 通过池化避免资源耗尽             | ❌ 连接数爆炸，导致数据库崩溃       |\n| **资源消耗**            | ⚠️ 需维护池中空闲连接              | ✅ 无额外开销（但总体资源消耗更高） |\n\n---\n\n### **总结**\n- **连接池是高性能数据库访问的基石**，尤其适合高并发、短任务场景。\n- **核心价值**：通过复用和管理连接，提升吞吐量、降低延迟、保障稳定性。\n- **正确使用**：需结合业务合理配置参数，并严格管理连接的获取和释放。\n以下是 Java 和 Python 中连接 Oracle 数据库的连接池示例代码，使用常见的连接池库实现：\n\n---\n\n### **Java 示例（使用 HikariCP 连接池）**\n#### 依赖引入（Maven）:\n```xml\n<!-- HikariCP -->\n<dependency>\n    <groupId>com.zaxxer</groupId>\n    <artifactId>HikariCP</artifactId>\n    <version>5.1.0</version>\n</dependency>\n<!-- Oracle JDBC 驱动 -->\n<dependency>\n    <groupId>com.oracle.database.jdbc</groupId>\n    <artifactId>ojdbc11</artifactId>\n    <version>21.11.0.0</version>\n</dependency>\n```\n\n#### Java 连接池代码:\n```java\nimport com.zaxxer.hikari.HikariConfig;\nimport com.zaxxer.hikari.HikariDataSource;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class OracleConnectionPool {\n    private static HikariDataSource dataSource;\n\n    static {\n        HikariConfig config = new HikariConfig();\n        config.setJdbcUrl(\"jdbc:oracle:thin:@//host:port/service_name\");\n        config.setUsername(\"your_username\");\n        config.setPassword(\"your_password\");\n        config.setMaximumPoolSize(10);  // 最大连接数\n        config.setConnectionTimeout(30000); // 连接超时时间（毫秒）\n        \n        // 其他可选配置\n        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n\n        dataSource = new HikariDataSource(config);\n    }\n\n    public static Connection getConnection() throws Exception {\n        return dataSource.getConnection();\n    }\n\n    public static void main(String[] args) {\n        try (Connection conn = getConnection();\n             Statement stmt = conn.createStatement();\n             ResultSet rs = stmt.executeQuery(\"SELECT 1 FROM dual\")) {\n            \n            if (rs.next()) {\n                System.out.println(\"Oracle 连接成功！\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n---\n\n### **Python 示例（使用 `cx_Oracle` 内置连接池）**\n#### 依赖安装:\n```bash\npip install cx_Oracle\n```\n\n#### Python 连接池代码:\n```python\nimport cx_Oracle\nfrom threading import Lock\nfrom contextlib import contextmanager\n\n# 连接池配置\npool = cx_Oracle.SessionPool(\n    user=\"your_username\",\n    password=\"your_password\",\n    dsn=\"host:port/service_name\",  # 例如: \"localhost:1521/orclpdb1\"\n    min=2,        # 最小连接数\n    max=10,       # 最大连接数\n    increment=1,  # 每次新增连接数\n    threaded=True\n)\n\n# 线程安全的连接获取（可选）\nlock = Lock()\n\n@contextmanager\ndef get_connection():\n    with lock:\n        connection = pool.acquire()\n        try:\n            yield connection\n        finally:\n            pool.release(connection)\n\n# 使用示例\nif __name__ == \"__main__\":\n    try:\n        with get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM dual\")\n            result = cursor.fetchone()\n            print(\"Oracle 连接成功！结果:\", result)\n            cursor.close()\n    except Exception as e:\n        print(\"连接失败:\", e)\n    finally:\n        pool.close()  # 关闭连接池\n```\n\n---\n\n### **关键配置说明**\n| 配置项              | Java (HikariCP)         | Python (cx_Oracle)      |\n|--------------------|-------------------------|-------------------------|\n| **驱动 URL 格式**   | `jdbc:oracle:thin:@//host:port/service_name` | `host:port/service_name` |\n| **连接池大小**      | `setMaximumPoolSize`    | `min`, `max`, `increment` |\n| **超时时间**        | `setConnectionTimeout`  | 默认无，需自行处理        |\n| **线程安全**        | 自动处理                | 需手动加锁（如多线程环境）|\n\n---\n\n### **注意事项**\n1. **Oracle JDBC URL**  \n   - 使用服务名（推荐）：`jdbc:oracle:thin:@//host:port/service_name`  \n   - 使用 SID（旧格式）：`jdbc:oracle:thin:@host:port:sid`\n\n2. **Python 驱动**  \n   - 推荐使用 `cx_Oracle` 最新版本（需安装 Oracle Instant Client 或完整客户端）。\n\n3. **资源释放**  \n   - Java 中通过 `try-with-resources` 自动关闭连接。  \n   - Python 使用 `with` 上下文管理器确保释放。\n\n4. **连接泄漏**  \n   - 确保所有连接在使用后正确关闭（尤其是异常场景）。\n\n5. **Oracle 版本兼容性**  \n   - 确认 JDBC 驱动或 Python 驱动版本与 Oracle 数据库版本匹配。\n\n---\n\n如果需要其他连接池实现（如 Java 的 `DBCP` 或 Python 的 `SQLAlchemy`），可进一步补充说明！","source":"_posts/开发基础知识-连接池/开发基础知识-连接池.md","raw":"---\ntitle: 开发基础知识-连接池\ndate: 2025-04-13 17:05:06\nupdated: 2025-04-13 17:05:06\ntags:\n - 开发基础知识\ncategories:\n - 技术\n - 开发基础知识\nkeywords:\n - 开发基础知识\n - 连接池\ndescription:\n---\n---\n\n**连接池（Connection Pool）** 是一种管理和复用数据库连接的技术，其核心思想是预先创建并维护一组可重复使用的数据库连接，供应用程序按需取用和归还。它是高并发、高性能数据库访问的关键优化手段。\n\n---\n\n### **连接池的核心工作原理**\n1. **初始化**：应用启动时，预先创建一定数量的数据库连接，放入“池”中。\n2. **分配连接**：当应用需要操作数据库时，直接从池中获取空闲连接，无需重新建立。\n3. **使用后归还**：操作完成后，连接被归还到池中，供后续重复使用。\n4. **动态调整**：根据负载自动扩展或收缩连接数（如高峰期扩容，空闲时释放多余连接）。\n\n---\n\n### **连接池的核心优势**\n#### 1. **大幅降低连接创建开销**\n   - **问题**：直接创建数据库连接代价高昂（涉及网络握手、身份验证、内存分配等）。\n   - **解决**：池中连接预先创建，使用时直接复用，避免重复初始化。\n\n#### 2. **提升响应速度**\n   - **直接访问**：从池中获取现成连接（毫秒级），而非临时创建（百毫秒级）。\n   - **示例**：高并发场景下，复用连接可显著降低请求延迟。\n\n#### 3. **资源高效复用**\n   - **避免浪费**：连接用完归还池中，而非直接关闭，减少频繁开关的资源损耗。\n   - **示例**：1个连接池连接可服务100次请求，而非创建100次新连接。\n\n#### 4. **防止数据库过载**\n   - **流量控制**：通过最大连接数限制，避免突发请求压垮数据库。\n   - **示例**：设置 `max=100`，即使有1000个并发请求，数据库实际并发连接不超过100。\n\n#### 5. **统一管理连接生命周期**\n   - **健康检查**：自动检测失效连接（如网络中断），并重建新连接。\n   - **超时控制**：自动回收长时间空闲的连接，防止资源泄漏。\n\n---\n\n### **连接池的典型应用场景**\n| 场景                  | 说明                                                                 |\n|-----------------------|--------------------------------------------------------------------|\n| **Web应用高并发**      | 快速响应HTTP请求，避免频繁创建连接导致数据库瓶颈。                      |\n| **微服务架构**         | 多个服务实例共享连接池，降低数据库压力。                                |\n| **批量数据处理**       | 复用连接处理大量数据任务，提升吞吐量。                                  |\n| **短时高频操作**       | 如实时交易系统，要求毫秒级响应，连接池减少延迟。                        |\n\n---\n\n### **连接池的注意事项**\n1. **合理配置参数**  \n   - `最小连接数`：避免空闲时过度释放，导致突发请求延迟。  \n   - `最大连接数`：根据数据库性能和硬件资源设置，防止超限。  \n   - `超时时间`：避免长时间占用连接不释放（如代码未正确归还）。\n\n2. **连接泄漏**  \n   - 必须确保操作完成后归还连接（如 Java 的 `try-with-resources`，Python 的 `with` 语句）。\n\n3. **兼容性**  \n   - 确保连接池与数据库版本、驱动版本兼容（如 Oracle 驱动需匹配 JDBC URL 格式）。\n\n4. **监控与调优**  \n   - 通过日志或监控工具观察连接池状态（活跃连接数、等待队列长度等），动态调整参数。\n\n---\n\n### **连接池 vs 直连数据库的对比**\n| **场景**               | **连接池**                          | **直连数据库**                      |\n|------------------------|-----------------------------------|-----------------------------------|\n| **短时高频请求**         | ✅ 高效复用，延迟低                 | ❌ 频繁创建连接，性能差             |\n| **长耗时操作**           | ⚠️ 需控制单次占用时间              | ✅ 独占连接无竞争                  |\n| **高并发**              | ✅ 通过池化避免资源耗尽             | ❌ 连接数爆炸，导致数据库崩溃       |\n| **资源消耗**            | ⚠️ 需维护池中空闲连接              | ✅ 无额外开销（但总体资源消耗更高） |\n\n---\n\n### **总结**\n- **连接池是高性能数据库访问的基石**，尤其适合高并发、短任务场景。\n- **核心价值**：通过复用和管理连接，提升吞吐量、降低延迟、保障稳定性。\n- **正确使用**：需结合业务合理配置参数，并严格管理连接的获取和释放。\n以下是 Java 和 Python 中连接 Oracle 数据库的连接池示例代码，使用常见的连接池库实现：\n\n---\n\n### **Java 示例（使用 HikariCP 连接池）**\n#### 依赖引入（Maven）:\n```xml\n<!-- HikariCP -->\n<dependency>\n    <groupId>com.zaxxer</groupId>\n    <artifactId>HikariCP</artifactId>\n    <version>5.1.0</version>\n</dependency>\n<!-- Oracle JDBC 驱动 -->\n<dependency>\n    <groupId>com.oracle.database.jdbc</groupId>\n    <artifactId>ojdbc11</artifactId>\n    <version>21.11.0.0</version>\n</dependency>\n```\n\n#### Java 连接池代码:\n```java\nimport com.zaxxer.hikari.HikariConfig;\nimport com.zaxxer.hikari.HikariDataSource;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class OracleConnectionPool {\n    private static HikariDataSource dataSource;\n\n    static {\n        HikariConfig config = new HikariConfig();\n        config.setJdbcUrl(\"jdbc:oracle:thin:@//host:port/service_name\");\n        config.setUsername(\"your_username\");\n        config.setPassword(\"your_password\");\n        config.setMaximumPoolSize(10);  // 最大连接数\n        config.setConnectionTimeout(30000); // 连接超时时间（毫秒）\n        \n        // 其他可选配置\n        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n\n        dataSource = new HikariDataSource(config);\n    }\n\n    public static Connection getConnection() throws Exception {\n        return dataSource.getConnection();\n    }\n\n    public static void main(String[] args) {\n        try (Connection conn = getConnection();\n             Statement stmt = conn.createStatement();\n             ResultSet rs = stmt.executeQuery(\"SELECT 1 FROM dual\")) {\n            \n            if (rs.next()) {\n                System.out.println(\"Oracle 连接成功！\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n---\n\n### **Python 示例（使用 `cx_Oracle` 内置连接池）**\n#### 依赖安装:\n```bash\npip install cx_Oracle\n```\n\n#### Python 连接池代码:\n```python\nimport cx_Oracle\nfrom threading import Lock\nfrom contextlib import contextmanager\n\n# 连接池配置\npool = cx_Oracle.SessionPool(\n    user=\"your_username\",\n    password=\"your_password\",\n    dsn=\"host:port/service_name\",  # 例如: \"localhost:1521/orclpdb1\"\n    min=2,        # 最小连接数\n    max=10,       # 最大连接数\n    increment=1,  # 每次新增连接数\n    threaded=True\n)\n\n# 线程安全的连接获取（可选）\nlock = Lock()\n\n@contextmanager\ndef get_connection():\n    with lock:\n        connection = pool.acquire()\n        try:\n            yield connection\n        finally:\n            pool.release(connection)\n\n# 使用示例\nif __name__ == \"__main__\":\n    try:\n        with get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM dual\")\n            result = cursor.fetchone()\n            print(\"Oracle 连接成功！结果:\", result)\n            cursor.close()\n    except Exception as e:\n        print(\"连接失败:\", e)\n    finally:\n        pool.close()  # 关闭连接池\n```\n\n---\n\n### **关键配置说明**\n| 配置项              | Java (HikariCP)         | Python (cx_Oracle)      |\n|--------------------|-------------------------|-------------------------|\n| **驱动 URL 格式**   | `jdbc:oracle:thin:@//host:port/service_name` | `host:port/service_name` |\n| **连接池大小**      | `setMaximumPoolSize`    | `min`, `max`, `increment` |\n| **超时时间**        | `setConnectionTimeout`  | 默认无，需自行处理        |\n| **线程安全**        | 自动处理                | 需手动加锁（如多线程环境）|\n\n---\n\n### **注意事项**\n1. **Oracle JDBC URL**  \n   - 使用服务名（推荐）：`jdbc:oracle:thin:@//host:port/service_name`  \n   - 使用 SID（旧格式）：`jdbc:oracle:thin:@host:port:sid`\n\n2. **Python 驱动**  \n   - 推荐使用 `cx_Oracle` 最新版本（需安装 Oracle Instant Client 或完整客户端）。\n\n3. **资源释放**  \n   - Java 中通过 `try-with-resources` 自动关闭连接。  \n   - Python 使用 `with` 上下文管理器确保释放。\n\n4. **连接泄漏**  \n   - 确保所有连接在使用后正确关闭（尤其是异常场景）。\n\n5. **Oracle 版本兼容性**  \n   - 确认 JDBC 驱动或 Python 驱动版本与 Oracle 数据库版本匹配。\n\n---\n\n如果需要其他连接池实现（如 Java 的 `DBCP` 或 Python 的 `SQLAlchemy`），可进一步补充说明！","slug":"开发基础知识-连接池/开发基础知识-连接池","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb20015x4gr6ezy5oim","content":"<hr>\n<p><strong>连接池（Connection Pool）</strong> 是一种管理和复用数据库连接的技术，其核心思想是预先创建并维护一组可重复使用的数据库连接，供应用程序按需取用和归还。它是高并发、高性能数据库访问的关键优化手段。</p>\n<hr>\n<h3 id=\"连接池的核心工作原理\"><a href=\"#连接池的核心工作原理\" class=\"headerlink\" title=\"连接池的核心工作原理\"></a><strong>连接池的核心工作原理</strong></h3><ol>\n<li><strong>初始化</strong>：应用启动时，预先创建一定数量的数据库连接，放入“池”中。</li>\n<li><strong>分配连接</strong>：当应用需要操作数据库时，直接从池中获取空闲连接，无需重新建立。</li>\n<li><strong>使用后归还</strong>：操作完成后，连接被归还到池中，供后续重复使用。</li>\n<li><strong>动态调整</strong>：根据负载自动扩展或收缩连接数（如高峰期扩容，空闲时释放多余连接）。</li>\n</ol>\n<hr>\n<h3 id=\"连接池的核心优势\"><a href=\"#连接池的核心优势\" class=\"headerlink\" title=\"连接池的核心优势\"></a><strong>连接池的核心优势</strong></h3><h4 id=\"1-大幅降低连接创建开销\"><a href=\"#1-大幅降低连接创建开销\" class=\"headerlink\" title=\"1. 大幅降低连接创建开销\"></a>1. <strong>大幅降低连接创建开销</strong></h4><ul>\n<li><strong>问题</strong>：直接创建数据库连接代价高昂（涉及网络握手、身份验证、内存分配等）。</li>\n<li><strong>解决</strong>：池中连接预先创建，使用时直接复用，避免重复初始化。</li>\n</ul>\n<h4 id=\"2-提升响应速度\"><a href=\"#2-提升响应速度\" class=\"headerlink\" title=\"2. 提升响应速度\"></a>2. <strong>提升响应速度</strong></h4><ul>\n<li><strong>直接访问</strong>：从池中获取现成连接（毫秒级），而非临时创建（百毫秒级）。</li>\n<li><strong>示例</strong>：高并发场景下，复用连接可显著降低请求延迟。</li>\n</ul>\n<h4 id=\"3-资源高效复用\"><a href=\"#3-资源高效复用\" class=\"headerlink\" title=\"3. 资源高效复用\"></a>3. <strong>资源高效复用</strong></h4><ul>\n<li><strong>避免浪费</strong>：连接用完归还池中，而非直接关闭，减少频繁开关的资源损耗。</li>\n<li><strong>示例</strong>：1个连接池连接可服务100次请求，而非创建100次新连接。</li>\n</ul>\n<h4 id=\"4-防止数据库过载\"><a href=\"#4-防止数据库过载\" class=\"headerlink\" title=\"4. 防止数据库过载\"></a>4. <strong>防止数据库过载</strong></h4><ul>\n<li><strong>流量控制</strong>：通过最大连接数限制，避免突发请求压垮数据库。</li>\n<li><strong>示例</strong>：设置 <code>max=100</code>，即使有1000个并发请求，数据库实际并发连接不超过100。</li>\n</ul>\n<h4 id=\"5-统一管理连接生命周期\"><a href=\"#5-统一管理连接生命周期\" class=\"headerlink\" title=\"5. 统一管理连接生命周期\"></a>5. <strong>统一管理连接生命周期</strong></h4><ul>\n<li><strong>健康检查</strong>：自动检测失效连接（如网络中断），并重建新连接。</li>\n<li><strong>超时控制</strong>：自动回收长时间空闲的连接，防止资源泄漏。</li>\n</ul>\n<hr>\n<h3 id=\"连接池的典型应用场景\"><a href=\"#连接池的典型应用场景\" class=\"headerlink\" title=\"连接池的典型应用场景\"></a><strong>连接池的典型应用场景</strong></h3><table>\n<thead>\n<tr>\n<th>场景</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Web应用高并发</strong></td>\n<td>快速响应HTTP请求，避免频繁创建连接导致数据库瓶颈。</td>\n</tr>\n<tr>\n<td><strong>微服务架构</strong></td>\n<td>多个服务实例共享连接池，降低数据库压力。</td>\n</tr>\n<tr>\n<td><strong>批量数据处理</strong></td>\n<td>复用连接处理大量数据任务，提升吞吐量。</td>\n</tr>\n<tr>\n<td><strong>短时高频操作</strong></td>\n<td>如实时交易系统，要求毫秒级响应，连接池减少延迟。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"连接池的注意事项\"><a href=\"#连接池的注意事项\" class=\"headerlink\" title=\"连接池的注意事项\"></a><strong>连接池的注意事项</strong></h3><ol>\n<li><p><strong>合理配置参数</strong>  </p>\n<ul>\n<li><code>最小连接数</code>：避免空闲时过度释放，导致突发请求延迟。  </li>\n<li><code>最大连接数</code>：根据数据库性能和硬件资源设置，防止超限。  </li>\n<li><code>超时时间</code>：避免长时间占用连接不释放（如代码未正确归还）。</li>\n</ul>\n</li>\n<li><p><strong>连接泄漏</strong>  </p>\n<ul>\n<li>必须确保操作完成后归还连接（如 Java 的 <code>try-with-resources</code>，Python 的 <code>with</code> 语句）。</li>\n</ul>\n</li>\n<li><p><strong>兼容性</strong>  </p>\n<ul>\n<li>确保连接池与数据库版本、驱动版本兼容（如 Oracle 驱动需匹配 JDBC URL 格式）。</li>\n</ul>\n</li>\n<li><p><strong>监控与调优</strong>  </p>\n<ul>\n<li>通过日志或监控工具观察连接池状态（活跃连接数、等待队列长度等），动态调整参数。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"连接池-vs-直连数据库的对比\"><a href=\"#连接池-vs-直连数据库的对比\" class=\"headerlink\" title=\"连接池 vs 直连数据库的对比\"></a><strong>连接池 vs 直连数据库的对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>场景</strong></th>\n<th><strong>连接池</strong></th>\n<th><strong>直连数据库</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>短时高频请求</strong></td>\n<td>✅ 高效复用，延迟低</td>\n<td>❌ 频繁创建连接，性能差</td>\n</tr>\n<tr>\n<td><strong>长耗时操作</strong></td>\n<td>⚠️ 需控制单次占用时间</td>\n<td>✅ 独占连接无竞争</td>\n</tr>\n<tr>\n<td><strong>高并发</strong></td>\n<td>✅ 通过池化避免资源耗尽</td>\n<td>❌ 连接数爆炸，导致数据库崩溃</td>\n</tr>\n<tr>\n<td><strong>资源消耗</strong></td>\n<td>⚠️ 需维护池中空闲连接</td>\n<td>✅ 无额外开销（但总体资源消耗更高）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong>连接池是高性能数据库访问的基石</strong>，尤其适合高并发、短任务场景。</li>\n<li><strong>核心价值</strong>：通过复用和管理连接，提升吞吐量、降低延迟、保障稳定性。</li>\n<li><strong>正确使用</strong>：需结合业务合理配置参数，并严格管理连接的获取和释放。<br>以下是 Java 和 Python 中连接 Oracle 数据库的连接池示例代码，使用常见的连接池库实现：</li>\n</ul>\n<hr>\n<h3 id=\"Java-示例（使用-HikariCP-连接池）\"><a href=\"#Java-示例（使用-HikariCP-连接池）\" class=\"headerlink\" title=\"Java 示例（使用 HikariCP 连接池）\"></a><strong>Java 示例（使用 HikariCP 连接池）</strong></h3><h4 id=\"依赖引入（Maven）\"><a href=\"#依赖引入（Maven）\" class=\"headerlink\" title=\"依赖引入（Maven）:\"></a>依赖引入（Maven）:</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HikariCP --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zaxxer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>HikariCP<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Oracle JDBC 驱动 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.oracle.database.jdbc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ojdbc11<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>21.11.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java-连接池代码\"><a href=\"#Java-连接池代码\" class=\"headerlink\" title=\"Java 连接池代码:\"></a>Java 连接池代码:</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.zaxxer.hikari.HikariConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OracleConnectionPool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HikariDataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">HikariConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HikariConfig</span>();</span><br><span class=\"line\">        config.setJdbcUrl(<span class=\"string\">&quot;jdbc:oracle:thin:@//host:port/service_name&quot;</span>);</span><br><span class=\"line\">        config.setUsername(<span class=\"string\">&quot;your_username&quot;</span>);</span><br><span class=\"line\">        config.setPassword(<span class=\"string\">&quot;your_password&quot;</span>);</span><br><span class=\"line\">        config.setMaximumPoolSize(<span class=\"number\">10</span>);  <span class=\"comment\">// 最大连接数</span></span><br><span class=\"line\">        config.setConnectionTimeout(<span class=\"number\">30000</span>); <span class=\"comment\">// 连接超时时间（毫秒）</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 其他可选配置</span></span><br><span class=\"line\">        config.addDataSourceProperty(<span class=\"string\">&quot;cachePrepStmts&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        config.addDataSourceProperty(<span class=\"string\">&quot;prepStmtCacheSize&quot;</span>, <span class=\"string\">&quot;250&quot;</span>);</span><br><span class=\"line\">        config.addDataSourceProperty(<span class=\"string\">&quot;prepStmtCacheSqlLimit&quot;</span>, <span class=\"string\">&quot;2048&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        dataSource = <span class=\"keyword\">new</span> <span class=\"title class_\">HikariDataSource</span>(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSource.getConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> getConnection();</span><br><span class=\"line\">             <span class=\"type\">Statement</span> <span class=\"variable\">stmt</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">             <span class=\"type\">ResultSet</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> stmt.executeQuery(<span class=\"string\">&quot;SELECT 1 FROM dual&quot;</span>)) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Oracle 连接成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Python-示例（使用-cx-Oracle-内置连接池）\"><a href=\"#Python-示例（使用-cx-Oracle-内置连接池）\" class=\"headerlink\" title=\"Python 示例（使用 cx_Oracle 内置连接池）\"></a><strong>Python 示例（使用 <code>cx_Oracle</code> 内置连接池）</strong></h3><h4 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装:\"></a>依赖安装:</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install cx_Oracle</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python-连接池代码\"><a href=\"#Python-连接池代码\" class=\"headerlink\" title=\"Python 连接池代码:\"></a>Python 连接池代码:</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cx_Oracle</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Lock</span><br><span class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接池配置</span></span><br><span class=\"line\">pool = cx_Oracle.SessionPool(</span><br><span class=\"line\">    user=<span class=\"string\">&quot;your_username&quot;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&quot;your_password&quot;</span>,</span><br><span class=\"line\">    dsn=<span class=\"string\">&quot;host:port/service_name&quot;</span>,  <span class=\"comment\"># 例如: &quot;localhost:1521/orclpdb1&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">min</span>=<span class=\"number\">2</span>,        <span class=\"comment\"># 最小连接数</span></span><br><span class=\"line\">    <span class=\"built_in\">max</span>=<span class=\"number\">10</span>,       <span class=\"comment\"># 最大连接数</span></span><br><span class=\"line\">    increment=<span class=\"number\">1</span>,  <span class=\"comment\"># 每次新增连接数</span></span><br><span class=\"line\">    threaded=<span class=\"literal\">True</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程安全的连接获取（可选）</span></span><br><span class=\"line\">lock = Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@contextmanager</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_connection</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">        connection = pool.acquire()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> connection</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            pool.release(connection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用示例</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> get_connection() <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">            cursor = conn.cursor()</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;SELECT 1 FROM dual&quot;</span>)</span><br><span class=\"line\">            result = cursor.fetchone()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Oracle 连接成功！结果:&quot;</span>, result)</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;连接失败:&quot;</span>, e)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        pool.close()  <span class=\"comment\"># 关闭连接池</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键配置说明\"><a href=\"#关键配置说明\" class=\"headerlink\" title=\"关键配置说明\"></a><strong>关键配置说明</strong></h3><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>Java (HikariCP)</th>\n<th>Python (cx_Oracle)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>驱动 URL 格式</strong></td>\n<td><code>jdbc:oracle:thin:@//host:port/service_name</code></td>\n<td><code>host:port/service_name</code></td>\n</tr>\n<tr>\n<td><strong>连接池大小</strong></td>\n<td><code>setMaximumPoolSize</code></td>\n<td><code>min</code>, <code>max</code>, <code>increment</code></td>\n</tr>\n<tr>\n<td><strong>超时时间</strong></td>\n<td><code>setConnectionTimeout</code></td>\n<td>默认无，需自行处理</td>\n</tr>\n<tr>\n<td><strong>线程安全</strong></td>\n<td>自动处理</td>\n<td>需手动加锁（如多线程环境）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a><strong>注意事项</strong></h3><ol>\n<li><p><strong>Oracle JDBC URL</strong>  </p>\n<ul>\n<li>使用服务名（推荐）：<code>jdbc:oracle:thin:@//host:port/service_name</code>  </li>\n<li>使用 SID（旧格式）：<code>jdbc:oracle:thin:@host:port:sid</code></li>\n</ul>\n</li>\n<li><p><strong>Python 驱动</strong>  </p>\n<ul>\n<li>推荐使用 <code>cx_Oracle</code> 最新版本（需安装 Oracle Instant Client 或完整客户端）。</li>\n</ul>\n</li>\n<li><p><strong>资源释放</strong>  </p>\n<ul>\n<li>Java 中通过 <code>try-with-resources</code> 自动关闭连接。  </li>\n<li>Python 使用 <code>with</code> 上下文管理器确保释放。</li>\n</ul>\n</li>\n<li><p><strong>连接泄漏</strong>  </p>\n<ul>\n<li>确保所有连接在使用后正确关闭（尤其是异常场景）。</li>\n</ul>\n</li>\n<li><p><strong>Oracle 版本兼容性</strong>  </p>\n<ul>\n<li>确认 JDBC 驱动或 Python 驱动版本与 Oracle 数据库版本匹配。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>如果需要其他连接池实现（如 Java 的 <code>DBCP</code> 或 Python 的 <code>SQLAlchemy</code>），可进一步补充说明！</p>\n","excerpt":"","more":"<hr>\n<p><strong>连接池（Connection Pool）</strong> 是一种管理和复用数据库连接的技术，其核心思想是预先创建并维护一组可重复使用的数据库连接，供应用程序按需取用和归还。它是高并发、高性能数据库访问的关键优化手段。</p>\n<hr>\n<h3 id=\"连接池的核心工作原理\"><a href=\"#连接池的核心工作原理\" class=\"headerlink\" title=\"连接池的核心工作原理\"></a><strong>连接池的核心工作原理</strong></h3><ol>\n<li><strong>初始化</strong>：应用启动时，预先创建一定数量的数据库连接，放入“池”中。</li>\n<li><strong>分配连接</strong>：当应用需要操作数据库时，直接从池中获取空闲连接，无需重新建立。</li>\n<li><strong>使用后归还</strong>：操作完成后，连接被归还到池中，供后续重复使用。</li>\n<li><strong>动态调整</strong>：根据负载自动扩展或收缩连接数（如高峰期扩容，空闲时释放多余连接）。</li>\n</ol>\n<hr>\n<h3 id=\"连接池的核心优势\"><a href=\"#连接池的核心优势\" class=\"headerlink\" title=\"连接池的核心优势\"></a><strong>连接池的核心优势</strong></h3><h4 id=\"1-大幅降低连接创建开销\"><a href=\"#1-大幅降低连接创建开销\" class=\"headerlink\" title=\"1. 大幅降低连接创建开销\"></a>1. <strong>大幅降低连接创建开销</strong></h4><ul>\n<li><strong>问题</strong>：直接创建数据库连接代价高昂（涉及网络握手、身份验证、内存分配等）。</li>\n<li><strong>解决</strong>：池中连接预先创建，使用时直接复用，避免重复初始化。</li>\n</ul>\n<h4 id=\"2-提升响应速度\"><a href=\"#2-提升响应速度\" class=\"headerlink\" title=\"2. 提升响应速度\"></a>2. <strong>提升响应速度</strong></h4><ul>\n<li><strong>直接访问</strong>：从池中获取现成连接（毫秒级），而非临时创建（百毫秒级）。</li>\n<li><strong>示例</strong>：高并发场景下，复用连接可显著降低请求延迟。</li>\n</ul>\n<h4 id=\"3-资源高效复用\"><a href=\"#3-资源高效复用\" class=\"headerlink\" title=\"3. 资源高效复用\"></a>3. <strong>资源高效复用</strong></h4><ul>\n<li><strong>避免浪费</strong>：连接用完归还池中，而非直接关闭，减少频繁开关的资源损耗。</li>\n<li><strong>示例</strong>：1个连接池连接可服务100次请求，而非创建100次新连接。</li>\n</ul>\n<h4 id=\"4-防止数据库过载\"><a href=\"#4-防止数据库过载\" class=\"headerlink\" title=\"4. 防止数据库过载\"></a>4. <strong>防止数据库过载</strong></h4><ul>\n<li><strong>流量控制</strong>：通过最大连接数限制，避免突发请求压垮数据库。</li>\n<li><strong>示例</strong>：设置 <code>max=100</code>，即使有1000个并发请求，数据库实际并发连接不超过100。</li>\n</ul>\n<h4 id=\"5-统一管理连接生命周期\"><a href=\"#5-统一管理连接生命周期\" class=\"headerlink\" title=\"5. 统一管理连接生命周期\"></a>5. <strong>统一管理连接生命周期</strong></h4><ul>\n<li><strong>健康检查</strong>：自动检测失效连接（如网络中断），并重建新连接。</li>\n<li><strong>超时控制</strong>：自动回收长时间空闲的连接，防止资源泄漏。</li>\n</ul>\n<hr>\n<h3 id=\"连接池的典型应用场景\"><a href=\"#连接池的典型应用场景\" class=\"headerlink\" title=\"连接池的典型应用场景\"></a><strong>连接池的典型应用场景</strong></h3><table>\n<thead>\n<tr>\n<th>场景</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Web应用高并发</strong></td>\n<td>快速响应HTTP请求，避免频繁创建连接导致数据库瓶颈。</td>\n</tr>\n<tr>\n<td><strong>微服务架构</strong></td>\n<td>多个服务实例共享连接池，降低数据库压力。</td>\n</tr>\n<tr>\n<td><strong>批量数据处理</strong></td>\n<td>复用连接处理大量数据任务，提升吞吐量。</td>\n</tr>\n<tr>\n<td><strong>短时高频操作</strong></td>\n<td>如实时交易系统，要求毫秒级响应，连接池减少延迟。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"连接池的注意事项\"><a href=\"#连接池的注意事项\" class=\"headerlink\" title=\"连接池的注意事项\"></a><strong>连接池的注意事项</strong></h3><ol>\n<li><p><strong>合理配置参数</strong>  </p>\n<ul>\n<li><code>最小连接数</code>：避免空闲时过度释放，导致突发请求延迟。  </li>\n<li><code>最大连接数</code>：根据数据库性能和硬件资源设置，防止超限。  </li>\n<li><code>超时时间</code>：避免长时间占用连接不释放（如代码未正确归还）。</li>\n</ul>\n</li>\n<li><p><strong>连接泄漏</strong>  </p>\n<ul>\n<li>必须确保操作完成后归还连接（如 Java 的 <code>try-with-resources</code>，Python 的 <code>with</code> 语句）。</li>\n</ul>\n</li>\n<li><p><strong>兼容性</strong>  </p>\n<ul>\n<li>确保连接池与数据库版本、驱动版本兼容（如 Oracle 驱动需匹配 JDBC URL 格式）。</li>\n</ul>\n</li>\n<li><p><strong>监控与调优</strong>  </p>\n<ul>\n<li>通过日志或监控工具观察连接池状态（活跃连接数、等待队列长度等），动态调整参数。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"连接池-vs-直连数据库的对比\"><a href=\"#连接池-vs-直连数据库的对比\" class=\"headerlink\" title=\"连接池 vs 直连数据库的对比\"></a><strong>连接池 vs 直连数据库的对比</strong></h3><table>\n<thead>\n<tr>\n<th><strong>场景</strong></th>\n<th><strong>连接池</strong></th>\n<th><strong>直连数据库</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>短时高频请求</strong></td>\n<td>✅ 高效复用，延迟低</td>\n<td>❌ 频繁创建连接，性能差</td>\n</tr>\n<tr>\n<td><strong>长耗时操作</strong></td>\n<td>⚠️ 需控制单次占用时间</td>\n<td>✅ 独占连接无竞争</td>\n</tr>\n<tr>\n<td><strong>高并发</strong></td>\n<td>✅ 通过池化避免资源耗尽</td>\n<td>❌ 连接数爆炸，导致数据库崩溃</td>\n</tr>\n<tr>\n<td><strong>资源消耗</strong></td>\n<td>⚠️ 需维护池中空闲连接</td>\n<td>✅ 无额外开销（但总体资源消耗更高）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong>连接池是高性能数据库访问的基石</strong>，尤其适合高并发、短任务场景。</li>\n<li><strong>核心价值</strong>：通过复用和管理连接，提升吞吐量、降低延迟、保障稳定性。</li>\n<li><strong>正确使用</strong>：需结合业务合理配置参数，并严格管理连接的获取和释放。<br>以下是 Java 和 Python 中连接 Oracle 数据库的连接池示例代码，使用常见的连接池库实现：</li>\n</ul>\n<hr>\n<h3 id=\"Java-示例（使用-HikariCP-连接池）\"><a href=\"#Java-示例（使用-HikariCP-连接池）\" class=\"headerlink\" title=\"Java 示例（使用 HikariCP 连接池）\"></a><strong>Java 示例（使用 HikariCP 连接池）</strong></h3><h4 id=\"依赖引入（Maven）\"><a href=\"#依赖引入（Maven）\" class=\"headerlink\" title=\"依赖引入（Maven）:\"></a>依赖引入（Maven）:</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HikariCP --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zaxxer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>HikariCP<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Oracle JDBC 驱动 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.oracle.database.jdbc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ojdbc11<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>21.11.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java-连接池代码\"><a href=\"#Java-连接池代码\" class=\"headerlink\" title=\"Java 连接池代码:\"></a>Java 连接池代码:</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.zaxxer.hikari.HikariConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OracleConnectionPool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HikariDataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">HikariConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HikariConfig</span>();</span><br><span class=\"line\">        config.setJdbcUrl(<span class=\"string\">&quot;jdbc:oracle:thin:@//host:port/service_name&quot;</span>);</span><br><span class=\"line\">        config.setUsername(<span class=\"string\">&quot;your_username&quot;</span>);</span><br><span class=\"line\">        config.setPassword(<span class=\"string\">&quot;your_password&quot;</span>);</span><br><span class=\"line\">        config.setMaximumPoolSize(<span class=\"number\">10</span>);  <span class=\"comment\">// 最大连接数</span></span><br><span class=\"line\">        config.setConnectionTimeout(<span class=\"number\">30000</span>); <span class=\"comment\">// 连接超时时间（毫秒）</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 其他可选配置</span></span><br><span class=\"line\">        config.addDataSourceProperty(<span class=\"string\">&quot;cachePrepStmts&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        config.addDataSourceProperty(<span class=\"string\">&quot;prepStmtCacheSize&quot;</span>, <span class=\"string\">&quot;250&quot;</span>);</span><br><span class=\"line\">        config.addDataSourceProperty(<span class=\"string\">&quot;prepStmtCacheSqlLimit&quot;</span>, <span class=\"string\">&quot;2048&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        dataSource = <span class=\"keyword\">new</span> <span class=\"title class_\">HikariDataSource</span>(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSource.getConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> getConnection();</span><br><span class=\"line\">             <span class=\"type\">Statement</span> <span class=\"variable\">stmt</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">             <span class=\"type\">ResultSet</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> stmt.executeQuery(<span class=\"string\">&quot;SELECT 1 FROM dual&quot;</span>)) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Oracle 连接成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Python-示例（使用-cx-Oracle-内置连接池）\"><a href=\"#Python-示例（使用-cx-Oracle-内置连接池）\" class=\"headerlink\" title=\"Python 示例（使用 cx_Oracle 内置连接池）\"></a><strong>Python 示例（使用 <code>cx_Oracle</code> 内置连接池）</strong></h3><h4 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装:\"></a>依赖安装:</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install cx_Oracle</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Python-连接池代码\"><a href=\"#Python-连接池代码\" class=\"headerlink\" title=\"Python 连接池代码:\"></a>Python 连接池代码:</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cx_Oracle</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Lock</span><br><span class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接池配置</span></span><br><span class=\"line\">pool = cx_Oracle.SessionPool(</span><br><span class=\"line\">    user=<span class=\"string\">&quot;your_username&quot;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&quot;your_password&quot;</span>,</span><br><span class=\"line\">    dsn=<span class=\"string\">&quot;host:port/service_name&quot;</span>,  <span class=\"comment\"># 例如: &quot;localhost:1521/orclpdb1&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">min</span>=<span class=\"number\">2</span>,        <span class=\"comment\"># 最小连接数</span></span><br><span class=\"line\">    <span class=\"built_in\">max</span>=<span class=\"number\">10</span>,       <span class=\"comment\"># 最大连接数</span></span><br><span class=\"line\">    increment=<span class=\"number\">1</span>,  <span class=\"comment\"># 每次新增连接数</span></span><br><span class=\"line\">    threaded=<span class=\"literal\">True</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程安全的连接获取（可选）</span></span><br><span class=\"line\">lock = Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@contextmanager</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_connection</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">        connection = pool.acquire()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> connection</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            pool.release(connection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用示例</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> get_connection() <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">            cursor = conn.cursor()</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;SELECT 1 FROM dual&quot;</span>)</span><br><span class=\"line\">            result = cursor.fetchone()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Oracle 连接成功！结果:&quot;</span>, result)</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;连接失败:&quot;</span>, e)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        pool.close()  <span class=\"comment\"># 关闭连接池</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键配置说明\"><a href=\"#关键配置说明\" class=\"headerlink\" title=\"关键配置说明\"></a><strong>关键配置说明</strong></h3><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>Java (HikariCP)</th>\n<th>Python (cx_Oracle)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>驱动 URL 格式</strong></td>\n<td><code>jdbc:oracle:thin:@//host:port/service_name</code></td>\n<td><code>host:port/service_name</code></td>\n</tr>\n<tr>\n<td><strong>连接池大小</strong></td>\n<td><code>setMaximumPoolSize</code></td>\n<td><code>min</code>, <code>max</code>, <code>increment</code></td>\n</tr>\n<tr>\n<td><strong>超时时间</strong></td>\n<td><code>setConnectionTimeout</code></td>\n<td>默认无，需自行处理</td>\n</tr>\n<tr>\n<td><strong>线程安全</strong></td>\n<td>自动处理</td>\n<td>需手动加锁（如多线程环境）</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a><strong>注意事项</strong></h3><ol>\n<li><p><strong>Oracle JDBC URL</strong>  </p>\n<ul>\n<li>使用服务名（推荐）：<code>jdbc:oracle:thin:@//host:port/service_name</code>  </li>\n<li>使用 SID（旧格式）：<code>jdbc:oracle:thin:@host:port:sid</code></li>\n</ul>\n</li>\n<li><p><strong>Python 驱动</strong>  </p>\n<ul>\n<li>推荐使用 <code>cx_Oracle</code> 最新版本（需安装 Oracle Instant Client 或完整客户端）。</li>\n</ul>\n</li>\n<li><p><strong>资源释放</strong>  </p>\n<ul>\n<li>Java 中通过 <code>try-with-resources</code> 自动关闭连接。  </li>\n<li>Python 使用 <code>with</code> 上下文管理器确保释放。</li>\n</ul>\n</li>\n<li><p><strong>连接泄漏</strong>  </p>\n<ul>\n<li>确保所有连接在使用后正确关闭（尤其是异常场景）。</li>\n</ul>\n</li>\n<li><p><strong>Oracle 版本兼容性</strong>  </p>\n<ul>\n<li>确认 JDBC 驱动或 Python 驱动版本与 Oracle 数据库版本匹配。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>如果需要其他连接池实现（如 Java 的 <code>DBCP</code> 或 Python 的 <code>SQLAlchemy</code>），可进一步补充说明！</p>\n"},{"title":"oracle学习笔记-队列（Sequence）","date":"2025-04-13T08:56:42.000Z","updated":"2025-04-13T08:56:42.000Z","keywords":["oracle","Sequence","队列"],"description":null,"_content":"Oracle 中的 **Sequence（序列）** 是一个数据库对象，用于生成唯一的、递增（或递减）的数值序列。它通常用于为表的主键字段自动生成唯一值（如自增ID），避免手动管理主键的复杂性。\n\n---\n\n### **Sequence 的核心特点**\n1. **唯一性**：保证生成的数值全局唯一。\n2. **高性能**：通过缓存机制减少磁盘I/O，提升生成效率。\n3. **独立性**：不依赖表，多个表可共享同一个序列。\n4. **可配置性**：可定义起始值、步长、循环等规则。\n\n---\n\n### **Sequence 的创建语法**\n```sql\nCREATE SEQUENCE sequence_name\n  [START WITH n]         -- 起始值（默认 1）\n  [INCREMENT BY n]       -- 步长（默认 1，可为负数）\n  [MINVALUE n | NOMINVALUE]  -- 最小值\n  [MAXVALUE n | NOMAXVALUE]  -- 最大值\n  [CACHE n | NOCACHE]    -- 缓存值数量（默认 20，提升性能）\n  [CYCLE | NOCYCLE]      -- 是否循环（达到极值后是否重置）\n  [ORDER | NOORDER];     -- 是否保证顺序（多实例环境下）\n```\n\n---\n\n### **示例：创建一个简单序列**\n```sql\nCREATE SEQUENCE employee_id_seq\n  START WITH 1000\n  INCREMENT BY 1\n  NOCACHE\n  NOCYCLE;\n```\n\n---\n\n### **Sequence 的常用操作**\n#### 1. **获取下一个值**\n使用 `NEXTVAL` 生成下一个值：\n```sql\nSELECT employee_id_seq.NEXTVAL FROM dual; -- 返回 1000, 1001, 1002...\n```\n\n#### 2. **获取当前值**\n使用 `CURRVAL` 查看当前值（需在当前会话中已调用过 `NEXTVAL`）：\n```sql\nSELECT employee_id_seq.CURRVAL FROM dual;\n```\n\n#### 3. **在插入语句中使用**\n```sql\nINSERT INTO employees (id, name) \nVALUES (employee_id_seq.NEXTVAL, 'John Doe');\n```\n\n#### 4. **修改序列**\n使用 `ALTER SEQUENCE`（不能修改起始值，需删除重建）：\n```sql\nALTER SEQUENCE employee_id_seq \n  INCREMENT BY 2\n  MAXVALUE 9999;\n```\n\n#### 5. **删除序列**\n```sql\nDROP SEQUENCE employee_id_seq;\n```\n\n---\n\n### **关键注意事项**\n1. **缓存机制（CACHE）**  \n   - 使用缓存（如 `CACHE 20`）可提升性能，但数据库异常关闭可能导致缓存值丢失，导致序列出现间隙。\n   - `NOCACHE` 保证无间隙，但性能较低。\n\n2. **并发安全**  \n   - 多个会话同时调用 `NEXTVAL` 时，每个会话会获取唯一值，无冲突。\n\n3. **循环（CYCLE）**  \n   - 当序列达到极值（如 `MAXVALUE`）后，若启用 `CYCLE`，会重置到 `MINVALUE`。\n\n4. **与表的关联**  \n   - 序列独立于表，需手动绑定到字段（如通过触发器或插入语句）。\n\n---\n\n### **实际应用场景**\n#### 1. **自增主键**\n```sql\n-- 创建表\nCREATE TABLE employees (\n  id NUMBER PRIMARY KEY,\n  name VARCHAR2(50)\n);\n\n-- 插入数据时使用序列\nINSERT INTO employees (id, name) \nVALUES (employee_id_seq.NEXTVAL, 'Jane Smith');\n```\n\n#### 2. **替代触发器（Oracle 12c+）**\nOracle 12c 支持 `IDENTITY` 列自动生成序列，简化操作：\n```sql\nCREATE TABLE employees (\n  id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n  name VARCHAR2(50)\n);\n```\n\n---\n\n### **总结**\n- **适用场景**：主键生成、唯一编号生成（如订单号）。\n- **优点**：高效、简单、并发安全。\n- **缺点**：可能产生间隙（如事务回滚、缓存丢失时）。\n\n合理配置 `CACHE`、`CYCLE` 等参数，结合业务需求选择是否使用序列。","source":"_posts/oracle学习笔记-队列（Sequence）/oracle学习笔记-队列（Sequence）.md","raw":"---\ntitle: oracle学习笔记-队列（Sequence）\ndate: 2025-04-13 16:56:42\nupdated: 2025-04-13 16:56:42\ntags:\n - oracle\ncategories:\n - 技术\n - oracle\nkeywords:\n - oracle\n - Sequence\n - 队列\ndescription:\n---\nOracle 中的 **Sequence（序列）** 是一个数据库对象，用于生成唯一的、递增（或递减）的数值序列。它通常用于为表的主键字段自动生成唯一值（如自增ID），避免手动管理主键的复杂性。\n\n---\n\n### **Sequence 的核心特点**\n1. **唯一性**：保证生成的数值全局唯一。\n2. **高性能**：通过缓存机制减少磁盘I/O，提升生成效率。\n3. **独立性**：不依赖表，多个表可共享同一个序列。\n4. **可配置性**：可定义起始值、步长、循环等规则。\n\n---\n\n### **Sequence 的创建语法**\n```sql\nCREATE SEQUENCE sequence_name\n  [START WITH n]         -- 起始值（默认 1）\n  [INCREMENT BY n]       -- 步长（默认 1，可为负数）\n  [MINVALUE n | NOMINVALUE]  -- 最小值\n  [MAXVALUE n | NOMAXVALUE]  -- 最大值\n  [CACHE n | NOCACHE]    -- 缓存值数量（默认 20，提升性能）\n  [CYCLE | NOCYCLE]      -- 是否循环（达到极值后是否重置）\n  [ORDER | NOORDER];     -- 是否保证顺序（多实例环境下）\n```\n\n---\n\n### **示例：创建一个简单序列**\n```sql\nCREATE SEQUENCE employee_id_seq\n  START WITH 1000\n  INCREMENT BY 1\n  NOCACHE\n  NOCYCLE;\n```\n\n---\n\n### **Sequence 的常用操作**\n#### 1. **获取下一个值**\n使用 `NEXTVAL` 生成下一个值：\n```sql\nSELECT employee_id_seq.NEXTVAL FROM dual; -- 返回 1000, 1001, 1002...\n```\n\n#### 2. **获取当前值**\n使用 `CURRVAL` 查看当前值（需在当前会话中已调用过 `NEXTVAL`）：\n```sql\nSELECT employee_id_seq.CURRVAL FROM dual;\n```\n\n#### 3. **在插入语句中使用**\n```sql\nINSERT INTO employees (id, name) \nVALUES (employee_id_seq.NEXTVAL, 'John Doe');\n```\n\n#### 4. **修改序列**\n使用 `ALTER SEQUENCE`（不能修改起始值，需删除重建）：\n```sql\nALTER SEQUENCE employee_id_seq \n  INCREMENT BY 2\n  MAXVALUE 9999;\n```\n\n#### 5. **删除序列**\n```sql\nDROP SEQUENCE employee_id_seq;\n```\n\n---\n\n### **关键注意事项**\n1. **缓存机制（CACHE）**  \n   - 使用缓存（如 `CACHE 20`）可提升性能，但数据库异常关闭可能导致缓存值丢失，导致序列出现间隙。\n   - `NOCACHE` 保证无间隙，但性能较低。\n\n2. **并发安全**  \n   - 多个会话同时调用 `NEXTVAL` 时，每个会话会获取唯一值，无冲突。\n\n3. **循环（CYCLE）**  \n   - 当序列达到极值（如 `MAXVALUE`）后，若启用 `CYCLE`，会重置到 `MINVALUE`。\n\n4. **与表的关联**  \n   - 序列独立于表，需手动绑定到字段（如通过触发器或插入语句）。\n\n---\n\n### **实际应用场景**\n#### 1. **自增主键**\n```sql\n-- 创建表\nCREATE TABLE employees (\n  id NUMBER PRIMARY KEY,\n  name VARCHAR2(50)\n);\n\n-- 插入数据时使用序列\nINSERT INTO employees (id, name) \nVALUES (employee_id_seq.NEXTVAL, 'Jane Smith');\n```\n\n#### 2. **替代触发器（Oracle 12c+）**\nOracle 12c 支持 `IDENTITY` 列自动生成序列，简化操作：\n```sql\nCREATE TABLE employees (\n  id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n  name VARCHAR2(50)\n);\n```\n\n---\n\n### **总结**\n- **适用场景**：主键生成、唯一编号生成（如订单号）。\n- **优点**：高效、简单、并发安全。\n- **缺点**：可能产生间隙（如事务回滚、缓存丢失时）。\n\n合理配置 `CACHE`、`CYCLE` 等参数，结合业务需求选择是否使用序列。","slug":"oracle学习笔记-队列（Sequence）/oracle学习笔记-队列（Sequence）","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb20019x4gr8ta5ak1k","content":"<p>Oracle 中的 <strong>Sequence（序列）</strong> 是一个数据库对象，用于生成唯一的、递增（或递减）的数值序列。它通常用于为表的主键字段自动生成唯一值（如自增ID），避免手动管理主键的复杂性。</p>\n<hr>\n<h3 id=\"Sequence-的核心特点\"><a href=\"#Sequence-的核心特点\" class=\"headerlink\" title=\"Sequence 的核心特点\"></a><strong>Sequence 的核心特点</strong></h3><ol>\n<li><strong>唯一性</strong>：保证生成的数值全局唯一。</li>\n<li><strong>高性能</strong>：通过缓存机制减少磁盘I&#x2F;O，提升生成效率。</li>\n<li><strong>独立性</strong>：不依赖表，多个表可共享同一个序列。</li>\n<li><strong>可配置性</strong>：可定义起始值、步长、循环等规则。</li>\n</ol>\n<hr>\n<h3 id=\"Sequence-的创建语法\"><a href=\"#Sequence-的创建语法\" class=\"headerlink\" title=\"Sequence 的创建语法\"></a><strong>Sequence 的创建语法</strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE sequence_name</span><br><span class=\"line\">  [<span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> n]         <span class=\"comment\">-- 起始值（默认 1）</span></span><br><span class=\"line\">  [INCREMENT <span class=\"keyword\">BY</span> n]       <span class=\"comment\">-- 步长（默认 1，可为负数）</span></span><br><span class=\"line\">  [MINVALUE n <span class=\"operator\">|</span> NOMINVALUE]  <span class=\"comment\">-- 最小值</span></span><br><span class=\"line\">  [MAXVALUE n <span class=\"operator\">|</span> NOMAXVALUE]  <span class=\"comment\">-- 最大值</span></span><br><span class=\"line\">  [CACHE n <span class=\"operator\">|</span> NOCACHE]    <span class=\"comment\">-- 缓存值数量（默认 20，提升性能）</span></span><br><span class=\"line\">  [<span class=\"keyword\">CYCLE</span> <span class=\"operator\">|</span> NOCYCLE]      <span class=\"comment\">-- 是否循环（达到极值后是否重置）</span></span><br><span class=\"line\">  [<span class=\"keyword\">ORDER</span> <span class=\"operator\">|</span> NOORDER];     <span class=\"comment\">-- 是否保证顺序（多实例环境下）</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"示例：创建一个简单序列\"><a href=\"#示例：创建一个简单序列\" class=\"headerlink\" title=\"示例：创建一个简单序列\"></a><strong>示例：创建一个简单序列</strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE employee_id_seq</span><br><span class=\"line\">  <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">1</span></span><br><span class=\"line\">  NOCACHE</span><br><span class=\"line\">  NOCYCLE;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Sequence-的常用操作\"><a href=\"#Sequence-的常用操作\" class=\"headerlink\" title=\"Sequence 的常用操作\"></a><strong>Sequence 的常用操作</strong></h3><h4 id=\"1-获取下一个值\"><a href=\"#1-获取下一个值\" class=\"headerlink\" title=\"1. 获取下一个值\"></a>1. <strong>获取下一个值</strong></h4><p>使用 <code>NEXTVAL</code> 生成下一个值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> employee_id_seq.NEXTVAL <span class=\"keyword\">FROM</span> dual; <span class=\"comment\">-- 返回 1000, 1001, 1002...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-获取当前值\"><a href=\"#2-获取当前值\" class=\"headerlink\" title=\"2. 获取当前值\"></a>2. <strong>获取当前值</strong></h4><p>使用 <code>CURRVAL</code> 查看当前值（需在当前会话中已调用过 <code>NEXTVAL</code>）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> employee_id_seq.CURRVAL <span class=\"keyword\">FROM</span> dual;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-在插入语句中使用\"><a href=\"#3-在插入语句中使用\" class=\"headerlink\" title=\"3. 在插入语句中使用\"></a>3. <strong>在插入语句中使用</strong></h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employees (id, name) </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (employee_id_seq.NEXTVAL, <span class=\"string\">&#x27;John Doe&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-修改序列\"><a href=\"#4-修改序列\" class=\"headerlink\" title=\"4. 修改序列\"></a>4. <strong>修改序列</strong></h4><p>使用 <code>ALTER SEQUENCE</code>（不能修改起始值，需删除重建）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> SEQUENCE employee_id_seq </span><br><span class=\"line\">  INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">2</span></span><br><span class=\"line\">  MAXVALUE <span class=\"number\">9999</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-删除序列\"><a href=\"#5-删除序列\" class=\"headerlink\" title=\"5. 删除序列\"></a>5. <strong>删除序列</strong></h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> SEQUENCE employee_id_seq;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键注意事项\"><a href=\"#关键注意事项\" class=\"headerlink\" title=\"关键注意事项\"></a><strong>关键注意事项</strong></h3><ol>\n<li><p><strong>缓存机制（CACHE）</strong>  </p>\n<ul>\n<li>使用缓存（如 <code>CACHE 20</code>）可提升性能，但数据库异常关闭可能导致缓存值丢失，导致序列出现间隙。</li>\n<li><code>NOCACHE</code> 保证无间隙，但性能较低。</li>\n</ul>\n</li>\n<li><p><strong>并发安全</strong>  </p>\n<ul>\n<li>多个会话同时调用 <code>NEXTVAL</code> 时，每个会话会获取唯一值，无冲突。</li>\n</ul>\n</li>\n<li><p><strong>循环（CYCLE）</strong>  </p>\n<ul>\n<li>当序列达到极值（如 <code>MAXVALUE</code>）后，若启用 <code>CYCLE</code>，会重置到 <code>MINVALUE</code>。</li>\n</ul>\n</li>\n<li><p><strong>与表的关联</strong>  </p>\n<ul>\n<li>序列独立于表，需手动绑定到字段（如通过触发器或插入语句）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a><strong>实际应用场景</strong></h3><h4 id=\"1-自增主键\"><a href=\"#1-自增主键\" class=\"headerlink\" title=\"1. 自增主键\"></a>1. <strong>自增主键</strong></h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employees (</span><br><span class=\"line\">  id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据时使用序列</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employees (id, name) </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (employee_id_seq.NEXTVAL, <span class=\"string\">&#x27;Jane Smith&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-替代触发器（Oracle-12c-）\"><a href=\"#2-替代触发器（Oracle-12c-）\" class=\"headerlink\" title=\"2. 替代触发器（Oracle 12c+）\"></a>2. <strong>替代触发器（Oracle 12c+）</strong></h4><p>Oracle 12c 支持 <code>IDENTITY</code> 列自动生成序列，简化操作：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employees (</span><br><span class=\"line\">  id NUMBER GENERATED ALWAYS <span class=\"keyword\">AS</span> <span class=\"keyword\">IDENTITY</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong>适用场景</strong>：主键生成、唯一编号生成（如订单号）。</li>\n<li><strong>优点</strong>：高效、简单、并发安全。</li>\n<li><strong>缺点</strong>：可能产生间隙（如事务回滚、缓存丢失时）。</li>\n</ul>\n<p>合理配置 <code>CACHE</code>、<code>CYCLE</code> 等参数，结合业务需求选择是否使用序列。</p>\n","excerpt":"","more":"<p>Oracle 中的 <strong>Sequence（序列）</strong> 是一个数据库对象，用于生成唯一的、递增（或递减）的数值序列。它通常用于为表的主键字段自动生成唯一值（如自增ID），避免手动管理主键的复杂性。</p>\n<hr>\n<h3 id=\"Sequence-的核心特点\"><a href=\"#Sequence-的核心特点\" class=\"headerlink\" title=\"Sequence 的核心特点\"></a><strong>Sequence 的核心特点</strong></h3><ol>\n<li><strong>唯一性</strong>：保证生成的数值全局唯一。</li>\n<li><strong>高性能</strong>：通过缓存机制减少磁盘I&#x2F;O，提升生成效率。</li>\n<li><strong>独立性</strong>：不依赖表，多个表可共享同一个序列。</li>\n<li><strong>可配置性</strong>：可定义起始值、步长、循环等规则。</li>\n</ol>\n<hr>\n<h3 id=\"Sequence-的创建语法\"><a href=\"#Sequence-的创建语法\" class=\"headerlink\" title=\"Sequence 的创建语法\"></a><strong>Sequence 的创建语法</strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE sequence_name</span><br><span class=\"line\">  [<span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> n]         <span class=\"comment\">-- 起始值（默认 1）</span></span><br><span class=\"line\">  [INCREMENT <span class=\"keyword\">BY</span> n]       <span class=\"comment\">-- 步长（默认 1，可为负数）</span></span><br><span class=\"line\">  [MINVALUE n <span class=\"operator\">|</span> NOMINVALUE]  <span class=\"comment\">-- 最小值</span></span><br><span class=\"line\">  [MAXVALUE n <span class=\"operator\">|</span> NOMAXVALUE]  <span class=\"comment\">-- 最大值</span></span><br><span class=\"line\">  [CACHE n <span class=\"operator\">|</span> NOCACHE]    <span class=\"comment\">-- 缓存值数量（默认 20，提升性能）</span></span><br><span class=\"line\">  [<span class=\"keyword\">CYCLE</span> <span class=\"operator\">|</span> NOCYCLE]      <span class=\"comment\">-- 是否循环（达到极值后是否重置）</span></span><br><span class=\"line\">  [<span class=\"keyword\">ORDER</span> <span class=\"operator\">|</span> NOORDER];     <span class=\"comment\">-- 是否保证顺序（多实例环境下）</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"示例：创建一个简单序列\"><a href=\"#示例：创建一个简单序列\" class=\"headerlink\" title=\"示例：创建一个简单序列\"></a><strong>示例：创建一个简单序列</strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SEQUENCE employee_id_seq</span><br><span class=\"line\">  <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">1</span></span><br><span class=\"line\">  NOCACHE</span><br><span class=\"line\">  NOCYCLE;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Sequence-的常用操作\"><a href=\"#Sequence-的常用操作\" class=\"headerlink\" title=\"Sequence 的常用操作\"></a><strong>Sequence 的常用操作</strong></h3><h4 id=\"1-获取下一个值\"><a href=\"#1-获取下一个值\" class=\"headerlink\" title=\"1. 获取下一个值\"></a>1. <strong>获取下一个值</strong></h4><p>使用 <code>NEXTVAL</code> 生成下一个值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> employee_id_seq.NEXTVAL <span class=\"keyword\">FROM</span> dual; <span class=\"comment\">-- 返回 1000, 1001, 1002...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-获取当前值\"><a href=\"#2-获取当前值\" class=\"headerlink\" title=\"2. 获取当前值\"></a>2. <strong>获取当前值</strong></h4><p>使用 <code>CURRVAL</code> 查看当前值（需在当前会话中已调用过 <code>NEXTVAL</code>）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> employee_id_seq.CURRVAL <span class=\"keyword\">FROM</span> dual;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-在插入语句中使用\"><a href=\"#3-在插入语句中使用\" class=\"headerlink\" title=\"3. 在插入语句中使用\"></a>3. <strong>在插入语句中使用</strong></h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employees (id, name) </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (employee_id_seq.NEXTVAL, <span class=\"string\">&#x27;John Doe&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-修改序列\"><a href=\"#4-修改序列\" class=\"headerlink\" title=\"4. 修改序列\"></a>4. <strong>修改序列</strong></h4><p>使用 <code>ALTER SEQUENCE</code>（不能修改起始值，需删除重建）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> SEQUENCE employee_id_seq </span><br><span class=\"line\">  INCREMENT <span class=\"keyword\">BY</span> <span class=\"number\">2</span></span><br><span class=\"line\">  MAXVALUE <span class=\"number\">9999</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-删除序列\"><a href=\"#5-删除序列\" class=\"headerlink\" title=\"5. 删除序列\"></a>5. <strong>删除序列</strong></h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> SEQUENCE employee_id_seq;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键注意事项\"><a href=\"#关键注意事项\" class=\"headerlink\" title=\"关键注意事项\"></a><strong>关键注意事项</strong></h3><ol>\n<li><p><strong>缓存机制（CACHE）</strong>  </p>\n<ul>\n<li>使用缓存（如 <code>CACHE 20</code>）可提升性能，但数据库异常关闭可能导致缓存值丢失，导致序列出现间隙。</li>\n<li><code>NOCACHE</code> 保证无间隙，但性能较低。</li>\n</ul>\n</li>\n<li><p><strong>并发安全</strong>  </p>\n<ul>\n<li>多个会话同时调用 <code>NEXTVAL</code> 时，每个会话会获取唯一值，无冲突。</li>\n</ul>\n</li>\n<li><p><strong>循环（CYCLE）</strong>  </p>\n<ul>\n<li>当序列达到极值（如 <code>MAXVALUE</code>）后，若启用 <code>CYCLE</code>，会重置到 <code>MINVALUE</code>。</li>\n</ul>\n</li>\n<li><p><strong>与表的关联</strong>  </p>\n<ul>\n<li>序列独立于表，需手动绑定到字段（如通过触发器或插入语句）。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a><strong>实际应用场景</strong></h3><h4 id=\"1-自增主键\"><a href=\"#1-自增主键\" class=\"headerlink\" title=\"1. 自增主键\"></a>1. <strong>自增主键</strong></h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employees (</span><br><span class=\"line\">  id NUMBER <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据时使用序列</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employees (id, name) </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (employee_id_seq.NEXTVAL, <span class=\"string\">&#x27;Jane Smith&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-替代触发器（Oracle-12c-）\"><a href=\"#2-替代触发器（Oracle-12c-）\" class=\"headerlink\" title=\"2. 替代触发器（Oracle 12c+）\"></a>2. <strong>替代触发器（Oracle 12c+）</strong></h4><p>Oracle 12c 支持 <code>IDENTITY</code> 列自动生成序列，简化操作：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employees (</span><br><span class=\"line\">  id NUMBER GENERATED ALWAYS <span class=\"keyword\">AS</span> <span class=\"keyword\">IDENTITY</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name VARCHAR2(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><ul>\n<li><strong>适用场景</strong>：主键生成、唯一编号生成（如订单号）。</li>\n<li><strong>优点</strong>：高效、简单、并发安全。</li>\n<li><strong>缺点</strong>：可能产生间隙（如事务回滚、缓存丢失时）。</li>\n</ul>\n<p>合理配置 <code>CACHE</code>、<code>CYCLE</code> 等参数，结合业务需求选择是否使用序列。</p>\n"},{"title":"数据结构-递归","date":"2024-07-01T10:00:00.000Z","updated":"2024-07-01T10:00:00.000Z","keywords":["算法"],"description":"简述了算法的基础知识，包含算法复杂度、进制计算、位运算、原码反码补码等","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"# 1.递归（recursion）\n## 1.1.递归的基本概念\n* **程序调用自身的编程技巧叫做递归**\n* 递归通常是把**大型的复杂问题**转化为**与原问题相似的规模较小的问题**\n* 递归需要有**边界条件**、**递归前进段**、**递归返回段**\n* 边界条件不满足递归前进否则递归返回\n## 1.2.递归的应用条件\n* 子问题必须与原始问题做同样的事情\n* 问题解法按递归算法实现\n* 数据结构的形式是按照递归定义的","source":"_posts/数据结构-递归/数据结构-递归.md","raw":"---\ntitle: 数据结构-递归\ndate: 2024-07-01 18:00:00\nupdated: 2024-07-01 18:00:00\ntags: \n - 算法\ncategories: \n - 算法\nkeywords: \n - 算法\ndescription: 简述了算法的基础知识，包含算法复杂度、进制计算、位运算、原码反码补码等\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n# 1.递归（recursion）\n## 1.1.递归的基本概念\n* **程序调用自身的编程技巧叫做递归**\n* 递归通常是把**大型的复杂问题**转化为**与原问题相似的规模较小的问题**\n* 递归需要有**边界条件**、**递归前进段**、**递归返回段**\n* 边界条件不满足递归前进否则递归返回\n## 1.2.递归的应用条件\n* 子问题必须与原始问题做同样的事情\n* 问题解法按递归算法实现\n* 数据结构的形式是按照递归定义的","slug":"数据结构-递归/数据结构-递归","published":1,"layout":"post","photos":[],"_id":"cmctwyvb3001bx4graxuwgf07","content":"<h1 id=\"1-递归（recursion）\"><a href=\"#1-递归（recursion）\" class=\"headerlink\" title=\"1.递归（recursion）\"></a>1.递归（recursion）</h1><h2 id=\"1-1-递归的基本概念\"><a href=\"#1-1-递归的基本概念\" class=\"headerlink\" title=\"1.1.递归的基本概念\"></a>1.1.递归的基本概念</h2><ul>\n<li><strong>程序调用自身的编程技巧叫做递归</strong></li>\n<li>递归通常是把<strong>大型的复杂问题</strong>转化为<strong>与原问题相似的规模较小的问题</strong></li>\n<li>递归需要有<strong>边界条件</strong>、<strong>递归前进段</strong>、<strong>递归返回段</strong></li>\n<li>边界条件不满足递归前进否则递归返回</li>\n</ul>\n<h2 id=\"1-2-递归的应用条件\"><a href=\"#1-2-递归的应用条件\" class=\"headerlink\" title=\"1.2.递归的应用条件\"></a>1.2.递归的应用条件</h2><ul>\n<li>子问题必须与原始问题做同样的事情</li>\n<li>问题解法按递归算法实现</li>\n<li>数据结构的形式是按照递归定义的</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"1-递归（recursion）\"><a href=\"#1-递归（recursion）\" class=\"headerlink\" title=\"1.递归（recursion）\"></a>1.递归（recursion）</h1><h2 id=\"1-1-递归的基本概念\"><a href=\"#1-1-递归的基本概念\" class=\"headerlink\" title=\"1.1.递归的基本概念\"></a>1.1.递归的基本概念</h2><ul>\n<li><strong>程序调用自身的编程技巧叫做递归</strong></li>\n<li>递归通常是把<strong>大型的复杂问题</strong>转化为<strong>与原问题相似的规模较小的问题</strong></li>\n<li>递归需要有<strong>边界条件</strong>、<strong>递归前进段</strong>、<strong>递归返回段</strong></li>\n<li>边界条件不满足递归前进否则递归返回</li>\n</ul>\n<h2 id=\"1-2-递归的应用条件\"><a href=\"#1-2-递归的应用条件\" class=\"headerlink\" title=\"1.2.递归的应用条件\"></a>1.2.递归的应用条件</h2><ul>\n<li>子问题必须与原始问题做同样的事情</li>\n<li>问题解法按递归算法实现</li>\n<li>数据结构的形式是按照递归定义的</li>\n</ul>\n"},{"abbrlink":"","date":"2025-07-08T02:28:17.213Z","description":"离线环境获取docker包，以mysql为例","keywords":"docker","title":"离线环境获取docker包","updated":"2025-07-08T02:30:28.253Z","_content":"## 在联网机器下载镜像\n\n`docker pull mysql:8.0.36`\n\n## 保存镜像为离线包\n\n`docker save -o mysql8.tar mysql:8.0.36`\n\n## 传输文件到离线环境后加载镜像\n\n`docker load -i mysql8.tar`\n","source":"_posts/离线环境获取docker包/离线环境获取docker包.md","raw":"---\nabbrlink: ''\ncategories:\n- - 开发心得\ndate: '2025-07-08T10:28:17.213516+08:00'\ndescription: 离线环境获取docker包，以mysql为例\nkeywords: docker\ntags:\n- docker\ntitle: 离线环境获取docker包\nupdated: '2025-07-08T10:30:28.253+08:00'\n---\n## 在联网机器下载镜像\n\n`docker pull mysql:8.0.36`\n\n## 保存镜像为离线包\n\n`docker save -o mysql8.tar mysql:8.0.36`\n\n## 传输文件到离线环境后加载镜像\n\n`docker load -i mysql8.tar`\n","slug":"离线环境获取docker包/离线环境获取docker包","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb4001fx4grh26f7ai7","content":"<h2 id=\"在联网机器下载镜像\"><a href=\"#在联网机器下载镜像\" class=\"headerlink\" title=\"在联网机器下载镜像\"></a>在联网机器下载镜像</h2><p><code>docker pull mysql:8.0.36</code></p>\n<h2 id=\"保存镜像为离线包\"><a href=\"#保存镜像为离线包\" class=\"headerlink\" title=\"保存镜像为离线包\"></a>保存镜像为离线包</h2><p><code>docker save -o mysql8.tar mysql:8.0.36</code></p>\n<h2 id=\"传输文件到离线环境后加载镜像\"><a href=\"#传输文件到离线环境后加载镜像\" class=\"headerlink\" title=\"传输文件到离线环境后加载镜像\"></a>传输文件到离线环境后加载镜像</h2><p><code>docker load -i mysql8.tar</code></p>\n","excerpt":"","more":"<h2 id=\"在联网机器下载镜像\"><a href=\"#在联网机器下载镜像\" class=\"headerlink\" title=\"在联网机器下载镜像\"></a>在联网机器下载镜像</h2><p><code>docker pull mysql:8.0.36</code></p>\n<h2 id=\"保存镜像为离线包\"><a href=\"#保存镜像为离线包\" class=\"headerlink\" title=\"保存镜像为离线包\"></a>保存镜像为离线包</h2><p><code>docker save -o mysql8.tar mysql:8.0.36</code></p>\n<h2 id=\"传输文件到离线环境后加载镜像\"><a href=\"#传输文件到离线环境后加载镜像\" class=\"headerlink\" title=\"传输文件到离线环境后加载镜像\"></a>传输文件到离线环境后加载镜像</h2><p><code>docker load -i mysql8.tar</code></p>\n"},{"title":"算法习题-判断是不是子字符串","date":"2025-04-08T11:08:25.000Z","updated":"2025-04-08T11:08:25.000Z","keywords":["算法"],"description":null,"_content":"给定两个字符串 s和 t ，判断 s是否为 t 的子序列。\n你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度n ~= 500,000），而 s 是个短字符串（长度 <=100）。\n\n字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，\"ace\"是\"abcde\"的一个子序列，而\"aec\"不是）。\n\n```\n输入描述:\n共两行，第一行为字符串s,  第二行为字符串t\n\n字符串t的长度 1<=n<=500000\n\n字符串s的长度 1<=m<=100\n```\n\n```\n输出描述:\n输出true或者是false，true表示是s是t的子序列，false表示s不是t的子序列\n```\n```\n示例1\n输入\nabc\nahbgdc\n输出\ntrue\n```\n```\n示例2\n输入\naxc\nahbgdc\n输出\nfalse\n```\n```java\nimport java.util.ArrayList;\n\n/**\n * 解题思路：\n * 1、要求子串顺序和父串的顺序一致并且字串出现的字母一定要在父串内有\n * 2、循环遍历子串和父串，如果子串匹配到了父串那么把子串在父串的坐标写入list中\n * 3、判断list长度是否和子串长度相等，如果相等那么新建一个用于排序的list，对排序list进行升序排序\n * 4、两个list转为String，如果相等那么为true\n */\npublic class str_xulie {\n    public static boolean solution(String sonStr, String fatherStr) {\n        boolean result = false;\n        ArrayList<Integer> list = new ArrayList<>();\n        ArrayList<Integer> listSort = new ArrayList<>();\n        for (int i = 0; i < sonStr.length(); i++) {\n            char son = sonStr.charAt(i);\n            for (int j = 0; j < fatherStr.length(); j++) {\n                char father = fatherStr.charAt(j);\n                // 匹配到了\n                if (father == son) {\n                    list.add(j);\n                }\n            }\n        }\n\n\n        if (list.size() == sonStr.length()) {\n            listSort.addAll(list);\n            list.sort((a, b) -> {\n                if (a > b) {\n                    return 1;\n                }\n                return -1;\n            });\n            if (listSort.toString().equals(list.toString())) {\n                result = true;\n            } else {\n                result = false;\n            }\n        } else {\n            return false;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        String sonStr = \"abcz\";\n        //String sonStr = \"axc\";\n        String fatherStr = \"ahbgdc\";\n        boolean solution = solution(sonStr, fatherStr);\n        System.out.println(solution);\n    }\n}\n\n```","source":"_posts/算法习题-判断是不是子字符串/算法习题-判断是不是子字符串.md","raw":"---\ntitle: 算法习题-判断是不是子字符串\ndate: 2025-04-08 19:08:25\nupdated: 2025-04-08 19:08:25\ntags:   \n - 算法\ncategories:\n - 算法\n - 习题\nkeywords:\n - 算法\ndescription: \n---\n给定两个字符串 s和 t ，判断 s是否为 t 的子序列。\n你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度n ~= 500,000），而 s 是个短字符串（长度 <=100）。\n\n字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，\"ace\"是\"abcde\"的一个子序列，而\"aec\"不是）。\n\n```\n输入描述:\n共两行，第一行为字符串s,  第二行为字符串t\n\n字符串t的长度 1<=n<=500000\n\n字符串s的长度 1<=m<=100\n```\n\n```\n输出描述:\n输出true或者是false，true表示是s是t的子序列，false表示s不是t的子序列\n```\n```\n示例1\n输入\nabc\nahbgdc\n输出\ntrue\n```\n```\n示例2\n输入\naxc\nahbgdc\n输出\nfalse\n```\n```java\nimport java.util.ArrayList;\n\n/**\n * 解题思路：\n * 1、要求子串顺序和父串的顺序一致并且字串出现的字母一定要在父串内有\n * 2、循环遍历子串和父串，如果子串匹配到了父串那么把子串在父串的坐标写入list中\n * 3、判断list长度是否和子串长度相等，如果相等那么新建一个用于排序的list，对排序list进行升序排序\n * 4、两个list转为String，如果相等那么为true\n */\npublic class str_xulie {\n    public static boolean solution(String sonStr, String fatherStr) {\n        boolean result = false;\n        ArrayList<Integer> list = new ArrayList<>();\n        ArrayList<Integer> listSort = new ArrayList<>();\n        for (int i = 0; i < sonStr.length(); i++) {\n            char son = sonStr.charAt(i);\n            for (int j = 0; j < fatherStr.length(); j++) {\n                char father = fatherStr.charAt(j);\n                // 匹配到了\n                if (father == son) {\n                    list.add(j);\n                }\n            }\n        }\n\n\n        if (list.size() == sonStr.length()) {\n            listSort.addAll(list);\n            list.sort((a, b) -> {\n                if (a > b) {\n                    return 1;\n                }\n                return -1;\n            });\n            if (listSort.toString().equals(list.toString())) {\n                result = true;\n            } else {\n                result = false;\n            }\n        } else {\n            return false;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        String sonStr = \"abcz\";\n        //String sonStr = \"axc\";\n        String fatherStr = \"ahbgdc\";\n        boolean solution = solution(sonStr, fatherStr);\n        System.out.println(solution);\n    }\n}\n\n```","slug":"算法习题-判断是不是子字符串/算法习题-判断是不是子字符串","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb4001gx4grcsb6b5gm","content":"<p>给定两个字符串 s和 t ，判断 s是否为 t 的子序列。<br>你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度n ~&#x3D; 500,000），而 s 是个短字符串（长度 &lt;&#x3D;100）。</p>\n<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述:</span><br><span class=\"line\">共两行，第一行为字符串s,  第二行为字符串t</span><br><span class=\"line\"></span><br><span class=\"line\">字符串t的长度 1&lt;=n&lt;=500000</span><br><span class=\"line\"></span><br><span class=\"line\">字符串s的长度 1&lt;=m&lt;=100</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出描述:</span><br><span class=\"line\">输出true或者是false，true表示是s是t的子序列，false表示s不是t的子序列</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例1</span><br><span class=\"line\">输入</span><br><span class=\"line\">abc</span><br><span class=\"line\">ahbgdc</span><br><span class=\"line\">输出</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例2</span><br><span class=\"line\">输入</span><br><span class=\"line\">axc</span><br><span class=\"line\">ahbgdc</span><br><span class=\"line\">输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、要求子串顺序和父串的顺序一致并且字串出现的字母一定要在父串内有</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、循环遍历子串和父串，如果子串匹配到了父串那么把子串在父串的坐标写入list中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、判断list长度是否和子串长度相等，如果相等那么新建一个用于排序的list，对排序list进行升序排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、两个list转为String，如果相等那么为true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">str_xulie</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">solution</span><span class=\"params\">(String sonStr, String fatherStr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; listSort = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; sonStr.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">son</span> <span class=\"operator\">=</span> sonStr.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; fatherStr.length(); j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> <span class=\"variable\">father</span> <span class=\"operator\">=</span> fatherStr.charAt(j);</span><br><span class=\"line\">                <span class=\"comment\">// 匹配到了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (father == son) &#123;</span><br><span class=\"line\">                    list.add(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.size() == sonStr.length()) &#123;</span><br><span class=\"line\">            listSort.addAll(list);</span><br><span class=\"line\">            list.sort((a, b) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listSort.toString().equals(list.toString())) &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sonStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcz&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//String sonStr = &quot;axc&quot;;</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fatherStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ahbgdc&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(sonStr, fatherStr);</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>给定两个字符串 s和 t ，判断 s是否为 t 的子序列。<br>你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度n ~&#x3D; 500,000），而 s 是个短字符串（长度 &lt;&#x3D;100）。</p>\n<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述:</span><br><span class=\"line\">共两行，第一行为字符串s,  第二行为字符串t</span><br><span class=\"line\"></span><br><span class=\"line\">字符串t的长度 1&lt;=n&lt;=500000</span><br><span class=\"line\"></span><br><span class=\"line\">字符串s的长度 1&lt;=m&lt;=100</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出描述:</span><br><span class=\"line\">输出true或者是false，true表示是s是t的子序列，false表示s不是t的子序列</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例1</span><br><span class=\"line\">输入</span><br><span class=\"line\">abc</span><br><span class=\"line\">ahbgdc</span><br><span class=\"line\">输出</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例2</span><br><span class=\"line\">输入</span><br><span class=\"line\">axc</span><br><span class=\"line\">ahbgdc</span><br><span class=\"line\">输出</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、要求子串顺序和父串的顺序一致并且字串出现的字母一定要在父串内有</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、循环遍历子串和父串，如果子串匹配到了父串那么把子串在父串的坐标写入list中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、判断list长度是否和子串长度相等，如果相等那么新建一个用于排序的list，对排序list进行升序排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、两个list转为String，如果相等那么为true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">str_xulie</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">solution</span><span class=\"params\">(String sonStr, String fatherStr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; listSort = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; sonStr.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">son</span> <span class=\"operator\">=</span> sonStr.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; fatherStr.length(); j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> <span class=\"variable\">father</span> <span class=\"operator\">=</span> fatherStr.charAt(j);</span><br><span class=\"line\">                <span class=\"comment\">// 匹配到了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (father == son) &#123;</span><br><span class=\"line\">                    list.add(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.size() == sonStr.length()) &#123;</span><br><span class=\"line\">            listSort.addAll(list);</span><br><span class=\"line\">            list.sort((a, b) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listSort.toString().equals(list.toString())) &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sonStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcz&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//String sonStr = &quot;axc&quot;;</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fatherStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ahbgdc&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(sonStr, fatherStr);</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"算法习题-字符串切割","date":"2025-04-08T07:57:34.000Z","updated":"2025-04-08T07:57:34.000Z","keywords":["算法"],"description":null,"_content":"给定一个非空字符串S，其被N个‘-’分隔成N+1的子串，给定正整数K，要求除第一个子串外，其余的子串每K个字符组成新的子串，并用‘-’分隔。\n\n对于新组成的每一个子串，如果它含有的小写字母比大写字母多，则将这个子串的所有大写字母转换为小写字母；\n反之，如果它含有的大写字母比小写字母多，则将这个子串的所有小写字母转换为大写字母；大小写字母的数量相等时，不做转换。\n```\n输入描述:\n输入为两行，第一行为参数K，第二行为字符串S。\n输出描述:\n输出转换后的字符串。\n```\n```\n示例1\n输入\n3\n12abc-abCABc-4aB@\n输出\n12abc-abc-ABC-4aB-@\n说明：\n子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每3个字符一组为abC、ABc、4aB、@，abC中小写字母较多，转换为abc，ABc中大写字母较多，转换为ABC，4aB中大小写字母都为1个，不做转换，@中没有字母，连起来即12abc-abc-ABC-4aB-@\n```\n\n```\n示例2\n输入\n12\n12abc-abCABc-4aB@\n输出\n12abc-abCABc4aB@\n说明\n子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每12个字符一组为abCABc4aB@，这个子串中大小写字母都为4个，不做转换，连起来即12abc-abCABc4aB@\n```\n\n```java\nimport java.util.Locale;\n\n/**\n * 解题思路：\n * 1、先创建一个StringBulider用于存储处理过程中的字符\n * 2、使用字Solit方法切分出第一个字符串并加入StringBulider中\n * 3、使用indexOf方法确认第一个-的位置并+1得到后续字符串的首字母位置，用subString方法切分原字符串得到后续字符串\n * 4、遍历后续字符串，对每一个字符大小写进行统计，并且将字符append到临时StringBulider中，直到达到指定的 k 长度后对大小写数量进行比较\n * 5、最后一达到 k 长度后可能还剩余<k个字符，要再做一遍大小写判断\n */\npublic class str_split {\n    public static String solution(String str, int k) {\n        String result = \"\";\n        //首字符串\n        StringBuilder resBulider = new StringBuilder();\n        resBulider.append(str.split(\"-\")[0]).append('-');\n        //已经去掉-的后面字符串\n        String lastStr = str.substring(str.indexOf(\"-\") + 1).replace(\"-\", \"\");\n        \n        //用于临时存放k长度的StringBulider\n        StringBuilder temp = new StringBuilder();\n        int lowerCount = 0;\n        int upperCount = 0;\n        for (int i = 0; i < lastStr.length(); i++) {\n            //遍历每一个字符\n            char c = lastStr.charAt(i);\n            temp.append(c);\n            //大小写统计\n            if (Character.isLowerCase(c)) {\n                lowerCount++;\n            } else if (Character.isUpperCase(c)){\n                upperCount++;\n            } else {\n                continue;\n            }\n            //当长度满足k的时候进行大小写统计，但是最后一批小于k的字符Bulider会漏掉\n            if (temp.length() == k) {\n                if (lowerCount > upperCount) {\n                    resBulider.append(temp.toString().toLowerCase());\n                } else if (lowerCount < upperCount) {\n                    resBulider.append(temp.toString().toUpperCase());\n                } else {\n                    resBulider.append(temp.toString());\n                }\n                //指定长度处理完成后添加-\n                resBulider.append(\"-\");\n                //重置临时buffer\n                temp.setLength(0);\n                //重置大小写数量\n                lowerCount = 0;\n                upperCount = 0;\n            }\n        }\n        //这里对最后一批小于k的字符Bulider进行大小写处理\n        if (temp.length() > 0) {\n            if (lowerCount > upperCount) {\n                resBulider.append(temp.toString().toLowerCase());\n            } else if (lowerCount < upperCount) {\n                resBulider.append(temp.toString().toUpperCase());\n            } else {\n                resBulider.append(temp.toString());\n            }\n        }\n\n        result = resBulider.toString();\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        String str = \"12abc-abCABc-4aB@\";\n        int k = 12;\n        System.out.println(solution(str, k));\n\n    }\n}\n\n```","source":"_posts/算法习题-字符串切割/算法习题-字符串切割.md","raw":"---\ntitle: 算法习题-字符串切割\ndate: 2025-04-08 15:57:34\nupdated: 2025-04-08 15:57:34\ntags:   \n - 算法\ncategories:\n - 算法\n - 习题\nkeywords:\n - 算法\ndescription:\n---\n给定一个非空字符串S，其被N个‘-’分隔成N+1的子串，给定正整数K，要求除第一个子串外，其余的子串每K个字符组成新的子串，并用‘-’分隔。\n\n对于新组成的每一个子串，如果它含有的小写字母比大写字母多，则将这个子串的所有大写字母转换为小写字母；\n反之，如果它含有的大写字母比小写字母多，则将这个子串的所有小写字母转换为大写字母；大小写字母的数量相等时，不做转换。\n```\n输入描述:\n输入为两行，第一行为参数K，第二行为字符串S。\n输出描述:\n输出转换后的字符串。\n```\n```\n示例1\n输入\n3\n12abc-abCABc-4aB@\n输出\n12abc-abc-ABC-4aB-@\n说明：\n子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每3个字符一组为abC、ABc、4aB、@，abC中小写字母较多，转换为abc，ABc中大写字母较多，转换为ABC，4aB中大小写字母都为1个，不做转换，@中没有字母，连起来即12abc-abc-ABC-4aB-@\n```\n\n```\n示例2\n输入\n12\n12abc-abCABc-4aB@\n输出\n12abc-abCABc4aB@\n说明\n子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每12个字符一组为abCABc4aB@，这个子串中大小写字母都为4个，不做转换，连起来即12abc-abCABc4aB@\n```\n\n```java\nimport java.util.Locale;\n\n/**\n * 解题思路：\n * 1、先创建一个StringBulider用于存储处理过程中的字符\n * 2、使用字Solit方法切分出第一个字符串并加入StringBulider中\n * 3、使用indexOf方法确认第一个-的位置并+1得到后续字符串的首字母位置，用subString方法切分原字符串得到后续字符串\n * 4、遍历后续字符串，对每一个字符大小写进行统计，并且将字符append到临时StringBulider中，直到达到指定的 k 长度后对大小写数量进行比较\n * 5、最后一达到 k 长度后可能还剩余<k个字符，要再做一遍大小写判断\n */\npublic class str_split {\n    public static String solution(String str, int k) {\n        String result = \"\";\n        //首字符串\n        StringBuilder resBulider = new StringBuilder();\n        resBulider.append(str.split(\"-\")[0]).append('-');\n        //已经去掉-的后面字符串\n        String lastStr = str.substring(str.indexOf(\"-\") + 1).replace(\"-\", \"\");\n        \n        //用于临时存放k长度的StringBulider\n        StringBuilder temp = new StringBuilder();\n        int lowerCount = 0;\n        int upperCount = 0;\n        for (int i = 0; i < lastStr.length(); i++) {\n            //遍历每一个字符\n            char c = lastStr.charAt(i);\n            temp.append(c);\n            //大小写统计\n            if (Character.isLowerCase(c)) {\n                lowerCount++;\n            } else if (Character.isUpperCase(c)){\n                upperCount++;\n            } else {\n                continue;\n            }\n            //当长度满足k的时候进行大小写统计，但是最后一批小于k的字符Bulider会漏掉\n            if (temp.length() == k) {\n                if (lowerCount > upperCount) {\n                    resBulider.append(temp.toString().toLowerCase());\n                } else if (lowerCount < upperCount) {\n                    resBulider.append(temp.toString().toUpperCase());\n                } else {\n                    resBulider.append(temp.toString());\n                }\n                //指定长度处理完成后添加-\n                resBulider.append(\"-\");\n                //重置临时buffer\n                temp.setLength(0);\n                //重置大小写数量\n                lowerCount = 0;\n                upperCount = 0;\n            }\n        }\n        //这里对最后一批小于k的字符Bulider进行大小写处理\n        if (temp.length() > 0) {\n            if (lowerCount > upperCount) {\n                resBulider.append(temp.toString().toLowerCase());\n            } else if (lowerCount < upperCount) {\n                resBulider.append(temp.toString().toUpperCase());\n            } else {\n                resBulider.append(temp.toString());\n            }\n        }\n\n        result = resBulider.toString();\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        String str = \"12abc-abCABc-4aB@\";\n        int k = 12;\n        System.out.println(solution(str, k));\n\n    }\n}\n\n```","slug":"算法习题-字符串切割/算法习题-字符串切割","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb5001lx4gr3dkcgnip","content":"<p>给定一个非空字符串S，其被N个‘-’分隔成N+1的子串，给定正整数K，要求除第一个子串外，其余的子串每K个字符组成新的子串，并用‘-’分隔。</p>\n<p>对于新组成的每一个子串，如果它含有的小写字母比大写字母多，则将这个子串的所有大写字母转换为小写字母；<br>反之，如果它含有的大写字母比小写字母多，则将这个子串的所有小写字母转换为大写字母；大小写字母的数量相等时，不做转换。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述:</span><br><span class=\"line\">输入为两行，第一行为参数K，第二行为字符串S。</span><br><span class=\"line\">输出描述:</span><br><span class=\"line\">输出转换后的字符串。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例1</span><br><span class=\"line\">输入</span><br><span class=\"line\">3</span><br><span class=\"line\">12abc-abCABc-4aB@</span><br><span class=\"line\">输出</span><br><span class=\"line\">12abc-abc-ABC-4aB-@</span><br><span class=\"line\">说明：</span><br><span class=\"line\">子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每3个字符一组为abC、ABc、4aB、@，abC中小写字母较多，转换为abc，ABc中大写字母较多，转换为ABC，4aB中大小写字母都为1个，不做转换，@中没有字母，连起来即12abc-abc-ABC-4aB-@</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例2</span><br><span class=\"line\">输入</span><br><span class=\"line\">12</span><br><span class=\"line\">12abc-abCABc-4aB@</span><br><span class=\"line\">输出</span><br><span class=\"line\">12abc-abCABc4aB@</span><br><span class=\"line\">说明</span><br><span class=\"line\">子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每12个字符一组为abCABc4aB@，这个子串中大小写字母都为4个，不做转换，连起来即12abc-abCABc4aB@</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、先创建一个StringBulider用于存储处理过程中的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、使用字Solit方法切分出第一个字符串并加入StringBulider中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、使用indexOf方法确认第一个-的位置并+1得到后续字符串的首字母位置，用subString方法切分原字符串得到后续字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、遍历后续字符串，对每一个字符大小写进行统计，并且将字符append到临时StringBulider中，直到达到指定的 k 长度后对大小写数量进行比较</span></span><br><span class=\"line\"><span class=\"comment\"> * 5、最后一达到 k 长度后可能还剩余&lt;k个字符，要再做一遍大小写判断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">str_split</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">solution</span><span class=\"params\">(String str, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//首字符串</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">resBulider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        resBulider.append(str.split(<span class=\"string\">&quot;-&quot;</span>)[<span class=\"number\">0</span>]).append(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//已经去掉-的后面字符串</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">lastStr</span> <span class=\"operator\">=</span> str.substring(str.indexOf(<span class=\"string\">&quot;-&quot;</span>) + <span class=\"number\">1</span>).replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//用于临时存放k长度的StringBulider</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lowerCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">upperCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; lastStr.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> lastStr.charAt(i);</span><br><span class=\"line\">            temp.append(c);</span><br><span class=\"line\">            <span class=\"comment\">//大小写统计</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Character.isLowerCase(c)) &#123;</span><br><span class=\"line\">                lowerCount++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Character.isUpperCase(c))&#123;</span><br><span class=\"line\">                upperCount++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当长度满足k的时候进行大小写统计，但是最后一批小于k的字符Bulider会漏掉</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.length() == k) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lowerCount &gt; upperCount) &#123;</span><br><span class=\"line\">                    resBulider.append(temp.toString().toLowerCase());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lowerCount &lt; upperCount) &#123;</span><br><span class=\"line\">                    resBulider.append(temp.toString().toUpperCase());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resBulider.append(temp.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//指定长度处理完成后添加-</span></span><br><span class=\"line\">                resBulider.append(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//重置临时buffer</span></span><br><span class=\"line\">                temp.setLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"comment\">//重置大小写数量</span></span><br><span class=\"line\">                lowerCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                upperCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里对最后一批小于k的字符Bulider进行大小写处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lowerCount &gt; upperCount) &#123;</span><br><span class=\"line\">                resBulider.append(temp.toString().toLowerCase());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lowerCount &lt; upperCount) &#123;</span><br><span class=\"line\">                resBulider.append(temp.toString().toUpperCase());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resBulider.append(temp.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result = resBulider.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;12abc-abCABc-4aB@&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">12</span>;</span><br><span class=\"line\">        System.out.println(solution(str, k));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>给定一个非空字符串S，其被N个‘-’分隔成N+1的子串，给定正整数K，要求除第一个子串外，其余的子串每K个字符组成新的子串，并用‘-’分隔。</p>\n<p>对于新组成的每一个子串，如果它含有的小写字母比大写字母多，则将这个子串的所有大写字母转换为小写字母；<br>反之，如果它含有的大写字母比小写字母多，则将这个子串的所有小写字母转换为大写字母；大小写字母的数量相等时，不做转换。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述:</span><br><span class=\"line\">输入为两行，第一行为参数K，第二行为字符串S。</span><br><span class=\"line\">输出描述:</span><br><span class=\"line\">输出转换后的字符串。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例1</span><br><span class=\"line\">输入</span><br><span class=\"line\">3</span><br><span class=\"line\">12abc-abCABc-4aB@</span><br><span class=\"line\">输出</span><br><span class=\"line\">12abc-abc-ABC-4aB-@</span><br><span class=\"line\">说明：</span><br><span class=\"line\">子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每3个字符一组为abC、ABc、4aB、@，abC中小写字母较多，转换为abc，ABc中大写字母较多，转换为ABC，4aB中大小写字母都为1个，不做转换，@中没有字母，连起来即12abc-abc-ABC-4aB-@</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例2</span><br><span class=\"line\">输入</span><br><span class=\"line\">12</span><br><span class=\"line\">12abc-abCABc-4aB@</span><br><span class=\"line\">输出</span><br><span class=\"line\">12abc-abCABc4aB@</span><br><span class=\"line\">说明</span><br><span class=\"line\">子串为12abc、abCABc、4aB@，第一个子串保留，后面的子串每12个字符一组为abCABc4aB@，这个子串中大小写字母都为4个，不做转换，连起来即12abc-abCABc4aB@</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、先创建一个StringBulider用于存储处理过程中的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、使用字Solit方法切分出第一个字符串并加入StringBulider中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、使用indexOf方法确认第一个-的位置并+1得到后续字符串的首字母位置，用subString方法切分原字符串得到后续字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、遍历后续字符串，对每一个字符大小写进行统计，并且将字符append到临时StringBulider中，直到达到指定的 k 长度后对大小写数量进行比较</span></span><br><span class=\"line\"><span class=\"comment\"> * 5、最后一达到 k 长度后可能还剩余&lt;k个字符，要再做一遍大小写判断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">str_split</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">solution</span><span class=\"params\">(String str, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//首字符串</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">resBulider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        resBulider.append(str.split(<span class=\"string\">&quot;-&quot;</span>)[<span class=\"number\">0</span>]).append(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//已经去掉-的后面字符串</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">lastStr</span> <span class=\"operator\">=</span> str.substring(str.indexOf(<span class=\"string\">&quot;-&quot;</span>) + <span class=\"number\">1</span>).replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//用于临时存放k长度的StringBulider</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lowerCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">upperCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; lastStr.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> lastStr.charAt(i);</span><br><span class=\"line\">            temp.append(c);</span><br><span class=\"line\">            <span class=\"comment\">//大小写统计</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Character.isLowerCase(c)) &#123;</span><br><span class=\"line\">                lowerCount++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Character.isUpperCase(c))&#123;</span><br><span class=\"line\">                upperCount++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当长度满足k的时候进行大小写统计，但是最后一批小于k的字符Bulider会漏掉</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.length() == k) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lowerCount &gt; upperCount) &#123;</span><br><span class=\"line\">                    resBulider.append(temp.toString().toLowerCase());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lowerCount &lt; upperCount) &#123;</span><br><span class=\"line\">                    resBulider.append(temp.toString().toUpperCase());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resBulider.append(temp.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//指定长度处理完成后添加-</span></span><br><span class=\"line\">                resBulider.append(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//重置临时buffer</span></span><br><span class=\"line\">                temp.setLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"comment\">//重置大小写数量</span></span><br><span class=\"line\">                lowerCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                upperCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里对最后一批小于k的字符Bulider进行大小写处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lowerCount &gt; upperCount) &#123;</span><br><span class=\"line\">                resBulider.append(temp.toString().toLowerCase());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lowerCount &lt; upperCount) &#123;</span><br><span class=\"line\">                resBulider.append(temp.toString().toUpperCase());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resBulider.append(temp.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result = resBulider.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;12abc-abCABc-4aB@&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">12</span>;</span><br><span class=\"line\">        System.out.println(solution(str, k));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"算法习题-求最大数","date":"2025-04-08T09:40:46.000Z","updated":"2025-04-08T09:40:46.000Z","keywords":["算法"],"description":null,"_content":"\n小组中每位都有一张卡片，卡片上是6位以内的正整数。将卡片连起来可以组成多种数字，计算组成的最大数字。\n```\n输入描述\n,号分割的多个正整数字符串，不需要考虑非数字字符情况，小组最多25个人。\n```\n```\n输出描述\n最大的数字字符串\n```\n```\n示例1\n输入：\n\n22,221\n输出：\n22221\n说明： 将22和221组合成最大值的排列是22221。\n```\n```\n示例2\n输入：\n4589,101,41425,9999\n输出：\n9999458941425101\n说明： 将4589, 101, 41425, 9999组合成最大值的排列是9999458941425101。\n```\n```java\nimport java.util.Arrays;\n\n/**\n * 解题思路：\n * a+b>b+a 那么a比b大\n */\n\n\npublic class make_max_number {\n    public static String solution(String str) {\n        StringBuilder resultBulider = new StringBuilder();\n        //切分后的字符串\n        String[] splited = str.split(\",\");\n\n        Arrays.sort(splited, (a, b) -> (b + a).compareTo(a + b));\n        for (String split : splited) {\n            resultBulider.append(split);\n        }\n        return resultBulider.toString();\n\n    }\n\n\n    public static void main(String[] args) {\n        String str = \"4589,101,41425,9999\";\n        String solution = solution(str);\n        System.out.println(solution);\n    }\n}\n\n```","source":"_posts/算法习题-求最大数/算法习题-求最大数.md","raw":"---\ntitle: 算法习题-求最大数\ndate: 2025-04-08 17:40:46\nupdated: 2025-04-08 17:40:46\ntags:\n - 算法\ncategories:\n - 算法\n - 习题\nkeywords:\n - 算法\ndescription:\n---\n\n小组中每位都有一张卡片，卡片上是6位以内的正整数。将卡片连起来可以组成多种数字，计算组成的最大数字。\n```\n输入描述\n,号分割的多个正整数字符串，不需要考虑非数字字符情况，小组最多25个人。\n```\n```\n输出描述\n最大的数字字符串\n```\n```\n示例1\n输入：\n\n22,221\n输出：\n22221\n说明： 将22和221组合成最大值的排列是22221。\n```\n```\n示例2\n输入：\n4589,101,41425,9999\n输出：\n9999458941425101\n说明： 将4589, 101, 41425, 9999组合成最大值的排列是9999458941425101。\n```\n```java\nimport java.util.Arrays;\n\n/**\n * 解题思路：\n * a+b>b+a 那么a比b大\n */\n\n\npublic class make_max_number {\n    public static String solution(String str) {\n        StringBuilder resultBulider = new StringBuilder();\n        //切分后的字符串\n        String[] splited = str.split(\",\");\n\n        Arrays.sort(splited, (a, b) -> (b + a).compareTo(a + b));\n        for (String split : splited) {\n            resultBulider.append(split);\n        }\n        return resultBulider.toString();\n\n    }\n\n\n    public static void main(String[] args) {\n        String str = \"4589,101,41425,9999\";\n        String solution = solution(str);\n        System.out.println(solution);\n    }\n}\n\n```","slug":"算法习题-求最大数/算法习题-求最大数","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb6001mx4graglf8ztp","content":"<p>小组中每位都有一张卡片，卡片上是6位以内的正整数。将卡片连起来可以组成多种数字，计算组成的最大数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述</span><br><span class=\"line\">,号分割的多个正整数字符串，不需要考虑非数字字符情况，小组最多25个人。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出描述</span><br><span class=\"line\">最大的数字字符串</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例1</span><br><span class=\"line\">输入：</span><br><span class=\"line\"></span><br><span class=\"line\">22,221</span><br><span class=\"line\">输出：</span><br><span class=\"line\">22221</span><br><span class=\"line\">说明： 将22和221组合成最大值的排列是22221。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例2</span><br><span class=\"line\">输入：</span><br><span class=\"line\">4589,101,41425,9999</span><br><span class=\"line\">输出：</span><br><span class=\"line\">9999458941425101</span><br><span class=\"line\">说明： 将4589, 101, 41425, 9999组合成最大值的排列是9999458941425101。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * a+b&gt;b+a 那么a比b大</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">make_max_number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">solution</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">resultBulider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">//切分后的字符串</span></span><br><span class=\"line\">        String[] splited = str.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.sort(splited, (a, b) -&gt; (b + a).compareTo(a + b));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String split : splited) &#123;</span><br><span class=\"line\">            resultBulider.append(split);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultBulider.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;4589,101,41425,9999&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(str);</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>小组中每位都有一张卡片，卡片上是6位以内的正整数。将卡片连起来可以组成多种数字，计算组成的最大数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述</span><br><span class=\"line\">,号分割的多个正整数字符串，不需要考虑非数字字符情况，小组最多25个人。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出描述</span><br><span class=\"line\">最大的数字字符串</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例1</span><br><span class=\"line\">输入：</span><br><span class=\"line\"></span><br><span class=\"line\">22,221</span><br><span class=\"line\">输出：</span><br><span class=\"line\">22221</span><br><span class=\"line\">说明： 将22和221组合成最大值的排列是22221。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例2</span><br><span class=\"line\">输入：</span><br><span class=\"line\">4589,101,41425,9999</span><br><span class=\"line\">输出：</span><br><span class=\"line\">9999458941425101</span><br><span class=\"line\">说明： 将4589, 101, 41425, 9999组合成最大值的排列是9999458941425101。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * a+b&gt;b+a 那么a比b大</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">make_max_number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">solution</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">resultBulider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">//切分后的字符串</span></span><br><span class=\"line\">        String[] splited = str.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.sort(splited, (a, b) -&gt; (b + a).compareTo(a + b));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String split : splited) &#123;</span><br><span class=\"line\">            resultBulider.append(split);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultBulider.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;4589,101,41425,9999&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(str);</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"算法习题-数据分类","date":"2025-04-09T08:03:51.000Z","updated":"2025-04-09T08:03:51.000Z","keywords":["算法"],"description":null,"_content":"对一个数据a进行分类，\n分类方法是，此数据a(4个字节大小)的4个字节相加对一个给定值b取模，\n如果得到的结果小于一个给定的值c则数据a为有效类型，其类型为取模的值。\n如果得到的结果大于或者等于c则数据a为无效类型。\n\n比如一个数据a = 0x01010101，b = 3\n按照分类方法计算：(0x01 + 0x01 + 0x01 + 0x01) % 3 = 1\n所以如果c等于2，则此a就是有效类型，其类型为1\n如果c等于1，则此a是无效类型\n\n又比如一个数据a = 0x01010103，b = 3\n按分类方法计算：(0x01 + 0x01 + 0x01 + 0x03) % 3 = 0\n所以如果c = 2则此a就是有效类型，其类型为0\n如果c = 0则此a是无效类型\n\n输入12个数据，\n第一个数据为c，第二个数据为b，\n剩余10个数据为需要分类的数据\n\n请找到有效类型中包含数据最多的类型，\n并输出该类型含有多少个数据\n```\n输入描述\n输入12个数据用空格分割，\n第一个数据为c，第二个数据为b，\n剩余10个数据为需要分类的数据。\n```\n```\n输出描述\n请找到有效类型中包含数据最多的类型，\n并输出该类型含有多少个数据。\n```\n```\n示例一\n输入\n3 4 256 257 258 259 260 261 262 263 264 265\n输出\n3\n说明\n这10个数据4个字节相加后的结果分别是\n1 2 3 4 5 6 7 8 9 10\n故对4取模的结果为\n1 2 3 0 1 2 3 0 1 2\nc是3所以012都是有效类型\n类型为1和2的有3个数据\n类型为0和3的只有两个\n```\n```\n示例二\n输入\n1 4 256 257 258 259 260 261 262 263 264 265\n输出\n2\n```\n```java\nimport java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * 解题思路：\n * 1、切分输入内容获取 c b 和待分类数据\n * 2、遍历待分类数据算出四个字节的和\n * 3、对四字节的和与 b 取模\n * 3.1、新建map存储 k 为模，v 为满足分类条件的次数，取模的结果和 c 比较，小于的统计结果加1\n * 4、遍历map的值取最大的\n */\npublic class data_classification {\n    // 获取数字的四个字节的和\n    private static int intByteSum(int x) {\n        int sum = 0;\n        for (int i = 0; i < 4; i++) {\n            sum += (byte) (x >> i * 8);\n        }\n        return sum;\n    }\n\n    public static int solution(String str) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        String[] s = str.split(\" \");\n        int c = Integer.parseInt(s[0]);\n        int b = Integer.parseInt(s[1]);\n        for (int i = 2; i < s.length; i++) {\n            int num = Integer.parseInt(s[i]);\n            // 取模后的结果\n            int intByteSumMo = intByteSum(num) % b;\n            if (intByteSumMo < c) {\n                if (map.containsKey(intByteSumMo)) {\n                    //已有key\n                    map.replace(intByteSumMo, map.get(intByteSumMo) + 1);\n                } else {\n                    map.put(intByteSumMo, 1);\n                    //key没有过\n                }\n            }\n\n        }\n        int max = 0;\n        for (int value : map.values()) {\n            if (value >= max) {\n                max = value;\n            }\n        }\n        return max;\n    }\n\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int solution = solution(scanner.nextLine());\n        System.out.println(solution);\n    }\n}\n\n```","source":"_posts/算法习题-数据分类/算法习题-数据分类.md","raw":"---\ntitle: 算法习题-数据分类\ndate: 2025-04-09 16:03:51\nupdated: 2025-04-09 16:03:51\ntags:   \n - 算法\ncategories:\n - 算法\n - 习题\nkeywords:\n - 算法\ndescription: \n---\n对一个数据a进行分类，\n分类方法是，此数据a(4个字节大小)的4个字节相加对一个给定值b取模，\n如果得到的结果小于一个给定的值c则数据a为有效类型，其类型为取模的值。\n如果得到的结果大于或者等于c则数据a为无效类型。\n\n比如一个数据a = 0x01010101，b = 3\n按照分类方法计算：(0x01 + 0x01 + 0x01 + 0x01) % 3 = 1\n所以如果c等于2，则此a就是有效类型，其类型为1\n如果c等于1，则此a是无效类型\n\n又比如一个数据a = 0x01010103，b = 3\n按分类方法计算：(0x01 + 0x01 + 0x01 + 0x03) % 3 = 0\n所以如果c = 2则此a就是有效类型，其类型为0\n如果c = 0则此a是无效类型\n\n输入12个数据，\n第一个数据为c，第二个数据为b，\n剩余10个数据为需要分类的数据\n\n请找到有效类型中包含数据最多的类型，\n并输出该类型含有多少个数据\n```\n输入描述\n输入12个数据用空格分割，\n第一个数据为c，第二个数据为b，\n剩余10个数据为需要分类的数据。\n```\n```\n输出描述\n请找到有效类型中包含数据最多的类型，\n并输出该类型含有多少个数据。\n```\n```\n示例一\n输入\n3 4 256 257 258 259 260 261 262 263 264 265\n输出\n3\n说明\n这10个数据4个字节相加后的结果分别是\n1 2 3 4 5 6 7 8 9 10\n故对4取模的结果为\n1 2 3 0 1 2 3 0 1 2\nc是3所以012都是有效类型\n类型为1和2的有3个数据\n类型为0和3的只有两个\n```\n```\n示例二\n输入\n1 4 256 257 258 259 260 261 262 263 264 265\n输出\n2\n```\n```java\nimport java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * 解题思路：\n * 1、切分输入内容获取 c b 和待分类数据\n * 2、遍历待分类数据算出四个字节的和\n * 3、对四字节的和与 b 取模\n * 3.1、新建map存储 k 为模，v 为满足分类条件的次数，取模的结果和 c 比较，小于的统计结果加1\n * 4、遍历map的值取最大的\n */\npublic class data_classification {\n    // 获取数字的四个字节的和\n    private static int intByteSum(int x) {\n        int sum = 0;\n        for (int i = 0; i < 4; i++) {\n            sum += (byte) (x >> i * 8);\n        }\n        return sum;\n    }\n\n    public static int solution(String str) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        String[] s = str.split(\" \");\n        int c = Integer.parseInt(s[0]);\n        int b = Integer.parseInt(s[1]);\n        for (int i = 2; i < s.length; i++) {\n            int num = Integer.parseInt(s[i]);\n            // 取模后的结果\n            int intByteSumMo = intByteSum(num) % b;\n            if (intByteSumMo < c) {\n                if (map.containsKey(intByteSumMo)) {\n                    //已有key\n                    map.replace(intByteSumMo, map.get(intByteSumMo) + 1);\n                } else {\n                    map.put(intByteSumMo, 1);\n                    //key没有过\n                }\n            }\n\n        }\n        int max = 0;\n        for (int value : map.values()) {\n            if (value >= max) {\n                max = value;\n            }\n        }\n        return max;\n    }\n\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int solution = solution(scanner.nextLine());\n        System.out.println(solution);\n    }\n}\n\n```","slug":"算法习题-数据分类/算法习题-数据分类","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvb7001qx4gr7a17502s","content":"<p>对一个数据a进行分类，<br>分类方法是，此数据a(4个字节大小)的4个字节相加对一个给定值b取模，<br>如果得到的结果小于一个给定的值c则数据a为有效类型，其类型为取模的值。<br>如果得到的结果大于或者等于c则数据a为无效类型。</p>\n<p>比如一个数据a &#x3D; 0x01010101，b &#x3D; 3<br>按照分类方法计算：(0x01 + 0x01 + 0x01 + 0x01) % 3 &#x3D; 1<br>所以如果c等于2，则此a就是有效类型，其类型为1<br>如果c等于1，则此a是无效类型</p>\n<p>又比如一个数据a &#x3D; 0x01010103，b &#x3D; 3<br>按分类方法计算：(0x01 + 0x01 + 0x01 + 0x03) % 3 &#x3D; 0<br>所以如果c &#x3D; 2则此a就是有效类型，其类型为0<br>如果c &#x3D; 0则此a是无效类型</p>\n<p>输入12个数据，<br>第一个数据为c，第二个数据为b，<br>剩余10个数据为需要分类的数据</p>\n<p>请找到有效类型中包含数据最多的类型，<br>并输出该类型含有多少个数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述</span><br><span class=\"line\">输入12个数据用空格分割，</span><br><span class=\"line\">第一个数据为c，第二个数据为b，</span><br><span class=\"line\">剩余10个数据为需要分类的数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出描述</span><br><span class=\"line\">请找到有效类型中包含数据最多的类型，</span><br><span class=\"line\">并输出该类型含有多少个数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例一</span><br><span class=\"line\">输入</span><br><span class=\"line\">3 4 256 257 258 259 260 261 262 263 264 265</span><br><span class=\"line\">输出</span><br><span class=\"line\">3</span><br><span class=\"line\">说明</span><br><span class=\"line\">这10个数据4个字节相加后的结果分别是</span><br><span class=\"line\">1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\">故对4取模的结果为</span><br><span class=\"line\">1 2 3 0 1 2 3 0 1 2</span><br><span class=\"line\">c是3所以012都是有效类型</span><br><span class=\"line\">类型为1和2的有3个数据</span><br><span class=\"line\">类型为0和3的只有两个</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例二</span><br><span class=\"line\">输入</span><br><span class=\"line\">1 4 256 257 258 259 260 261 262 263 264 265</span><br><span class=\"line\">输出</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、切分输入内容获取 c b 和待分类数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、遍历待分类数据算出四个字节的和</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、对四字节的和与 b 取模</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.1、新建map存储 k 为模，v 为满足分类条件的次数，取模的结果和 c 比较，小于的统计结果加1</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、遍历map的值取最大的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">data_classification</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取数字的四个字节的和</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">intByteSum</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            sum += (<span class=\"type\">byte</span>) (x &gt;&gt; i * <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">solution</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        String[] s = str.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Integer.parseInt(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> Integer.parseInt(s[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(s[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 取模后的结果</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">intByteSumMo</span> <span class=\"operator\">=</span> intByteSum(num) % b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (intByteSumMo &lt; c) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(intByteSumMo)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//已有key</span></span><br><span class=\"line\">                    map.replace(intByteSumMo, map.get(intByteSumMo) + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(intByteSumMo, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//key没有过</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : map.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value &gt;= max) &#123;</span><br><span class=\"line\">                max = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(scanner.nextLine());</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>对一个数据a进行分类，<br>分类方法是，此数据a(4个字节大小)的4个字节相加对一个给定值b取模，<br>如果得到的结果小于一个给定的值c则数据a为有效类型，其类型为取模的值。<br>如果得到的结果大于或者等于c则数据a为无效类型。</p>\n<p>比如一个数据a &#x3D; 0x01010101，b &#x3D; 3<br>按照分类方法计算：(0x01 + 0x01 + 0x01 + 0x01) % 3 &#x3D; 1<br>所以如果c等于2，则此a就是有效类型，其类型为1<br>如果c等于1，则此a是无效类型</p>\n<p>又比如一个数据a &#x3D; 0x01010103，b &#x3D; 3<br>按分类方法计算：(0x01 + 0x01 + 0x01 + 0x03) % 3 &#x3D; 0<br>所以如果c &#x3D; 2则此a就是有效类型，其类型为0<br>如果c &#x3D; 0则此a是无效类型</p>\n<p>输入12个数据，<br>第一个数据为c，第二个数据为b，<br>剩余10个数据为需要分类的数据</p>\n<p>请找到有效类型中包含数据最多的类型，<br>并输出该类型含有多少个数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入描述</span><br><span class=\"line\">输入12个数据用空格分割，</span><br><span class=\"line\">第一个数据为c，第二个数据为b，</span><br><span class=\"line\">剩余10个数据为需要分类的数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出描述</span><br><span class=\"line\">请找到有效类型中包含数据最多的类型，</span><br><span class=\"line\">并输出该类型含有多少个数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例一</span><br><span class=\"line\">输入</span><br><span class=\"line\">3 4 256 257 258 259 260 261 262 263 264 265</span><br><span class=\"line\">输出</span><br><span class=\"line\">3</span><br><span class=\"line\">说明</span><br><span class=\"line\">这10个数据4个字节相加后的结果分别是</span><br><span class=\"line\">1 2 3 4 5 6 7 8 9 10</span><br><span class=\"line\">故对4取模的结果为</span><br><span class=\"line\">1 2 3 0 1 2 3 0 1 2</span><br><span class=\"line\">c是3所以012都是有效类型</span><br><span class=\"line\">类型为1和2的有3个数据</span><br><span class=\"line\">类型为0和3的只有两个</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例二</span><br><span class=\"line\">输入</span><br><span class=\"line\">1 4 256 257 258 259 260 261 262 263 264 265</span><br><span class=\"line\">输出</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、切分输入内容获取 c b 和待分类数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、遍历待分类数据算出四个字节的和</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、对四字节的和与 b 取模</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.1、新建map存储 k 为模，v 为满足分类条件的次数，取模的结果和 c 比较，小于的统计结果加1</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、遍历map的值取最大的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">data_classification</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取数字的四个字节的和</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">intByteSum</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            sum += (<span class=\"type\">byte</span>) (x &gt;&gt; i * <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">solution</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        String[] s = str.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Integer.parseInt(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> Integer.parseInt(s[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(s[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 取模后的结果</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">intByteSumMo</span> <span class=\"operator\">=</span> intByteSum(num) % b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (intByteSumMo &lt; c) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(intByteSumMo)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//已有key</span></span><br><span class=\"line\">                    map.replace(intByteSumMo, map.get(intByteSumMo) + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(intByteSumMo, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//key没有过</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : map.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value &gt;= max) &#123;</span><br><span class=\"line\">                max = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(scanner.nextLine());</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"算法基础知识","date":"2024-06-26T10:00:00.000Z","updated":"2024-06-26T10:00:00.000Z","keywords":["算法"],"description":"简述了算法的基础知识，包含算法复杂度、进制计算、位运算、原码反码补码等","top_img":null,"comments":1,"cover":null,"highlight_shrink":true,"_content":"## 计算机上的一维坐标系：\n以某一坐标点为原点，向某个方向为正方向，以一定的标度建立坐标轴即为一维坐标系\n关键词：原点、方向、坐标轴\n## 计算机上的二维坐标系：\n二维坐标系的X轴是向下的（xy轴方向为第四象限方向）\n## 方向向量：\n四方向：\n\t-------------------------------\n\t|         | (x-1,y) |         |\n\t-------------------------------\n\t| (x,y-1) |  (x,y)  | (x,y+1) |\n\t-------------------------------\n\t|         | (x+1,y) |         |\n\t-------------------------------\n八方向：\n\t-------------------------------\n\t|(x-1,y-1)| (x-1,y) |(x-1,y+1)|\n\t-------------------------------\n\t| (x,y-1) |  (x,y)  | (x,y+1) |\n\t-------------------------------\n\t|(x+1,y-1)| (x+1,y) |(x+1,y+1)|\n\t-------------------------------\n\n## 算法复杂度：\n### 时间复杂度：执行算法需要的工作量\n1.频度：一个语句在代码中执行的次数\n2.f(n)：代码中最深层次运算的频度\n3.T(n)：代码中所有语句频度的和,是时间复杂度主要分析的东西 \n其中算法最深层次语句执行的频度（f(n)）是与T(n)同一数量级\n4.BigO（时间复杂度 O）：T(n) = O(f(n)) 简化为T(n)=O(n)\n5.最坏时间复杂度：最坏情况下执行算法的时间复杂度，最多次\n6.最好时间复杂度：最好情况下执行算法的时间复杂度，最少次\n7.平均时间复杂度：所有可能输入的示例概率相等情况下的期望值\n8.分析原则：\n加法规则：T(n) = O(max(f(n),g(n))) 个人理解：同级情况下取最坏时间复杂度\n乘法规则：T(n) = O(f(n)*g(n)) 个人理解：嵌套复杂度直接相乘\n9.常见时间复杂度：\nO(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n*n) \n### 空间复杂度：执行算法需要的内存空间\nS(n)=O(f(n)) \n\n## 进制：\n1.权：十进制的权 10^(N-1)\n2.按权展开：将R进制数的每一位数值用ak*R^k\n\t\n3.二进制和十进制转换：\n按权展开求和：\n\t\t\t1 0 1 1 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 8 + 0 + 2 + 1 = 11 \n\t\t\t8 4 2 1\n\t4.十进制转二进制：\n\t\t整数部分：除2取余，倒序排列\n\t\t125 => 1111101\n\t\t 125%2=62...1\n\t\t  62%2=31...0\n\t\t  31%2=15...1\n\t\t  15%2= 7...1\n\t\t   7%2= 3...1\n\t\t   3%2= 1...1\n\t\t   1%2= 0...1\n\t\t小数部分：乘二取整，先左后右\n\t\t\t小数乘二取整数部分，按照先后顺序从左到右排列\n\t5.二进制转八进制（前面补零）：\n\t\t从后往前三位一割不足补零\n\t\t11 = 011 = 3\n\t6.八进制转二进制：\n\t\t八进制的每一位数字转化为对应三位二进制的数字并排列\n\t\t123 = 1010011\n\t7.二进制转十六进制（前面补零）：\n\t\t从后往前四位一割不足补零\n\t\t11 = 0011 = 3\n\t8.十六进制转二进制：\n\t\t十六进制的每一位数字转化为对应四位二进制的数字并排列\n\t\t123 = 100100011\n\t9.不同进制转换：本质是确定不同权值位置的上的数码\n\t\ta进制转为b进制：正整数a % a进制下b进制的数字 余数一定是0~b-1 \n\t\t                \"除2取余，倒序排列\"本质上就是这个\n\n## 位运算：\n### 与运算 & and\n    用途：常用于二进制取位操作\n    法则：两个数字与运算时相同二进制位数只有均为1的情况下结果为1否则都是0，一个数 and 1 就是取二级制最末位\n        例如：100 & 111 = 100\n### 或运算 | or\n    用途：通常用于二进制位数上的无条件赋值\n    法则：两个数字或运算时相同二进制位数只要有1的情况下结果都为1，一个数 and 1 就是强制将该数字变为最接近的偶数，一个数 or 0 不变\n        例如：100 | 111 = 111\n### 异或运算 ^ xor （无进位加法）\n    用途：\n    法则：两个数字异或运算时相同二进制位数不同为1 相同为0(相同位数两数求和大于1不进位)，一个数异或运算两次结果不变\n        例如：100 ^ 111 = 011\n### 非运算 ~ not\n    用途：\n    法则：将一个数字二进制的0和1全部取反\n### 右移运算 >> shr\n\t用途：a>>1 就是a除以2\n\t法则：a>>b 即为二级制数右移b位,相当于a/(2^b)取整\n### 左移运算 << shl\n\t用途：a<<1 就是a*2\n\t法则：a<<b 即为二级制数左移b位,新的位用0代替,相当于a*(2^b)。如果溢出就舍弃高位，如果舍弃的高位是1，那么a*2不成立。\n### 反码补码和原码\n    1.原码：最高位表示该数字符号位 1为负号 0为正号 其他位存放该数字二级制绝对值。\n      原码中有-0的概念(因为最高位强制为位数)。\n      原码最大的缺陷就是一个数和它的相反数相加不等于0\n        例如： 1001 表示 -1   0001 表示 1\n    2.反码：正数的反码是它本身，负数的反码是除了符号位以外的按位取反\n        例如：3的原码是0011 则3的反码是0011 \n            -3的反码是1011 则-3的反码是 1100\n    3.补码：从低位到高位第一个1和它右边的0不变左边取反，符号位不变 （负数的补码等于反码+1）\n    \t模：一个计量系统中的计数范围，时钟系统中计量范围是0~11，那么模就是12 就会出现9-2 = 9+10\n    \t   n位计算机的模是0~2^n-1 即为2^n 亦有 2-1 = 2+(2^n-1)\n    \t   在有模的计量系统中减法即可转化为 被减数加上减数的同余数 的加法，从而实现减法转为加法。\n    \t同余数：n的同余数 = 模-n \n    \t       模=n+n的同余数\n    \t例子： \n    \t\t6    - 4    => 6    + (12)  = 2\n    \t    0110 - 0100 => 0110 + (1100)= 10010 = 0010\n    \t\ta-b 等于 a+b的同余数的结果取较低对应位数 ","source":"_posts/算法基础知识/算法基础知识.md","raw":"---\ntitle: 算法基础知识\ndate: 2024-06-26 18:00:00\nupdated: 2024-06-26 18:00:00\ntags: \n - 算法\ncategories: \n - 算法\nkeywords: \n - 算法\ndescription: 简述了算法的基础知识，包含算法复杂度、进制计算、位运算、原码反码补码等\ntop_img: \ncomments: true\ncover:\nhighlight_shrink: true\n---\n## 计算机上的一维坐标系：\n以某一坐标点为原点，向某个方向为正方向，以一定的标度建立坐标轴即为一维坐标系\n关键词：原点、方向、坐标轴\n## 计算机上的二维坐标系：\n二维坐标系的X轴是向下的（xy轴方向为第四象限方向）\n## 方向向量：\n四方向：\n\t-------------------------------\n\t|         | (x-1,y) |         |\n\t-------------------------------\n\t| (x,y-1) |  (x,y)  | (x,y+1) |\n\t-------------------------------\n\t|         | (x+1,y) |         |\n\t-------------------------------\n八方向：\n\t-------------------------------\n\t|(x-1,y-1)| (x-1,y) |(x-1,y+1)|\n\t-------------------------------\n\t| (x,y-1) |  (x,y)  | (x,y+1) |\n\t-------------------------------\n\t|(x+1,y-1)| (x+1,y) |(x+1,y+1)|\n\t-------------------------------\n\n## 算法复杂度：\n### 时间复杂度：执行算法需要的工作量\n1.频度：一个语句在代码中执行的次数\n2.f(n)：代码中最深层次运算的频度\n3.T(n)：代码中所有语句频度的和,是时间复杂度主要分析的东西 \n其中算法最深层次语句执行的频度（f(n)）是与T(n)同一数量级\n4.BigO（时间复杂度 O）：T(n) = O(f(n)) 简化为T(n)=O(n)\n5.最坏时间复杂度：最坏情况下执行算法的时间复杂度，最多次\n6.最好时间复杂度：最好情况下执行算法的时间复杂度，最少次\n7.平均时间复杂度：所有可能输入的示例概率相等情况下的期望值\n8.分析原则：\n加法规则：T(n) = O(max(f(n),g(n))) 个人理解：同级情况下取最坏时间复杂度\n乘法规则：T(n) = O(f(n)*g(n)) 个人理解：嵌套复杂度直接相乘\n9.常见时间复杂度：\nO(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n*n) \n### 空间复杂度：执行算法需要的内存空间\nS(n)=O(f(n)) \n\n## 进制：\n1.权：十进制的权 10^(N-1)\n2.按权展开：将R进制数的每一位数值用ak*R^k\n\t\n3.二进制和十进制转换：\n按权展开求和：\n\t\t\t1 0 1 1 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 8 + 0 + 2 + 1 = 11 \n\t\t\t8 4 2 1\n\t4.十进制转二进制：\n\t\t整数部分：除2取余，倒序排列\n\t\t125 => 1111101\n\t\t 125%2=62...1\n\t\t  62%2=31...0\n\t\t  31%2=15...1\n\t\t  15%2= 7...1\n\t\t   7%2= 3...1\n\t\t   3%2= 1...1\n\t\t   1%2= 0...1\n\t\t小数部分：乘二取整，先左后右\n\t\t\t小数乘二取整数部分，按照先后顺序从左到右排列\n\t5.二进制转八进制（前面补零）：\n\t\t从后往前三位一割不足补零\n\t\t11 = 011 = 3\n\t6.八进制转二进制：\n\t\t八进制的每一位数字转化为对应三位二进制的数字并排列\n\t\t123 = 1010011\n\t7.二进制转十六进制（前面补零）：\n\t\t从后往前四位一割不足补零\n\t\t11 = 0011 = 3\n\t8.十六进制转二进制：\n\t\t十六进制的每一位数字转化为对应四位二进制的数字并排列\n\t\t123 = 100100011\n\t9.不同进制转换：本质是确定不同权值位置的上的数码\n\t\ta进制转为b进制：正整数a % a进制下b进制的数字 余数一定是0~b-1 \n\t\t                \"除2取余，倒序排列\"本质上就是这个\n\n## 位运算：\n### 与运算 & and\n    用途：常用于二进制取位操作\n    法则：两个数字与运算时相同二进制位数只有均为1的情况下结果为1否则都是0，一个数 and 1 就是取二级制最末位\n        例如：100 & 111 = 100\n### 或运算 | or\n    用途：通常用于二进制位数上的无条件赋值\n    法则：两个数字或运算时相同二进制位数只要有1的情况下结果都为1，一个数 and 1 就是强制将该数字变为最接近的偶数，一个数 or 0 不变\n        例如：100 | 111 = 111\n### 异或运算 ^ xor （无进位加法）\n    用途：\n    法则：两个数字异或运算时相同二进制位数不同为1 相同为0(相同位数两数求和大于1不进位)，一个数异或运算两次结果不变\n        例如：100 ^ 111 = 011\n### 非运算 ~ not\n    用途：\n    法则：将一个数字二进制的0和1全部取反\n### 右移运算 >> shr\n\t用途：a>>1 就是a除以2\n\t法则：a>>b 即为二级制数右移b位,相当于a/(2^b)取整\n### 左移运算 << shl\n\t用途：a<<1 就是a*2\n\t法则：a<<b 即为二级制数左移b位,新的位用0代替,相当于a*(2^b)。如果溢出就舍弃高位，如果舍弃的高位是1，那么a*2不成立。\n### 反码补码和原码\n    1.原码：最高位表示该数字符号位 1为负号 0为正号 其他位存放该数字二级制绝对值。\n      原码中有-0的概念(因为最高位强制为位数)。\n      原码最大的缺陷就是一个数和它的相反数相加不等于0\n        例如： 1001 表示 -1   0001 表示 1\n    2.反码：正数的反码是它本身，负数的反码是除了符号位以外的按位取反\n        例如：3的原码是0011 则3的反码是0011 \n            -3的反码是1011 则-3的反码是 1100\n    3.补码：从低位到高位第一个1和它右边的0不变左边取反，符号位不变 （负数的补码等于反码+1）\n    \t模：一个计量系统中的计数范围，时钟系统中计量范围是0~11，那么模就是12 就会出现9-2 = 9+10\n    \t   n位计算机的模是0~2^n-1 即为2^n 亦有 2-1 = 2+(2^n-1)\n    \t   在有模的计量系统中减法即可转化为 被减数加上减数的同余数 的加法，从而实现减法转为加法。\n    \t同余数：n的同余数 = 模-n \n    \t       模=n+n的同余数\n    \t例子： \n    \t\t6    - 4    => 6    + (12)  = 2\n    \t    0110 - 0100 => 0110 + (1100)= 10010 = 0010\n    \t\ta-b 等于 a+b的同余数的结果取较低对应位数 ","slug":"算法基础知识/算法基础知识","published":1,"layout":"post","photos":[],"_id":"cmctwyvbf0042x4gr99hqe8k8","content":"<h2 id=\"计算机上的一维坐标系：\"><a href=\"#计算机上的一维坐标系：\" class=\"headerlink\" title=\"计算机上的一维坐标系：\"></a>计算机上的一维坐标系：</h2><p>以某一坐标点为原点，向某个方向为正方向，以一定的标度建立坐标轴即为一维坐标系<br>关键词：原点、方向、坐标轴</p>\n<h2 id=\"计算机上的二维坐标系：\"><a href=\"#计算机上的二维坐标系：\" class=\"headerlink\" title=\"计算机上的二维坐标系：\"></a>计算机上的二维坐标系：</h2><p>二维坐标系的X轴是向下的（xy轴方向为第四象限方向）</p>\n<h2 id=\"方向向量：\"><a href=\"#方向向量：\" class=\"headerlink\" title=\"方向向量：\"></a>方向向量：</h2><p>四方向：<br>    ——————————-<br>    |         | (x-1,y) |         |<br>    ——————————-<br>    | (x,y-1) |  (x,y)  | (x,y+1) |<br>    ——————————-<br>    |         | (x+1,y) |         |<br>    ——————————-<br>八方向：<br>    ——————————-<br>    |(x-1,y-1)| (x-1,y) |(x-1,y+1)|<br>    ——————————-<br>    | (x,y-1) |  (x,y)  | (x,y+1) |<br>    ——————————-<br>    |(x+1,y-1)| (x+1,y) |(x+1,y+1)|<br>    ——————————-</p>\n<h2 id=\"算法复杂度：\"><a href=\"#算法复杂度：\" class=\"headerlink\" title=\"算法复杂度：\"></a>算法复杂度：</h2><h3 id=\"时间复杂度：执行算法需要的工作量\"><a href=\"#时间复杂度：执行算法需要的工作量\" class=\"headerlink\" title=\"时间复杂度：执行算法需要的工作量\"></a>时间复杂度：执行算法需要的工作量</h3><p>1.频度：一个语句在代码中执行的次数<br>2.f(n)：代码中最深层次运算的频度<br>3.T(n)：代码中所有语句频度的和,是时间复杂度主要分析的东西<br>其中算法最深层次语句执行的频度（f(n)）是与T(n)同一数量级<br>4.BigO（时间复杂度 O）：T(n) &#x3D; O(f(n)) 简化为T(n)&#x3D;O(n)<br>5.最坏时间复杂度：最坏情况下执行算法的时间复杂度，最多次<br>6.最好时间复杂度：最好情况下执行算法的时间复杂度，最少次<br>7.平均时间复杂度：所有可能输入的示例概率相等情况下的期望值<br>8.分析原则：<br>加法规则：T(n) &#x3D; O(max(f(n),g(n))) 个人理解：同级情况下取最坏时间复杂度<br>乘法规则：T(n) &#x3D; O(f(n)<em>g(n)) 个人理解：嵌套复杂度直接相乘<br>9.常见时间复杂度：<br>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n</em>n) </p>\n<h3 id=\"空间复杂度：执行算法需要的内存空间\"><a href=\"#空间复杂度：执行算法需要的内存空间\" class=\"headerlink\" title=\"空间复杂度：执行算法需要的内存空间\"></a>空间复杂度：执行算法需要的内存空间</h3><p>S(n)&#x3D;O(f(n)) </p>\n<h2 id=\"进制：\"><a href=\"#进制：\" class=\"headerlink\" title=\"进制：\"></a>进制：</h2><p>1.权：十进制的权 10^(N-1)<br>2.按权展开：将R进制数的每一位数值用ak*R^k</p>\n<p>3.二进制和十进制转换：<br>按权展开求和：<br>            1 0 1 1 &#x3D; 1<em>2^3 + 0</em>2^2 + 1<em>2^1 + 1</em>2^0 &#x3D; 8 + 0 + 2 + 1 &#x3D; 11<br>            8 4 2 1<br>    4.十进制转二进制：<br>        整数部分：除2取余，倒序排列<br>        125 &#x3D;&gt; 1111101<br>         125%2&#x3D;62…1<br>          62%2&#x3D;31…0<br>          31%2&#x3D;15…1<br>          15%2&#x3D; 7…1<br>           7%2&#x3D; 3…1<br>           3%2&#x3D; 1…1<br>           1%2&#x3D; 0…1<br>        小数部分：乘二取整，先左后右<br>            小数乘二取整数部分，按照先后顺序从左到右排列<br>    5.二进制转八进制（前面补零）：<br>        从后往前三位一割不足补零<br>        11 &#x3D; 011 &#x3D; 3<br>    6.八进制转二进制：<br>        八进制的每一位数字转化为对应三位二进制的数字并排列<br>        123 &#x3D; 1010011<br>    7.二进制转十六进制（前面补零）：<br>        从后往前四位一割不足补零<br>        11 &#x3D; 0011 &#x3D; 3<br>    8.十六进制转二进制：<br>        十六进制的每一位数字转化为对应四位二进制的数字并排列<br>        123 &#x3D; 100100011<br>    9.不同进制转换：本质是确定不同权值位置的上的数码<br>        a进制转为b进制：正整数a % a进制下b进制的数字 余数一定是0~b-1<br>                        “除2取余，倒序排列”本质上就是这个</p>\n<h2 id=\"位运算：\"><a href=\"#位运算：\" class=\"headerlink\" title=\"位运算：\"></a>位运算：</h2><h3 id=\"与运算-and\"><a href=\"#与运算-and\" class=\"headerlink\" title=\"与运算 &amp; and\"></a>与运算 &amp; and</h3><pre><code>用途：常用于二进制取位操作\n法则：两个数字与运算时相同二进制位数只有均为1的情况下结果为1否则都是0，一个数 and 1 就是取二级制最末位\n    例如：100 &amp; 111 = 100\n</code></pre>\n<h3 id=\"或运算-or\"><a href=\"#或运算-or\" class=\"headerlink\" title=\"或运算 | or\"></a>或运算 | or</h3><pre><code>用途：通常用于二进制位数上的无条件赋值\n法则：两个数字或运算时相同二进制位数只要有1的情况下结果都为1，一个数 and 1 就是强制将该数字变为最接近的偶数，一个数 or 0 不变\n    例如：100 | 111 = 111\n</code></pre>\n<h3 id=\"异或运算-xor-（无进位加法）\"><a href=\"#异或运算-xor-（无进位加法）\" class=\"headerlink\" title=\"异或运算 ^ xor （无进位加法）\"></a>异或运算 ^ xor （无进位加法）</h3><pre><code>用途：\n法则：两个数字异或运算时相同二进制位数不同为1 相同为0(相同位数两数求和大于1不进位)，一个数异或运算两次结果不变\n    例如：100 ^ 111 = 011\n</code></pre>\n<h3 id=\"非运算-not\"><a href=\"#非运算-not\" class=\"headerlink\" title=\"非运算 ~ not\"></a>非运算 ~ not</h3><pre><code>用途：\n法则：将一个数字二进制的0和1全部取反\n</code></pre>\n<h3 id=\"右移运算-shr\"><a href=\"#右移运算-shr\" class=\"headerlink\" title=\"右移运算 &gt;&gt; shr\"></a>右移运算 &gt;&gt; shr</h3><pre><code>用途：a&gt;&gt;1 就是a除以2\n法则：a&gt;&gt;b 即为二级制数右移b位,相当于a/(2^b)取整\n</code></pre>\n<h3 id=\"左移运算-shl\"><a href=\"#左移运算-shl\" class=\"headerlink\" title=\"左移运算 &lt;&lt; shl\"></a>左移运算 &lt;&lt; shl</h3><pre><code>用途：a&lt;&lt;1 就是a*2\n法则：a&lt;&lt;b 即为二级制数左移b位,新的位用0代替,相当于a*(2^b)。如果溢出就舍弃高位，如果舍弃的高位是1，那么a*2不成立。\n</code></pre>\n<h3 id=\"反码补码和原码\"><a href=\"#反码补码和原码\" class=\"headerlink\" title=\"反码补码和原码\"></a>反码补码和原码</h3><pre><code>1.原码：最高位表示该数字符号位 1为负号 0为正号 其他位存放该数字二级制绝对值。\n  原码中有-0的概念(因为最高位强制为位数)。\n  原码最大的缺陷就是一个数和它的相反数相加不等于0\n    例如： 1001 表示 -1   0001 表示 1\n2.反码：正数的反码是它本身，负数的反码是除了符号位以外的按位取反\n    例如：3的原码是0011 则3的反码是0011 \n        -3的反码是1011 则-3的反码是 1100\n3.补码：从低位到高位第一个1和它右边的0不变左边取反，符号位不变 （负数的补码等于反码+1）\n    模：一个计量系统中的计数范围，时钟系统中计量范围是0~11，那么模就是12 就会出现9-2 = 9+10\n       n位计算机的模是0~2^n-1 即为2^n 亦有 2-1 = 2+(2^n-1)\n       在有模的计量系统中减法即可转化为 被减数加上减数的同余数 的加法，从而实现减法转为加法。\n    同余数：n的同余数 = 模-n \n           模=n+n的同余数\n    例子： \n        6    - 4    =&gt; 6    + (12)  = 2\n        0110 - 0100 =&gt; 0110 + (1100)= 10010 = 0010\n        a-b 等于 a+b的同余数的结果取较低对应位数 \n</code></pre>\n","excerpt":"","more":"<h2 id=\"计算机上的一维坐标系：\"><a href=\"#计算机上的一维坐标系：\" class=\"headerlink\" title=\"计算机上的一维坐标系：\"></a>计算机上的一维坐标系：</h2><p>以某一坐标点为原点，向某个方向为正方向，以一定的标度建立坐标轴即为一维坐标系<br>关键词：原点、方向、坐标轴</p>\n<h2 id=\"计算机上的二维坐标系：\"><a href=\"#计算机上的二维坐标系：\" class=\"headerlink\" title=\"计算机上的二维坐标系：\"></a>计算机上的二维坐标系：</h2><p>二维坐标系的X轴是向下的（xy轴方向为第四象限方向）</p>\n<h2 id=\"方向向量：\"><a href=\"#方向向量：\" class=\"headerlink\" title=\"方向向量：\"></a>方向向量：</h2><p>四方向：<br>    ——————————-<br>    |         | (x-1,y) |         |<br>    ——————————-<br>    | (x,y-1) |  (x,y)  | (x,y+1) |<br>    ——————————-<br>    |         | (x+1,y) |         |<br>    ——————————-<br>八方向：<br>    ——————————-<br>    |(x-1,y-1)| (x-1,y) |(x-1,y+1)|<br>    ——————————-<br>    | (x,y-1) |  (x,y)  | (x,y+1) |<br>    ——————————-<br>    |(x+1,y-1)| (x+1,y) |(x+1,y+1)|<br>    ——————————-</p>\n<h2 id=\"算法复杂度：\"><a href=\"#算法复杂度：\" class=\"headerlink\" title=\"算法复杂度：\"></a>算法复杂度：</h2><h3 id=\"时间复杂度：执行算法需要的工作量\"><a href=\"#时间复杂度：执行算法需要的工作量\" class=\"headerlink\" title=\"时间复杂度：执行算法需要的工作量\"></a>时间复杂度：执行算法需要的工作量</h3><p>1.频度：一个语句在代码中执行的次数<br>2.f(n)：代码中最深层次运算的频度<br>3.T(n)：代码中所有语句频度的和,是时间复杂度主要分析的东西<br>其中算法最深层次语句执行的频度（f(n)）是与T(n)同一数量级<br>4.BigO（时间复杂度 O）：T(n) &#x3D; O(f(n)) 简化为T(n)&#x3D;O(n)<br>5.最坏时间复杂度：最坏情况下执行算法的时间复杂度，最多次<br>6.最好时间复杂度：最好情况下执行算法的时间复杂度，最少次<br>7.平均时间复杂度：所有可能输入的示例概率相等情况下的期望值<br>8.分析原则：<br>加法规则：T(n) &#x3D; O(max(f(n),g(n))) 个人理解：同级情况下取最坏时间复杂度<br>乘法规则：T(n) &#x3D; O(f(n)<em>g(n)) 个人理解：嵌套复杂度直接相乘<br>9.常见时间复杂度：<br>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n</em>n) </p>\n<h3 id=\"空间复杂度：执行算法需要的内存空间\"><a href=\"#空间复杂度：执行算法需要的内存空间\" class=\"headerlink\" title=\"空间复杂度：执行算法需要的内存空间\"></a>空间复杂度：执行算法需要的内存空间</h3><p>S(n)&#x3D;O(f(n)) </p>\n<h2 id=\"进制：\"><a href=\"#进制：\" class=\"headerlink\" title=\"进制：\"></a>进制：</h2><p>1.权：十进制的权 10^(N-1)<br>2.按权展开：将R进制数的每一位数值用ak*R^k</p>\n<p>3.二进制和十进制转换：<br>按权展开求和：<br>            1 0 1 1 &#x3D; 1<em>2^3 + 0</em>2^2 + 1<em>2^1 + 1</em>2^0 &#x3D; 8 + 0 + 2 + 1 &#x3D; 11<br>            8 4 2 1<br>    4.十进制转二进制：<br>        整数部分：除2取余，倒序排列<br>        125 &#x3D;&gt; 1111101<br>         125%2&#x3D;62…1<br>          62%2&#x3D;31…0<br>          31%2&#x3D;15…1<br>          15%2&#x3D; 7…1<br>           7%2&#x3D; 3…1<br>           3%2&#x3D; 1…1<br>           1%2&#x3D; 0…1<br>        小数部分：乘二取整，先左后右<br>            小数乘二取整数部分，按照先后顺序从左到右排列<br>    5.二进制转八进制（前面补零）：<br>        从后往前三位一割不足补零<br>        11 &#x3D; 011 &#x3D; 3<br>    6.八进制转二进制：<br>        八进制的每一位数字转化为对应三位二进制的数字并排列<br>        123 &#x3D; 1010011<br>    7.二进制转十六进制（前面补零）：<br>        从后往前四位一割不足补零<br>        11 &#x3D; 0011 &#x3D; 3<br>    8.十六进制转二进制：<br>        十六进制的每一位数字转化为对应四位二进制的数字并排列<br>        123 &#x3D; 100100011<br>    9.不同进制转换：本质是确定不同权值位置的上的数码<br>        a进制转为b进制：正整数a % a进制下b进制的数字 余数一定是0~b-1<br>                        “除2取余，倒序排列”本质上就是这个</p>\n<h2 id=\"位运算：\"><a href=\"#位运算：\" class=\"headerlink\" title=\"位运算：\"></a>位运算：</h2><h3 id=\"与运算-and\"><a href=\"#与运算-and\" class=\"headerlink\" title=\"与运算 &amp; and\"></a>与运算 &amp; and</h3><pre><code>用途：常用于二进制取位操作\n法则：两个数字与运算时相同二进制位数只有均为1的情况下结果为1否则都是0，一个数 and 1 就是取二级制最末位\n    例如：100 &amp; 111 = 100\n</code></pre>\n<h3 id=\"或运算-or\"><a href=\"#或运算-or\" class=\"headerlink\" title=\"或运算 | or\"></a>或运算 | or</h3><pre><code>用途：通常用于二进制位数上的无条件赋值\n法则：两个数字或运算时相同二进制位数只要有1的情况下结果都为1，一个数 and 1 就是强制将该数字变为最接近的偶数，一个数 or 0 不变\n    例如：100 | 111 = 111\n</code></pre>\n<h3 id=\"异或运算-xor-（无进位加法）\"><a href=\"#异或运算-xor-（无进位加法）\" class=\"headerlink\" title=\"异或运算 ^ xor （无进位加法）\"></a>异或运算 ^ xor （无进位加法）</h3><pre><code>用途：\n法则：两个数字异或运算时相同二进制位数不同为1 相同为0(相同位数两数求和大于1不进位)，一个数异或运算两次结果不变\n    例如：100 ^ 111 = 011\n</code></pre>\n<h3 id=\"非运算-not\"><a href=\"#非运算-not\" class=\"headerlink\" title=\"非运算 ~ not\"></a>非运算 ~ not</h3><pre><code>用途：\n法则：将一个数字二进制的0和1全部取反\n</code></pre>\n<h3 id=\"右移运算-shr\"><a href=\"#右移运算-shr\" class=\"headerlink\" title=\"右移运算 &gt;&gt; shr\"></a>右移运算 &gt;&gt; shr</h3><pre><code>用途：a&gt;&gt;1 就是a除以2\n法则：a&gt;&gt;b 即为二级制数右移b位,相当于a/(2^b)取整\n</code></pre>\n<h3 id=\"左移运算-shl\"><a href=\"#左移运算-shl\" class=\"headerlink\" title=\"左移运算 &lt;&lt; shl\"></a>左移运算 &lt;&lt; shl</h3><pre><code>用途：a&lt;&lt;1 就是a*2\n法则：a&lt;&lt;b 即为二级制数左移b位,新的位用0代替,相当于a*(2^b)。如果溢出就舍弃高位，如果舍弃的高位是1，那么a*2不成立。\n</code></pre>\n<h3 id=\"反码补码和原码\"><a href=\"#反码补码和原码\" class=\"headerlink\" title=\"反码补码和原码\"></a>反码补码和原码</h3><pre><code>1.原码：最高位表示该数字符号位 1为负号 0为正号 其他位存放该数字二级制绝对值。\n  原码中有-0的概念(因为最高位强制为位数)。\n  原码最大的缺陷就是一个数和它的相反数相加不等于0\n    例如： 1001 表示 -1   0001 表示 1\n2.反码：正数的反码是它本身，负数的反码是除了符号位以外的按位取反\n    例如：3的原码是0011 则3的反码是0011 \n        -3的反码是1011 则-3的反码是 1100\n3.补码：从低位到高位第一个1和它右边的0不变左边取反，符号位不变 （负数的补码等于反码+1）\n    模：一个计量系统中的计数范围，时钟系统中计量范围是0~11，那么模就是12 就会出现9-2 = 9+10\n       n位计算机的模是0~2^n-1 即为2^n 亦有 2-1 = 2+(2^n-1)\n       在有模的计量系统中减法即可转化为 被减数加上减数的同余数 的加法，从而实现减法转为加法。\n    同余数：n的同余数 = 模-n \n           模=n+n的同余数\n    例子： \n        6    - 4    =&gt; 6    + (12)  = 2\n        0110 - 0100 =&gt; 0110 + (1100)= 10010 = 0010\n        a-b 等于 a+b的同余数的结果取较低对应位数 \n</code></pre>\n"},{"title":"算法习题-统计射击比赛成绩","date":"2025-04-08T10:34:05.000Z","updated":"2025-04-08T10:34:05.000Z","keywords":["算法"],"description":null,"_content":"\n给定一个射击比赛成绩单，包含多个选手若干次射击的成绩分数，请对每个选手按其最高3个分数之和进行降序排名，输出降序排名后的选手ID序列。条件如下：\n1、一个选手可以有多个射击成绩的分数，且次序不固定。\n2、如果一个选手成绩少于3个，则认为选手的所有成绩无效，排名忽略该选手。\n3、如果选手的成绩之和相等，则成绩之和相等的选手按照其ID降序排列。输入描述：\n```\n输入\n输入第一行，一个整数N，表示该场比赛总共进行了N次射击，产生N个成绩分数（2<=N<=100）。\n输入第二行，一个长度为N整数序列，表示参与每次射击的选手ID（0<=ID<=99）。\n输入第三行，一个长度为N整数序列，表示参与每次射击的选手对应的成绩（0<=成绩<=100）。\n```\n```\n输出\n符合题设条件的降序排名后的选手ID序列。\n```\n```\n示例输入\n13\n3,3,7,4,4,4,4,7,7,3,5,5,5\n53,80,68,24,39,76,66,16,100,55,53,80,55\n```\n```\n示例输出\n5,3,7,4\n```\n```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\n\n/**\n * 解题思路：\n * 1、用Map整理出每名运动员的成绩，k 为运动员id，v 为成绩集合\n * 2、遍历map对成绩进行处理先排除掉成绩集合小于3个的\n * 3、再对成绩进行排序sort倒序去最后三个加和为总成绩\n * 4、将id和成绩存为list 第一位为id 第二位为成绩\n * 5、将 4 中的每个数据存入list中，对这个list进行排序 排序优先级为先成绩再id\n */\npublic class total_shot_racing {\n    public static String solution(int shotTimes, String ids, String scores) {\n        //切分id和成绩\n        String[] idArr = ids.split(\",\");\n        String[] scoreArr = scores.split(\",\");\n        // 将成绩存入map中\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        for (int i = 0; i < shotTimes; i++) {\n            int id = Integer.parseInt(idArr[i]);\n            int score = Integer.parseInt(scoreArr[i]);\n            //如果已经有这个id了就在value中追加，没有就新建value并加入分数\n            if (map.containsKey(id)) {\n                map.get(id).add(score);\n            } else {\n                ArrayList<Integer> arr = new ArrayList<>();\n                arr.add(score);\n                map.put(id, arr);\n            }\n\n        }\n        \n        List<List<Integer>> lists = new ArrayList<>();\n        //遍历map取出成绩数大于三个的运动员的三个最高分，并将id和总分存入list\n        map.forEach((a, b) -> {\n            ArrayList<Integer> list = new ArrayList<>();\n            if (b.size() < 3) {\n                map.remove(a);\n            } else {\n                Collections.sort(b);\n                list.add(a);\n                list.add(b.get(b.size() - 1) + b.get(b.size() - 2) + b.get(b.size() - 3));\n            }\n            lists.add(list);\n        });\n        //对所有运动员成绩集合进行排序，优先级顺序为成绩 id\n        lists.sort((a, b) -> {\n            if (b.get(1)> a.get(1)){\n                return 1;\n            }\n            if (b.get(0)> a.get(0)){\n                return 1;\n            }\n            return -1;\n        });\n        \n        //整理输出格式\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < lists.size(); i++) {\n            if (i == lists.size()-1){\n                result.append(lists.get(i).get(0));\n            }else {\n                result.append(lists.get(i).get(0)).append(\",\");\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        int shotTimes = 13;\n        String ids = \"3,3,7,4,4,4,4,7,7,3,5,5,5\";\n        String scores = \"53,80,68,24,39,76,66,16,100,55,53,80,55\";\n        String solution = solution(shotTimes, ids, scores);\n        System.out.println(solution);\n    }\n}\n\n```","source":"_posts/算法习题-统计射击比赛成绩/算法习题-统计射击比赛成绩.md","raw":"---\ntitle: 算法习题-统计射击比赛成绩\ndate: 2025-04-08 18:34:05\nupdated: 2025-04-08 18:34:05\ntags:   \n - 算法\ncategories:\n - 算法\n - 习题\nkeywords:\n - 算法\ndescription:\n---\n\n给定一个射击比赛成绩单，包含多个选手若干次射击的成绩分数，请对每个选手按其最高3个分数之和进行降序排名，输出降序排名后的选手ID序列。条件如下：\n1、一个选手可以有多个射击成绩的分数，且次序不固定。\n2、如果一个选手成绩少于3个，则认为选手的所有成绩无效，排名忽略该选手。\n3、如果选手的成绩之和相等，则成绩之和相等的选手按照其ID降序排列。输入描述：\n```\n输入\n输入第一行，一个整数N，表示该场比赛总共进行了N次射击，产生N个成绩分数（2<=N<=100）。\n输入第二行，一个长度为N整数序列，表示参与每次射击的选手ID（0<=ID<=99）。\n输入第三行，一个长度为N整数序列，表示参与每次射击的选手对应的成绩（0<=成绩<=100）。\n```\n```\n输出\n符合题设条件的降序排名后的选手ID序列。\n```\n```\n示例输入\n13\n3,3,7,4,4,4,4,7,7,3,5,5,5\n53,80,68,24,39,76,66,16,100,55,53,80,55\n```\n```\n示例输出\n5,3,7,4\n```\n```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\n\n/**\n * 解题思路：\n * 1、用Map整理出每名运动员的成绩，k 为运动员id，v 为成绩集合\n * 2、遍历map对成绩进行处理先排除掉成绩集合小于3个的\n * 3、再对成绩进行排序sort倒序去最后三个加和为总成绩\n * 4、将id和成绩存为list 第一位为id 第二位为成绩\n * 5、将 4 中的每个数据存入list中，对这个list进行排序 排序优先级为先成绩再id\n */\npublic class total_shot_racing {\n    public static String solution(int shotTimes, String ids, String scores) {\n        //切分id和成绩\n        String[] idArr = ids.split(\",\");\n        String[] scoreArr = scores.split(\",\");\n        // 将成绩存入map中\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        for (int i = 0; i < shotTimes; i++) {\n            int id = Integer.parseInt(idArr[i]);\n            int score = Integer.parseInt(scoreArr[i]);\n            //如果已经有这个id了就在value中追加，没有就新建value并加入分数\n            if (map.containsKey(id)) {\n                map.get(id).add(score);\n            } else {\n                ArrayList<Integer> arr = new ArrayList<>();\n                arr.add(score);\n                map.put(id, arr);\n            }\n\n        }\n        \n        List<List<Integer>> lists = new ArrayList<>();\n        //遍历map取出成绩数大于三个的运动员的三个最高分，并将id和总分存入list\n        map.forEach((a, b) -> {\n            ArrayList<Integer> list = new ArrayList<>();\n            if (b.size() < 3) {\n                map.remove(a);\n            } else {\n                Collections.sort(b);\n                list.add(a);\n                list.add(b.get(b.size() - 1) + b.get(b.size() - 2) + b.get(b.size() - 3));\n            }\n            lists.add(list);\n        });\n        //对所有运动员成绩集合进行排序，优先级顺序为成绩 id\n        lists.sort((a, b) -> {\n            if (b.get(1)> a.get(1)){\n                return 1;\n            }\n            if (b.get(0)> a.get(0)){\n                return 1;\n            }\n            return -1;\n        });\n        \n        //整理输出格式\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < lists.size(); i++) {\n            if (i == lists.size()-1){\n                result.append(lists.get(i).get(0));\n            }else {\n                result.append(lists.get(i).get(0)).append(\",\");\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        int shotTimes = 13;\n        String ids = \"3,3,7,4,4,4,4,7,7,3,5,5,5\";\n        String scores = \"53,80,68,24,39,76,66,16,100,55,53,80,55\";\n        String solution = solution(shotTimes, ids, scores);\n        System.out.println(solution);\n    }\n}\n\n```","slug":"算法习题-统计射击比赛成绩/算法习题-统计射击比赛成绩","published":1,"comments":1,"layout":"post","photos":[],"_id":"cmctwyvbf0043x4grd31uaf31","content":"<p>给定一个射击比赛成绩单，包含多个选手若干次射击的成绩分数，请对每个选手按其最高3个分数之和进行降序排名，输出降序排名后的选手ID序列。条件如下：<br>1、一个选手可以有多个射击成绩的分数，且次序不固定。<br>2、如果一个选手成绩少于3个，则认为选手的所有成绩无效，排名忽略该选手。<br>3、如果选手的成绩之和相等，则成绩之和相等的选手按照其ID降序排列。输入描述：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入</span><br><span class=\"line\">输入第一行，一个整数N，表示该场比赛总共进行了N次射击，产生N个成绩分数（2&lt;=N&lt;=100）。</span><br><span class=\"line\">输入第二行，一个长度为N整数序列，表示参与每次射击的选手ID（0&lt;=ID&lt;=99）。</span><br><span class=\"line\">输入第三行，一个长度为N整数序列，表示参与每次射击的选手对应的成绩（0&lt;=成绩&lt;=100）。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出</span><br><span class=\"line\">符合题设条件的降序排名后的选手ID序列。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例输入</span><br><span class=\"line\">13</span><br><span class=\"line\">3,3,7,4,4,4,4,7,7,3,5,5,5</span><br><span class=\"line\">53,80,68,24,39,76,66,16,100,55,53,80,55</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例输出</span><br><span class=\"line\">5,3,7,4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、用Map整理出每名运动员的成绩，k 为运动员id，v 为成绩集合</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、遍历map对成绩进行处理先排除掉成绩集合小于3个的</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、再对成绩进行排序sort倒序去最后三个加和为总成绩</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、将id和成绩存为list 第一位为id 第二位为成绩</span></span><br><span class=\"line\"><span class=\"comment\"> * 5、将 4 中的每个数据存入list中，对这个list进行排序 排序优先级为先成绩再id</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">total_shot_racing</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">solution</span><span class=\"params\">(<span class=\"type\">int</span> shotTimes, String ids, String scores)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//切分id和成绩</span></span><br><span class=\"line\">        String[] idArr = ids.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        String[] scoreArr = scores.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 将成绩存入map中</span></span><br><span class=\"line\">        HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; shotTimes; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> Integer.parseInt(idArr[i]);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> Integer.parseInt(scoreArr[i]);</span><br><span class=\"line\">            <span class=\"comment\">//如果已经有这个id了就在value中追加，没有就新建value并加入分数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(id)) &#123;</span><br><span class=\"line\">                map.get(id).add(score);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ArrayList&lt;Integer&gt; arr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">                arr.add(score);</span><br><span class=\"line\">                map.put(id, arr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; lists = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//遍历map取出成绩数大于三个的运动员的三个最高分，并将id和总分存入list</span></span><br><span class=\"line\">        map.forEach((a, b) -&gt; &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b.size() &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                map.remove(a);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Collections.sort(b);</span><br><span class=\"line\">                list.add(a);</span><br><span class=\"line\">                list.add(b.get(b.size() - <span class=\"number\">1</span>) + b.get(b.size() - <span class=\"number\">2</span>) + b.get(b.size() - <span class=\"number\">3</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lists.add(list);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//对所有运动员成绩集合进行排序，优先级顺序为成绩 id</span></span><br><span class=\"line\">        lists.sort((a, b) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b.get(<span class=\"number\">1</span>)&gt; a.get(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b.get(<span class=\"number\">0</span>)&gt; a.get(<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//整理输出格式</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == lists.size()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                result.append(lists.get(i).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result.append(lists.get(i).get(<span class=\"number\">0</span>)).append(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">shotTimes</span> <span class=\"operator\">=</span> <span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ids</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;3,3,7,4,4,4,4,7,7,3,5,5,5&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">scores</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;53,80,68,24,39,76,66,16,100,55,53,80,55&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(shotTimes, ids, scores);</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>给定一个射击比赛成绩单，包含多个选手若干次射击的成绩分数，请对每个选手按其最高3个分数之和进行降序排名，输出降序排名后的选手ID序列。条件如下：<br>1、一个选手可以有多个射击成绩的分数，且次序不固定。<br>2、如果一个选手成绩少于3个，则认为选手的所有成绩无效，排名忽略该选手。<br>3、如果选手的成绩之和相等，则成绩之和相等的选手按照其ID降序排列。输入描述：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入</span><br><span class=\"line\">输入第一行，一个整数N，表示该场比赛总共进行了N次射击，产生N个成绩分数（2&lt;=N&lt;=100）。</span><br><span class=\"line\">输入第二行，一个长度为N整数序列，表示参与每次射击的选手ID（0&lt;=ID&lt;=99）。</span><br><span class=\"line\">输入第三行，一个长度为N整数序列，表示参与每次射击的选手对应的成绩（0&lt;=成绩&lt;=100）。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出</span><br><span class=\"line\">符合题设条件的降序排名后的选手ID序列。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例输入</span><br><span class=\"line\">13</span><br><span class=\"line\">3,3,7,4,4,4,4,7,7,3,5,5,5</span><br><span class=\"line\">53,80,68,24,39,76,66,16,100,55,53,80,55</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例输出</span><br><span class=\"line\">5,3,7,4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、用Map整理出每名运动员的成绩，k 为运动员id，v 为成绩集合</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、遍历map对成绩进行处理先排除掉成绩集合小于3个的</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、再对成绩进行排序sort倒序去最后三个加和为总成绩</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、将id和成绩存为list 第一位为id 第二位为成绩</span></span><br><span class=\"line\"><span class=\"comment\"> * 5、将 4 中的每个数据存入list中，对这个list进行排序 排序优先级为先成绩再id</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">total_shot_racing</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">solution</span><span class=\"params\">(<span class=\"type\">int</span> shotTimes, String ids, String scores)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//切分id和成绩</span></span><br><span class=\"line\">        String[] idArr = ids.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        String[] scoreArr = scores.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 将成绩存入map中</span></span><br><span class=\"line\">        HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; shotTimes; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> Integer.parseInt(idArr[i]);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> Integer.parseInt(scoreArr[i]);</span><br><span class=\"line\">            <span class=\"comment\">//如果已经有这个id了就在value中追加，没有就新建value并加入分数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(id)) &#123;</span><br><span class=\"line\">                map.get(id).add(score);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ArrayList&lt;Integer&gt; arr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">                arr.add(score);</span><br><span class=\"line\">                map.put(id, arr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; lists = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//遍历map取出成绩数大于三个的运动员的三个最高分，并将id和总分存入list</span></span><br><span class=\"line\">        map.forEach((a, b) -&gt; &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b.size() &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                map.remove(a);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Collections.sort(b);</span><br><span class=\"line\">                list.add(a);</span><br><span class=\"line\">                list.add(b.get(b.size() - <span class=\"number\">1</span>) + b.get(b.size() - <span class=\"number\">2</span>) + b.get(b.size() - <span class=\"number\">3</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lists.add(list);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//对所有运动员成绩集合进行排序，优先级顺序为成绩 id</span></span><br><span class=\"line\">        lists.sort((a, b) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b.get(<span class=\"number\">1</span>)&gt; a.get(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b.get(<span class=\"number\">0</span>)&gt; a.get(<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//整理输出格式</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == lists.size()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                result.append(lists.get(i).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result.append(lists.get(i).get(<span class=\"number\">0</span>)).append(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">shotTimes</span> <span class=\"operator\">=</span> <span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ids</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;3,3,7,4,4,4,4,7,7,3,5,5,5&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">scores</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;53,80,68,24,39,76,66,16,100,55,53,80,55&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> solution(shotTimes, ids, scores);</span><br><span class=\"line\">        System.out.println(solution);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cmctwyvas000ax4grcof2ddle","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb0000vx4gr4wo88n51"},{"post_id":"cmctwyvas000ax4grcof2ddle","category_id":"cmctwyvax000mx4gre5bfap6e","_id":"cmctwyvb1000zx4gregidcur2"},{"post_id":"cmctwyvao0005x4grciac23at","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb10012x4gr8eh6giaf"},{"post_id":"cmctwyvao0005x4grciac23at","category_id":"cmctwyvaz000rx4gr3q4nb7aa","_id":"cmctwyvb20017x4grchla4wgv"},{"post_id":"cmctwyvat000bx4gr223o0dii","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb3001ax4gr7n8g7rwj"},{"post_id":"cmctwyvat000bx4gr223o0dii","category_id":"cmctwyvb0000wx4gr2hls1dhf","_id":"cmctwyvb4001ex4grf7bf9ow3"},{"post_id":"cmctwyvau000fx4graqi10olf","category_id":"cmctwyvb10014x4grhg9u7u7u","_id":"cmctwyvb5001kx4grg0nehb9c"},{"post_id":"cmctwyvap0006x4gr6ttf716j","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb6001ox4grdjfv6g9c"},{"post_id":"cmctwyvap0006x4gr6ttf716j","category_id":"cmctwyvb3001cx4gr70xs58eu","_id":"cmctwyvb7001rx4gr8wxu0bc6"},{"post_id":"cmctwyvb4001fx4grh26f7ai7","category_id":"cmctwyvb10014x4grhg9u7u7u","_id":"cmctwyvb7001tx4gr2zapcoqf"},{"post_id":"cmctwyvav000gx4grbx2x5mkx","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb7001xx4gr9cgl2an9"},{"post_id":"cmctwyvav000gx4grbx2x5mkx","category_id":"cmctwyvax000mx4gre5bfap6e","_id":"cmctwyvb8001zx4grf8z425yk"},{"post_id":"cmctwyvaw000jx4grd0uccjdf","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb80022x4grgwlp87bu"},{"post_id":"cmctwyvaw000jx4grd0uccjdf","category_id":"cmctwyvb6001nx4gr1mwyas8u","_id":"cmctwyvb80024x4gr3yfb1vfj"},{"post_id":"cmctwyvas0009x4gr0vakbtpp","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb80027x4gr8y4sdzvp"},{"post_id":"cmctwyvas0009x4gr0vakbtpp","category_id":"cmctwyvaz000rx4gr3q4nb7aa","_id":"cmctwyvb8002ax4gr6gvjfeq1"},{"post_id":"cmctwyvax000lx4grffmu01sp","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb8002cx4graevm4eum"},{"post_id":"cmctwyvax000lx4grffmu01sp","category_id":"cmctwyvb80020x4gr4if51m6q","_id":"cmctwyvb9002ex4grd6dafdcl"},{"post_id":"cmctwyvay000ox4grgoumg382","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb9002hx4gr45vubqv2"},{"post_id":"cmctwyvay000ox4grgoumg382","category_id":"cmctwyvb80020x4gr4if51m6q","_id":"cmctwyvb9002jx4gr117n926f"},{"post_id":"cmctwyvay000qx4grh0ab1rm3","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvb9002mx4grbbig8fnj"},{"post_id":"cmctwyvay000qx4grh0ab1rm3","category_id":"cmctwyvb80020x4gr4if51m6q","_id":"cmctwyvb9002ox4grcufm5m09"},{"post_id":"cmctwyvaz000tx4gr09ri6lmt","category_id":"cmctwyvb10014x4grhg9u7u7u","_id":"cmctwyvb9002rx4gr1xcd448c"},{"post_id":"cmctwyvb0000ux4grgem31gkk","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvba002vx4gr7nbj2cfw"},{"post_id":"cmctwyvb0000ux4grgem31gkk","category_id":"cmctwyvb80020x4gr4if51m6q","_id":"cmctwyvba002xx4gr3g2w1bhl"},{"post_id":"cmctwyvb10011x4gr5kjxasq8","category_id":"cmctwyvb10014x4grhg9u7u7u","_id":"cmctwyvba002zx4gr9kn33a2l"},{"post_id":"cmctwyvb20015x4gr6ezy5oim","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvba0034x4gray3n7dix"},{"post_id":"cmctwyvb20015x4gr6ezy5oim","category_id":"cmctwyvba002ux4gr0p2u8k3c","_id":"cmctwyvbb0036x4gr7hqh7bjc"},{"post_id":"cmctwyvb20019x4gr8ta5ak1k","category_id":"cmctwyvaq0007x4gr4eq9e9lr","_id":"cmctwyvbb0038x4grbyr34yly"},{"post_id":"cmctwyvb20019x4gr8ta5ak1k","category_id":"cmctwyvb80020x4gr4if51m6q","_id":"cmctwyvbb003bx4gr5qnldf5j"},{"post_id":"cmctwyvb3001bx4graxuwgf07","category_id":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbb003ex4gr7sw94mqu"},{"post_id":"cmctwyvb4001gx4grcsb6b5gm","category_id":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbc003tx4grbakhg8kr"},{"post_id":"cmctwyvb4001gx4grcsb6b5gm","category_id":"cmctwyvbc003nx4gr30x3932s","_id":"cmctwyvbc003ux4gr5sijfsg2"},{"post_id":"cmctwyvb5001lx4gr3dkcgnip","category_id":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbc003wx4grdteveyk4"},{"post_id":"cmctwyvb5001lx4gr3dkcgnip","category_id":"cmctwyvbc003nx4gr30x3932s","_id":"cmctwyvbc003xx4gr7rb9bbgr"},{"post_id":"cmctwyvb6001mx4graglf8ztp","category_id":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbc003yx4grgnn49d59"},{"post_id":"cmctwyvb6001mx4graglf8ztp","category_id":"cmctwyvbc003nx4gr30x3932s","_id":"cmctwyvbc003zx4gr2ict0sql"},{"post_id":"cmctwyvb7001qx4gr7a17502s","category_id":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbc0040x4gratyw13do"},{"post_id":"cmctwyvb7001qx4gr7a17502s","category_id":"cmctwyvbc003nx4gr30x3932s","_id":"cmctwyvbc0041x4grhlt6dm6z"},{"post_id":"cmctwyvbf0042x4gr99hqe8k8","category_id":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbg0046x4gr2gofhqq1"},{"post_id":"cmctwyvbf0043x4grd31uaf31","category_id":"cmctwyvba0033x4grcw49alv9","_id":"cmctwyvbg0047x4grctcd6up5"},{"post_id":"cmctwyvbf0043x4grd31uaf31","category_id":"cmctwyvbc003nx4gr30x3932s","_id":"cmctwyvbg0048x4grbjbzat2k"}],"PostTag":[{"post_id":"cmctwyvao0005x4grciac23at","tag_id":"cmctwyvar0008x4grfmbfaion","_id":"cmctwyvau000ex4grbdx48w3c"},{"post_id":"cmctwyvap0006x4gr6ttf716j","tag_id":"cmctwyvat000dx4grez8hh4c2","_id":"cmctwyvax000kx4gr52ro4akf"},{"post_id":"cmctwyvas0009x4gr0vakbtpp","tag_id":"cmctwyvar0008x4grfmbfaion","_id":"cmctwyvay000px4graz9b82h6"},{"post_id":"cmctwyvas000ax4grcof2ddle","tag_id":"cmctwyvay000nx4gr3zgca3p2","_id":"cmctwyvb10010x4grca2me14t"},{"post_id":"cmctwyvas000ax4grcof2ddle","tag_id":"cmctwyvaz000sx4gr0i1u0won","_id":"cmctwyvb10013x4grhox6dbpe"},{"post_id":"cmctwyvat000bx4gr223o0dii","tag_id":"cmctwyvb0000xx4gr3lng0mpq","_id":"cmctwyvb20018x4gr9gdaaj76"},{"post_id":"cmctwyvb4001fx4grh26f7ai7","tag_id":"cmctwyvb0000xx4gr3lng0mpq","_id":"cmctwyvb5001jx4gr1tu8emsb"},{"post_id":"cmctwyvau000fx4graqi10olf","tag_id":"cmctwyvb20016x4gr007idmno","_id":"cmctwyvb7001sx4gr71pk1vqj"},{"post_id":"cmctwyvau000fx4graqi10olf","tag_id":"cmctwyvb3001dx4grf4xz4f1z","_id":"cmctwyvb7001vx4grebh30i79"},{"post_id":"cmctwyvau000fx4graqi10olf","tag_id":"cmctwyvb5001ix4gr08618m4r","_id":"cmctwyvb8001yx4gr7kyl8sz1"},{"post_id":"cmctwyvav000gx4grbx2x5mkx","tag_id":"cmctwyvay000nx4gr3zgca3p2","_id":"cmctwyvb80023x4gr5gbl8h0p"},{"post_id":"cmctwyvav000gx4grbx2x5mkx","tag_id":"cmctwyvb7001wx4grbwyuejpx","_id":"cmctwyvb80026x4grdc2gakmi"},{"post_id":"cmctwyvaw000jx4grd0uccjdf","tag_id":"cmctwyvb80021x4gr2mpv5ox4","_id":"cmctwyvb80029x4grabunde3x"},{"post_id":"cmctwyvax000lx4grffmu01sp","tag_id":"cmctwyvb80028x4gra4d8cx6r","_id":"cmctwyvb9002fx4grdln50cds"},{"post_id":"cmctwyvay000ox4grgoumg382","tag_id":"cmctwyvb80028x4gra4d8cx6r","_id":"cmctwyvb9002kx4graarnh0q5"},{"post_id":"cmctwyvay000qx4grh0ab1rm3","tag_id":"cmctwyvb80028x4gra4d8cx6r","_id":"cmctwyvb9002px4gr8c8x1jpa"},{"post_id":"cmctwyvaz000tx4gr09ri6lmt","tag_id":"cmctwyvb5001ix4gr08618m4r","_id":"cmctwyvba002tx4grf8vs8u93"},{"post_id":"cmctwyvb0000ux4grgem31gkk","tag_id":"cmctwyvb80028x4gra4d8cx6r","_id":"cmctwyvba002yx4gr7bhd46v7"},{"post_id":"cmctwyvb10011x4gr5kjxasq8","tag_id":"cmctwyvb5001ix4gr08618m4r","_id":"cmctwyvba0032x4grat9t2rcr"},{"post_id":"cmctwyvb20015x4gr6ezy5oim","tag_id":"cmctwyvba0031x4gr3qp9h013","_id":"cmctwyvbb0037x4grfh65baaw"},{"post_id":"cmctwyvb20019x4gr8ta5ak1k","tag_id":"cmctwyvb80028x4gra4d8cx6r","_id":"cmctwyvbb003cx4grfayva5a8"},{"post_id":"cmctwyvb3001bx4graxuwgf07","tag_id":"cmctwyvbb003ax4gr29kehgzu","_id":"cmctwyvbb003gx4grd7kd55di"},{"post_id":"cmctwyvb4001gx4grcsb6b5gm","tag_id":"cmctwyvbb003ax4gr29kehgzu","_id":"cmctwyvbb003jx4grefrhdlim"},{"post_id":"cmctwyvb5001lx4gr3dkcgnip","tag_id":"cmctwyvbb003ax4gr29kehgzu","_id":"cmctwyvbc003mx4grb3mfbz83"},{"post_id":"cmctwyvb6001mx4graglf8ztp","tag_id":"cmctwyvbb003ax4gr29kehgzu","_id":"cmctwyvbc003px4grh782eg9w"},{"post_id":"cmctwyvb7001qx4gr7a17502s","tag_id":"cmctwyvbb003ax4gr29kehgzu","_id":"cmctwyvbc003rx4gr3d5r7dpq"},{"post_id":"cmctwyvbf0042x4gr99hqe8k8","tag_id":"cmctwyvbb003ax4gr29kehgzu","_id":"cmctwyvbg0044x4grgi8y4hz0"},{"post_id":"cmctwyvbf0043x4grd31uaf31","tag_id":"cmctwyvbb003ax4gr29kehgzu","_id":"cmctwyvbg0045x4grbopncxvu"}],"Tag":[{"name":"Spring","_id":"cmctwyvar0008x4grfmbfaion"},{"name":"hadoop","_id":"cmctwyvat000dx4grez8hh4c2"},{"name":"flask","_id":"cmctwyvay000nx4gr3zgca3p2"},{"name":"layui","_id":"cmctwyvaz000sx4gr0i1u0won"},{"name":"docker","_id":"cmctwyvb0000xx4gr3lng0mpq"},{"name":"excel","_id":"cmctwyvb20016x4gr007idmno"},{"name":"sql","_id":"cmctwyvb3001dx4grf4xz4f1z"},{"name":"开发心得","_id":"cmctwyvb5001ix4gr08618m4r"},{"name":"config","_id":"cmctwyvb7001wx4grbwyuejpx"},{"name":"hexo","_id":"cmctwyvb80021x4gr2mpv5ox4"},{"name":"oracle","_id":"cmctwyvb80028x4gra4d8cx6r"},{"name":"开发基础知识","_id":"cmctwyvba0031x4gr3qp9h013"},{"name":"算法","_id":"cmctwyvbb003ax4gr29kehgzu"}]}}